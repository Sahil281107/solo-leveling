solo-leveling-frontend/
app/api/upload/route.ts
export async function POST(request: Request) {
  try {
    // For now, just return a success response
    // File upload will be handled by backend
    return new Response(JSON.stringify({ 
      message: 'Upload endpoint - use backend for file upload',
      url: '/uploads/default.png'
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (error) {
    return new Response(JSON.stringify({ error: 'Upload failed' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}




app/admin/settings/page.tsx
// File: frontend/app/admin/settings/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import toast from 'react-hot-toast';
import api from '@/lib/api';
import { getUser, logout } from '@/lib/auth';
import Navbar from '@/components/layout/Navbar';
import FeatureFlags from '@/components/admin/FeatureFlags';
import SystemMonitoring from '@/components/admin/SystemMonitoring';
import { 
  Settings, Crown, Save, RotateCcw, Download, Upload, 
  Gamepad2, Trophy, Shield, Palette, BarChart3, Database,
  Sliders, AlertCircle, CheckCircle, Clock, Activity, Flag
} from 'lucide-react';

interface SettingValue {
  value: any;
  type: string;
  description: string;
}

interface Settings {
  quest_system: Record<string, SettingValue>;
  level_progression: Record<string, SettingValue>;
  security: Record<string, SettingValue>;
  platform: Record<string, SettingValue>;
  monitoring: Record<string, SettingValue>;
  coach_system: Record<string, SettingValue>;
}

export default function AdminSettingsPage() {
  const router = useRouter();
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [activeTab, setActiveTab] = useState('quest_system');
  const [settings, setSettings] = useState<Settings>({
    quest_system: {},
    level_progression: {},
    security: {},
    platform: {},
    monitoring: {},
    coach_system: {}
  });
  const [originalSettings, setOriginalSettings] = useState<Settings>({
    quest_system: {},
    level_progression: {},
    security: {},
    platform: {},
    monitoring: {},
    coach_system: {}
  });
  const [hasChanges, setHasChanges] = useState(false);

  // Background animation
  const [currentBg, setCurrentBg] = useState(0);
  const backgrounds = [
    '/images/backgrounds/solo-leveling-1.jpg',
    '/images/backgrounds/solo-leveling-2.jpg',
    '/images/backgrounds/solo-leveling-3.jpg',
    '/images/backgrounds/solo-leveling-4.jpg',
  ];

  useEffect(() => {
    const initAdmin = async () => {
      const userData = await getUser();
      
      if (!userData || userData.user_type !== 'admin') {
        router.push('/login');
        return;
      }
      
      setUser(userData);
      await fetchSettings();
      setLoading(false);
    };

    initAdmin();
  }, [router]);

  useEffect(() => {
    const bgTimer = setInterval(() => {
      setCurrentBg((prev) => (prev + 1) % backgrounds.length);
    }, 5000);
    
    return () => clearInterval(bgTimer);
  }, []);

  useEffect(() => {
    // Check for changes
    const hasChanged = JSON.stringify(settings) !== JSON.stringify(originalSettings);
    setHasChanges(hasChanged);
  }, [settings, originalSettings]);

  const fetchSettings = async () => {
    try {
      const response = await api.get('/admin/settings');
      if (response.data.success) {
        setSettings(response.data.settings);
        setOriginalSettings(response.data.settings);
      }
    } catch (error) {
      console.error('Error fetching settings:', error);
      toast.error('Failed to load settings');
    }
  };

  const saveSettings = async () => {
    setSaving(true);
    try {
      const response = await api.put('/admin/settings', { settings });
      if (response.data.success) {
        setOriginalSettings({ ...settings });
        toast.success('Settings saved successfully!');
      }
    } catch (error) {
      console.error('Error saving settings:', error);
      toast.error('Failed to save settings');
    } finally {
      setSaving(false);
    }
  };

  const resetToDefaults = async () => {
    if (!confirm('Are you sure you want to reset all settings to default values? This action cannot be undone.')) {
      return;
    }

    setSaving(true);
    try {
      const response = await api.post('/admin/settings/reset');
      if (response.data.success) {
        await fetchSettings();
        toast.success('Settings reset to defaults successfully!');
      }
    } catch (error) {
      console.error('Error resetting settings:', error);
      toast.error('Failed to reset settings');
    } finally {
      setSaving(false);
    }
  };

  const exportConfig = async () => {
    try {
      const response = await api.get('/admin/settings/export', {
        responseType: 'blob'
      });
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `solo-leveling-config-${Date.now()}.json`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      
      toast.success('Configuration exported successfully!');
    } catch (error) {
      console.error('Error exporting config:', error);
      toast.error('Failed to export configuration');
    }
  };

  const importConfig = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const config = JSON.parse(e.target?.result as string);
        
        const response = await api.post('/admin/settings/import', { config });
        if (response.data.success) {
          await fetchSettings();
          toast.success('Configuration imported successfully!');
        }
      } catch (error) {
        console.error('Error importing config:', error);
        toast.error('Failed to import configuration');
      }
    };
    reader.readAsText(file);
    
    // Reset the input
    event.target.value = '';
  };

  const updateSetting = (category: string, key: string, value: any) => {
    setSettings(prev => ({
      ...prev,
      [category]: {
        ...prev[category as keyof Settings],
        [key]: {
          ...prev[category as keyof Settings][key],
          value
        }
      }
    }));
  };

  const handleLogout = async () => {
    try {
      await logout();
      router.push('/login');
    } catch (error) {
      console.error('Logout error:', error);
      router.push('/login');
    }
  };

  // Enhanced tabs with more sections
  const tabs = [
    { id: 'quest_system', label: 'Quest System', icon: Gamepad2, color: 'from-purple-500 to-pink-500' },
    { id: 'level_progression', label: 'Level & Progression', icon: Trophy, color: 'from-yellow-500 to-orange-500' },
    { id: 'security', label: 'Security & Auth', icon: Shield, color: 'from-red-500 to-pink-500' },
    { id: 'platform', label: 'Platform', icon: Palette, color: 'from-blue-500 to-cyan-500' },
    { id: 'monitoring', label: 'System Monitoring', icon: BarChart3, color: 'from-green-500 to-teal-500' },
    { id: 'feature_flags', label: 'Feature Flags', icon: Flag, color: 'from-indigo-500 to-purple-500' },
    { id: 'coach_system', label: 'Coach System', icon: Database, color: 'from-cyan-500 to-blue-500' }
  ];

  if (loading) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-purple-500/20 border-t-purple-500 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-400 text-lg">Loading Admin Settings...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white relative overflow-hidden">
      {/* Animated Background */}
      <div className="fixed inset-0 z-0">
        {backgrounds.map((bg, index) => (
          <div
            key={index}
            className={`absolute inset-0 transition-opacity duration-2000 ${
              currentBg === index ? 'opacity-100' : 'opacity-0'
            }`}
            style={{
              backgroundImage: `url(${bg})`,
              backgroundSize: 'cover',
              backgroundPosition: 'center',
              filter: 'brightness(0.3) blur(2px)',
              transform: `scale(${currentBg === index ? 1.1 : 1.05})`
            }}
          />
        ))}
        
        {/* Gradient Overlay */}
        <div className="absolute inset-0 bg-gradient-to-br from-black/80 via-purple-900/50 to-blue-900/30" />
        
        {/* Floating Orbs */}
        <div className="absolute top-20 left-20 w-96 h-96 bg-purple-500/20 rounded-full filter blur-3xl animate-pulse" />
        <div className="absolute bottom-20 right-20 w-96 h-96 bg-blue-500/20 rounded-full filter blur-3xl animate-pulse" style={{ animationDelay: '2s' }} />
      </div>

      <div className="relative z-10">
        <Navbar user={user} onLogout={handleLogout} />

        {/* Header */}
        <div className="bg-black/80 backdrop-blur-lg border-b border-purple-500/20 p-6">
          <div className="max-w-7xl mx-auto flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-gradient-to-br from-purple-600 to-blue-600 rounded-xl">
                <Crown className="w-8 h-8 text-yellow-400" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
                  Advanced System Administration
                </h1>
                <p className="text-gray-400">Comprehensive system management and configuration</p>
              </div>
            </div>

            <div className="flex items-center gap-4">
              {hasChanges && (
                <div className="flex items-center gap-2 px-4 py-2 bg-yellow-500/20 border border-yellow-500/30 rounded-lg">
                  <AlertCircle className="w-4 h-4 text-yellow-400" />
                  <span className="text-yellow-400 text-sm">Unsaved changes</span>
                </div>
              )}
              <div className="flex items-center gap-2 px-4 py-2 bg-green-500/20 border border-green-500/30 rounded-lg">
                <CheckCircle className="w-4 h-4 text-green-400" />
                <span className="text-green-400 text-sm">System Online</span>
              </div>
            </div>
          </div>
        </div>

        <div className="max-w-7xl mx-auto p-6">
          <div className="grid grid-cols-12 gap-6">
            {/* Enhanced Sidebar */}
            <div className="col-span-12 lg:col-span-3">
              <div className="bg-black/60 backdrop-blur-lg border border-purple-500/20 rounded-xl p-4">
                <h3 className="text-purple-400 text-sm font-semibold uppercase tracking-wide mb-4">
                  Settings Categories
                </h3>
                <div className="space-y-2">
                  {tabs.map((tab) => {
                    const Icon = tab.icon;
                    return (
                      <button
                        key={tab.id}
                        onClick={() => setActiveTab(tab.id)}
                        className={`w-full flex items-center gap-3 p-3 rounded-lg transition-all ${
                          activeTab === tab.id
                            ? `bg-gradient-to-r ${tab.color} text-white shadow-lg`
                            : 'text-gray-400 hover:text-white hover:bg-white/10'
                        }`}
                      >
                        <Icon className="w-5 h-5" />
                        <span className="font-medium text-sm">{tab.label}</span>
                      </button>
                    );
                  })}
                </div>
              </div>

              {/* Quick Stats */}
              <div className="bg-black/60 backdrop-blur-lg border border-purple-500/20 rounded-xl p-4 mt-4">
                <h4 className="text-white font-medium mb-3">Quick Stats</h4>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-400 text-sm">Active Settings</span>
                    <span className="text-white font-semibold">
                      {Object.values(settings).reduce((count, section) => count + Object.keys(section).length, 0)}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-400 text-sm">Categories</span>
                    <span className="text-purple-400 font-semibold">{tabs.length}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-400 text-sm">Unsaved Changes</span>
                    <span className={`font-semibold ${hasChanges ? 'text-yellow-400' : 'text-green-400'}`}>
                      {hasChanges ? 'Yes' : 'None'}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Main Content */}
            <div className="col-span-12 lg:col-span-9">
              <div className="bg-black/60 backdrop-blur-lg border border-purple-500/20 rounded-xl overflow-hidden">
                {/* Content Header */}
                <div className="p-6 border-b border-purple-500/20">
                  <div className="flex items-center justify-between">
                    <div>
                      <h2 className="text-xl font-bold text-white">
                        {tabs.find(t => t.id === activeTab)?.label}
                      </h2>
                      <p className="text-gray-400 text-sm mt-1">
                        {getTabDescription(activeTab)}
                      </p>
                    </div>
                  </div>
                </div>

                {/* Settings Content */}
                <div className="p-6">
                  {renderSettingsSection(activeTab)}
                </div>

                {/* Action Buttons - Only show for regular settings tabs */}
                {!['monitoring', 'feature_flags'].includes(activeTab) && (
                  <div className="p-6 border-t border-purple-500/20 bg-black/40">
                    <div className="flex flex-wrap items-center justify-between gap-4">
                      <div className="flex items-center gap-3">
                        <button
                          onClick={saveSettings}
                          disabled={!hasChanges || saving}
                          className={`flex items-center gap-2 px-6 py-3 rounded-lg font-medium transition-all ${
                            hasChanges && !saving
                              ? 'bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white shadow-lg'
                              : 'bg-gray-600 text-gray-400 cursor-not-allowed'
                          }`}
                        >
                          {saving ? (
                            <>
                              <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                              Saving...
                            </>
                          ) : (
                            <>
                              <Save className="w-4 h-4" />
                              Save Changes
                            </>
                          )}
                        </button>

                        <button
                          onClick={resetToDefaults}
                          disabled={saving}
                          className="flex items-center gap-2 px-4 py-3 border border-gray-600 hover:border-gray-500 text-gray-300 hover:text-white rounded-lg transition-all"
                        >
                          <RotateCcw className="w-4 h-4" />
                          Reset to Defaults
                        </button>
                      </div>

                      <div className="flex items-center gap-3">
                        <button
                          onClick={exportConfig}
                          className="flex items-center gap-2 px-4 py-3 border border-purple-500/30 hover:border-purple-500/50 text-purple-300 hover:text-purple-200 rounded-lg transition-all"
                        >
                          <Download className="w-4 h-4" />
                          Export Config
                        </button>

                        <label className="flex items-center gap-2 px-4 py-3 border border-blue-500/30 hover:border-blue-500/50 text-blue-300 hover:text-blue-200 rounded-lg transition-all cursor-pointer">
                          <Upload className="w-4 h-4" />
                          Import Config
                          <input
                            type="file"
                            accept=".json"
                            onChange={importConfig}
                            className="hidden"
                          />
                        </label>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  function getTabDescription(tabId: string): string {
    const descriptions = {
      quest_system: 'Configure quest generation, XP rewards, and game mechanics',
      level_progression: 'Manage level requirements, titles, and progression systems',
      security: 'Security settings, authentication, and access controls',
      platform: 'UI customization, themes, and user experience settings',
      monitoring: 'Real-time system monitoring, analytics, and performance metrics',
      feature_flags: 'A/B testing, feature rollouts, and experimental features',
      coach_system: 'Coach-related settings and relationship management'
    };
    return descriptions[tabId as keyof typeof descriptions] || '';
  }

  function renderSettingsSection(section: string) {
    // Handle special sections with their own components
    if (section === 'monitoring') {
      return <SystemMonitoring />;
    }
    
    if (section === 'feature_flags') {
      return <FeatureFlags />;
    }

    // Regular settings sections
    const sectionSettings = settings[section as keyof Settings] || {};
    
    if (Object.keys(sectionSettings).length === 0) {
      return (
        <div className="text-center py-12">
          <Settings className="w-12 h-12 text-gray-500 mx-auto mb-4" />
          <p className="text-gray-400 mb-2">No settings available for this section</p>
          <p className="text-gray-500 text-sm">Settings will appear here once loaded from the server</p>
        </div>
      );
    }

    return (
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {Object.entries(sectionSettings).map(([key, setting]) => 
          renderSettingItem(section, key, setting)
        )}
      </div>
    );
  }

  function renderSettingItem(category: string, key: string, setting: SettingValue) {
    const displayName = formatSettingName(key);
    
    return (
      <div key={key} className="bg-white/5 border border-white/10 rounded-lg p-4 hover:border-purple-500/30 transition-all">
        <div className="flex items-start justify-between mb-2">
          <div>
            <h4 className="text-white font-medium">{displayName}</h4>
            <p className="text-gray-400 text-sm mt-1">{setting.description}</p>
          </div>
          {renderSettingStatus(setting.value, setting.type)}
        </div>
        
        <div className="mt-4">
          {renderSettingControl(category, key, setting)}
        </div>
      </div>
    );
  }

  function renderSettingStatus(value: any, type: string) {
    if (type === 'boolean') {
      return value ? (
        <CheckCircle className="w-5 h-5 text-green-400" />
      ) : (
        <Clock className="w-5 h-5 text-gray-500" />
      );
    }
    return null;
  }

  function renderSettingControl(category: string, key: string, setting: SettingValue) {
    const { value, type } = setting;

    switch (type) {
      case 'boolean':
        return (
          <div className="flex items-center gap-3">
            <button
              onClick={() => updateSetting(category, key, !value)}
              className={`relative w-12 h-6 rounded-full transition-all ${
                value ? 'bg-gradient-to-r from-purple-600 to-blue-600' : 'bg-gray-600'
              }`}
            >
              <div
                className={`absolute top-0.5 w-5 h-5 bg-white rounded-full transition-all ${
                  value ? 'left-6' : 'left-0.5'
                }`}
              />
            </button>
            <span className="text-sm text-gray-300">
              {value ? 'Enabled' : 'Disabled'}
            </span>
          </div>
        );

      case 'number':
        if (key.includes('count') || key.includes('multiplier') || key.includes('attempts') || key.includes('days')) {
          return (
            <div className="space-y-3">
              <input
                type="range"
                min={getSliderMin(key)}
                max={getSliderMax(key)}
                step={getSliderStep(key)}
                value={value || getSliderMin(key)}
                onChange={(e) => updateSetting(category, key, parseFloat(e.target.value))}
                className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
              />
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-400">{getSliderMin(key)}</span>
                <div className="px-3 py-1 bg-purple-500/20 text-purple-300 rounded-md font-medium">
                  {value || 0}{getValueUnit(key)}
                </div>
                <span className="text-gray-400">{getSliderMax(key)}</span>
              </div>
            </div>
          );
        }
        return (
          <input
            type="number"
            value={value || ''}
            onChange={(e) => updateSetting(category, key, parseFloat(e.target.value) || 0)}
            className="w-full px-3 py-2 bg-black/50 border border-gray-600 rounded-lg text-white focus:border-purple-500 focus:outline-none"
          />
        );

      case 'string':
        if (key.includes('theme') || key.includes('method') || key.includes('level') || key.includes('model')) {
          return (
            <select
              value={value || ''}
              onChange={(e) => updateSetting(category, key, e.target.value)}
              className="w-full px-3 py-2 bg-black/50 border border-gray-600 rounded-lg text-white focus:border-purple-500 focus:outline-none"
            >
              {getSelectOptions(key).map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          );
        }
        if (key.includes('message') || key.includes('welcome')) {
          return (
            <textarea
              value={value || ''}
              onChange={(e) => updateSetting(category, key, e.target.value)}
              rows={3}
              className="w-full px-3 py-2 bg-black/50 border border-gray-600 rounded-lg text-white focus:border-purple-500 focus:outline-none resize-none"
            />
          );
        }
        return (
          <input
            type="text"
            value={value || ''}
            onChange={(e) => updateSetting(category, key, e.target.value)}
            className="w-full px-3 py-2 bg-black/50 border border-gray-600 rounded-lg text-white focus:border-purple-500 focus:outline-none"
          />
        );

      default:
        return (
          <input
            type="text"
            value={typeof value === 'object' ? JSON.stringify(value) : (value || '')}
            onChange={(e) => updateSetting(category, key, e.target.value)}
            className="w-full px-3 py-2 bg-black/50 border border-gray-600 rounded-lg text-white focus:border-purple-500 focus:outline-none"
          />
        );
    }
  }

  // All your existing helper functions remain the same
  function formatSettingName(key: string): string {
    return key
      .replace(/_/g, ' ')
      .replace(/\b\w/g, l => l.toUpperCase())
      .replace(/Xp/g, 'XP')
      .replace(/Ai/g, 'AI')
      .replace(/Ip/g, 'IP')
      .replace(/2fa/g, '2FA');
  }

  function getSliderMin(key: string): number {
    const mins: Record<string, number> = {
      daily_quest_count: 1,
      weekly_quest_count: 1,
      level_multiplier: 1.0,
      streak_bonus_xp: 0,
      base_xp_per_level: 50,
      max_level_cap: 0,
      max_login_attempts: 3,
      session_lifetime_days: 1,
      password_min_length: 4,
      background_animation_speed: 1,
      performance_alert_threshold: 100,
      data_retention_days: 7
    };
    return mins[key] || 0;
  }

  function getSliderMax(key: string): number {
    const maxs: Record<string, number> = {
      daily_quest_count: 20,
      weekly_quest_count: 10,
      level_multiplier: 5.0,
      streak_bonus_xp: 500,
      base_xp_per_level: 500,
      max_level_cap: 1000,
      max_login_attempts: 20,
      session_lifetime_days: 90,
      password_min_length: 32,
      background_animation_speed: 10,
      performance_alert_threshold: 5000,
      data_retention_days: 365
    };
    return maxs[key] || 100;
  }

  function getSliderStep(key: string): number {
    if (key.includes('multiplier')) return 0.1;
    return 1;
  }

  function getValueUnit(key: string): string {
    if (key.includes('xp')) return ' XP';
    if (key.includes('days')) return ' days';
    if (key.includes('attempts')) return ' attempts';
    if (key.includes('threshold')) return 'ms';
    if (key.includes('hour')) return ':00';
    if (key.includes('multiplier')) return 'x';
    return '';
  }

  function getSelectOptions(key: string): Array<{value: string, label: string}> {
    const options: Record<string, Array<{value: string, label: string}>> = {
      default_theme: [
        { value: 'dark', label: 'Dark Mode' },
        { value: 'light', label: 'Light Mode' },
        { value: 'auto', label: 'Auto (System)' },
        { value: 'purple', label: 'Purple Theme' },
        { value: 'blue', label: 'Blue Theme' }
      ],
      two_factor_method: [
        { value: 'google_auth', label: 'Google Authenticator' },
        { value: 'sms', label: 'SMS' },
        { value: 'email', label: 'Email' }
      ],
      ai_quest_model: [
        { value: 'gpt-4-turbo', label: 'GPT-4 Turbo' },
        { value: 'claude-3-sonnet', label: 'Claude-3 Sonnet' },
        { value: 'custom', label: 'Custom Model' }
      ],
      error_reporting_level: [
        { value: 'all', label: 'All Errors' },
        { value: 'critical', label: 'Critical Only' },
        { value: 'custom', label: 'Custom Filter' }
      ]
    };
    return options[key] || [];
  }
}





app/admin/page.tsx
'use client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import toast from 'react-hot-toast';
import api from '@/lib/api';
import { getUser, logout } from '@/lib/auth';
import Navbar from '@/components/layout/Navbar';
import QuestManagementModal from '@/components/admin/QuestManagementModal';
import AdminStats from '@/components/admin/AdminStats';
import UserManagement from '@/components/admin/UserManagement';
import AdminLogs from '@/components/admin/AdminLogs';
// Import settings components
import FeatureFlags from '@/components/admin/FeatureFlags';
import SystemMonitoring from '@/components/admin/SystemMonitoring';
import { 
  Shield, Users, Activity, Settings, LogOut, Save, RotateCcw, Download, Upload,
  BarChart3, Clock, AlertCircle, Database, Crown, Gamepad2, Trophy, 
  Palette, Flag, CheckCircle, Sliders
} from 'lucide-react';

// Define interfaces for better type safety
interface SettingValue {
  value: any;
  type: 'boolean' | 'string' | 'number' | 'integer' | 'json';
  description: string;
}

interface SettingsCategory {
  [key: string]: SettingValue;
}

interface SystemSettings {
  quest_system: SettingsCategory;
  level_progression: SettingsCategory;
  security: SettingsCategory;
  platform: SettingsCategory;
  monitoring: SettingsCategory;
  coach_system: SettingsCategory;
}

interface Tab {
  id: string;
  label: string;
  icon: any;
  color?: string;
}

export default function AdminDashboard() {
  const router = useRouter();
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [stats, setStats] = useState<any>(null);
  const [currentBg, setCurrentBg] = useState(0);
  const [showQuestModal, setShowQuestModal] = useState(false);
  const [userFilter, setUserFilter] = useState<string>('all');

  // Settings-related state with proper typing
  const [activeSettingsTab, setActiveSettingsTab] = useState<string>('quest_system');
  const [settings, setSettings] = useState<SystemSettings>({
    quest_system: {},
    level_progression: {},
    security: {},
    platform: {},
    monitoring: {},
    coach_system: {}
  });
  const [originalSettings, setOriginalSettings] = useState<SystemSettings>({
    quest_system: {},
    level_progression: {},
    security: {},
    platform: {},
    monitoring: {},
    coach_system: {}
  });
  const [saving, setSaving] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);

  // Solo Leveling themed backgrounds
  const backgrounds = [
    '/images/backgrounds/solo-leveling-1.jpg',
    '/images/backgrounds/solo-leveling-2.jpg',
    '/images/backgrounds/solo-leveling-3.jpg',
    '/images/backgrounds/solo-leveling-4.jpg',
  ];

  useEffect(() => {
    const initAdmin = async () => {
      const userData = await getUser();
      
      if (!userData || userData.user_type !== 'admin') {
        router.push('/login');
        return;
      }
      
      setUser(userData);
      await fetchDashboardStats();
      await fetchSettings();
      setLoading(false);
    };

    initAdmin();
  }, [router]);

  // Background rotation
  useEffect(() => {
    const bgTimer = setInterval(() => {
      setCurrentBg((prev) => (prev + 1) % backgrounds.length);
    }, 5000);
    
    return () => clearInterval(bgTimer);
  }, []);

  // Check for settings changes
  useEffect(() => {
    const hasChanged = JSON.stringify(settings) !== JSON.stringify(originalSettings);
    setHasChanges(hasChanged);
  }, [settings, originalSettings]);

  const fetchDashboardStats = async () => {
    try {
      const response = await api.get('/admin/dashboard/stats');
      setStats(response.data.stats);
    } catch (error) {
      console.error('Failed to fetch stats:', error);
      toast.error('Failed to load dashboard statistics');
    }
  };

  // Settings functions with proper error handling
  const fetchSettings = async () => {
    try {
      const response = await api.get('/admin/settings');
      if (response.data.success) {
        setSettings(response.data.settings);
        setOriginalSettings(response.data.settings);
      }
    } catch (error) {
      console.error('Error fetching settings:', error);
      toast.error('Failed to load settings');
    }
  };

  const saveSettings = async () => {
    setSaving(true);
    try {
      const response = await api.put('/admin/settings', { settings });
      if (response.data.success) {
        setOriginalSettings({ ...settings });
        toast.success('Settings saved successfully!');
      }
    } catch (error) {
      console.error('Error saving settings:', error);
      toast.error('Failed to save settings');
    } finally {
      setSaving(false);
    }
  };

  const resetToDefaults = async () => {
    if (!confirm('Are you sure you want to reset all settings to default values? This action cannot be undone.')) {
      return;
    }

    setSaving(true);
    try {
      const response = await api.post('/admin/settings/reset');
      if (response.data.success) {
        await fetchSettings();
        toast.success('Settings reset to defaults successfully!');
      }
    } catch (error) {
      console.error('Error resetting settings:', error);
      toast.error('Failed to reset settings');
    } finally {
      setSaving(false);
    }
  };

  const updateSetting = (category: string, key: string, value: any) => {
    setSettings((prev: SystemSettings) => ({
      ...prev,
      [category]: {
        ...prev[category as keyof SystemSettings],
        [key]: {
          ...prev[category as keyof SystemSettings][key],
          value
        }
      }
    }));
  };

  const handleUsersClick = () => {
    setUserFilter('all');
    setActiveTab('users');
  };

  const handleAdventurersClick = () => {
    setUserFilter('adventurer');
    setActiveTab('users');
  };

  const handleCoachesClick = () => {
    setUserFilter('coach');
    setActiveTab('users');
  };

  const handleLogout = async () => {
    await logout();
    router.push('/login');
  };

  // Settings helper functions with proper typing
  const formatSettingName = (key: string): string => {
    return key
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  };

  const renderSettingControl = (category: string, key: string, setting: SettingValue) => {
  const { value, type } = setting;

  switch (type) {
    case 'boolean':
      return (
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
          <button
            onClick={() => updateSetting(category, key, !value)}
            style={{
              position: 'relative',
              width: '52px',
              height: '28px',
              borderRadius: '14px',
              border: 'none',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              background: value 
                ? 'linear-gradient(135deg, #9333ea, #ec4899)' 
                : 'rgba(107, 114, 128, 0.4)',
              boxShadow: value ? '0 4px 12px rgba(147, 51, 234, 0.4)' : 'none'
            }}
          >
            <div
              style={{
                position: 'absolute',
                top: '3px',
                left: value ? '27px' : '3px',
                width: '22px',
                height: '22px',
                background: '#fff',
                borderRadius: '50%',
                transition: 'all 0.3s ease',
                boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)'
              }}
            />
          </button>
          <span style={{ 
            fontSize: '14px',
            fontWeight: '600',
            color: value ? '#10b981' : '#9ca3af'
          }}>
            {value ? 'Enabled' : 'Disabled'}
          </span>
        </div>
      );

    case 'number':
    case 'integer':
      return (
        <input
          type="number"
          value={value || 0}
          onChange={(e) => {
            const newValue = type === 'integer' ? parseInt(e.target.value) || 0 : parseFloat(e.target.value) || 0;
            updateSetting(category, key, newValue);
          }}
          style={{
            width: '100%',
            padding: '12px 16px',
            borderRadius: '10px',
            border: '1px solid rgba(147, 51, 234, 0.2)',
            background: 'rgba(0, 0, 0, 0.5)',
            color: '#fff',
            fontSize: '14px',
            transition: 'all 0.3s ease',
            outline: 'none'
          }}
          onFocus={(e) => {
            e.target.style.borderColor = '#a855f7';
            e.target.style.boxShadow = '0 0 0 3px rgba(168, 85, 247, 0.1)';
            e.target.style.background = 'rgba(0, 0, 0, 0.7)';
          }}
          onBlur={(e) => {
            e.target.style.borderColor = 'rgba(147, 51, 234, 0.2)';
            e.target.style.boxShadow = 'none';
            e.target.style.background = 'rgba(0, 0, 0, 0.5)';
          }}
        />
      );

    case 'string':
      return (
        <input
          type="text"
          value={value || ''}
          onChange={(e) => updateSetting(category, key, e.target.value)}
          style={{
            width: '100%',
            padding: '12px 16px',
            borderRadius: '10px',
            border: '1px solid rgba(147, 51, 234, 0.2)',
            background: 'rgba(0, 0, 0, 0.5)',
            color: '#fff',
            fontSize: '14px',
            transition: 'all 0.3s ease',
            outline: 'none'
          }}
          onFocus={(e) => {
            e.target.style.borderColor = '#a855f7';
            e.target.style.boxShadow = '0 0 0 3px rgba(168, 85, 247, 0.1)';
            e.target.style.background = 'rgba(0, 0, 0, 0.7)';
          }}
          onBlur={(e) => {
            e.target.style.borderColor = 'rgba(147, 51, 234, 0.2)';
            e.target.style.boxShadow = 'none';
            e.target.style.background = 'rgba(0, 0, 0, 0.5)';
          }}
        />
      );

    case 'json':
      return (
        <textarea
          value={typeof value === 'string' ? value : JSON.stringify(value || {}, null, 2)}
          onChange={(e) => {
            try {
              const jsonValue = JSON.parse(e.target.value);
              updateSetting(category, key, jsonValue);
            } catch (error) {
              updateSetting(category, key, e.target.value);
            }
          }}
          rows={4}
          style={{
            width: '100%',
            padding: '12px 16px',
            borderRadius: '10px',
            border: '1px solid rgba(147, 51, 234, 0.2)',
            background: 'rgba(0, 0, 0, 0.5)',
            color: '#fff',
            fontSize: '13px',
            fontFamily: 'monospace',
            transition: 'all 0.3s ease',
            outline: 'none',
            resize: 'vertical'
          }}
          onFocus={(e) => {
            e.target.style.borderColor = '#a855f7';
            e.target.style.boxShadow = '0 0 0 3px rgba(168, 85, 247, 0.1)';
            e.target.style.background = 'rgba(0, 0, 0, 0.7)';
          }}
          onBlur={(e) => {
            e.target.style.borderColor = 'rgba(147, 51, 234, 0.2)';
            e.target.style.boxShadow = 'none';
            e.target.style.background = 'rgba(0, 0, 0, 0.5)';
          }}
        />
      );

    default:
      return (
        <div style={{ color: '#9ca3af', fontSize: '14px' }}>
          Unknown setting type: {type}
        </div>
      );
  }
};

 const renderSettingsSection = (section: string) => {
  // Special sections
  if (section === 'monitoring') {
    return <SystemMonitoring />;
  }
  
  if (section === 'feature_flags') {
    return <FeatureFlags />;
  }

  // Regular settings sections
  const sectionSettings = settings[section as keyof SystemSettings] || {};
  
  if (Object.keys(sectionSettings).length === 0) {
    return (
      <div style={{ textAlign: 'center', padding: '48px 0' }}>
        <Settings style={{ width: '48px', height: '48px', color: '#6b7280', margin: '0 auto 16px' }} />
        <p style={{ color: '#9ca3af', marginBottom: '8px', fontSize: '16px' }}>No settings available for this section</p>
        <p style={{ color: '#6b7280', fontSize: '14px' }}>Settings will appear here once they are loaded from the database</p>
      </div>
    );
  }

  return (
    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', gap: '20px' }}>
      {Object.entries(sectionSettings).map(([key, setting], index) => (
        <div
          key={key}
          style={{
            background: 'rgba(0, 0, 0, 0.3)',
            border: '1px solid rgba(147, 51, 234, 0.15)',
            borderRadius: '12px',
            padding: '20px',
            transition: 'all 0.3s ease',
            position: 'relative',
            overflow: 'hidden',
            animation: `fadeInUp 0.4s ease-out ${index * 0.05}s both`
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.4)';
            e.currentTarget.style.background = 'rgba(147, 51, 234, 0.05)';
            e.currentTarget.style.transform = 'translateY(-2px)';
            e.currentTarget.style.boxShadow = '0 8px 20px rgba(147, 51, 234, 0.2)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.15)';
            e.currentTarget.style.background = 'rgba(0, 0, 0, 0.3)';
            e.currentTarget.style.transform = 'translateY(0)';
            e.currentTarget.style.boxShadow = 'none';
          }}
        >
          {/* Glow effect on hover */}
          <div style={{
            position: 'absolute',
            top: '-2px',
            left: '-2px',
            right: '-2px',
            height: '2px',
            background: 'linear-gradient(90deg, transparent, #a855f7, transparent)',
            opacity: 0,
            transition: 'opacity 0.3s ease'
          }} className="card-glow-top" />
          
          <div style={{ display: 'flex', alignItems: 'start', justifyContent: 'space-between', gap: '16px', marginBottom: '16px' }}>
            <div style={{ flex: 1 }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '6px' }}>
                <h4 style={{ 
                  color: '#fff', 
                  fontWeight: '600',
                  fontSize: '15px',
                  margin: 0
                }}>
                  {formatSettingName(key)}
                </h4>
                {setting.type === 'boolean' && (
                  setting.value ? (
                    <CheckCircle style={{ width: '16px', height: '16px', color: '#10b981' }} />
                  ) : (
                    <Clock style={{ width: '16px', height: '16px', color: '#6b7280' }} />
                  )
                )}
              </div>
              <p style={{ 
                color: '#9ca3af', 
                fontSize: '13px',
                margin: 0,
                lineHeight: '1.5'
              }}>
                {setting.description}
              </p>
            </div>
            
            {/* Type Badge */}
            <div style={{
              background: setting.type === 'boolean' 
                ? 'rgba(16, 185, 129, 0.1)' 
                : setting.type === 'number' || setting.type === 'integer'
                ? 'rgba(59, 130, 246, 0.1)'
                : 'rgba(168, 85, 247, 0.1)',
              color: setting.type === 'boolean' 
                ? '#10b981' 
                : setting.type === 'number' || setting.type === 'integer'
                ? '#3b82f6'
                : '#a855f7',
              border: `1px solid ${
                setting.type === 'boolean' 
                  ? 'rgba(16, 185, 129, 0.3)' 
                  : setting.type === 'number' || setting.type === 'integer'
                  ? 'rgba(59, 130, 246, 0.3)'
                  : 'rgba(168, 85, 247, 0.3)'
              }`,
              padding: '4px 10px',
              borderRadius: '6px',
              fontSize: '11px',
              fontWeight: '700',
              textTransform: 'uppercase',
              letterSpacing: '0.5px',
              whiteSpace: 'nowrap'
            }}>
              {setting.type}
            </div>
          </div>
          
          <div style={{ marginTop: '16px' }}>
            {renderSettingControl(section, key, setting)}
          </div>
        </div>
      ))}
    </div>
  );
};

  if (loading) {
    return (
      <div style={{ 
        position: 'relative',
        minHeight: '100vh',
        overflow: 'hidden',
        backgroundColor: '#000',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        {/* Loading screen with background animation */}
        <div style={{ position: 'fixed', inset: 0, zIndex: 0 }}>
          {backgrounds.map((bg, index) => (
            <div
              key={index}
              style={{
                position: 'absolute',
                inset: 0,
                opacity: currentBg === index ? 1 : 0,
                transition: 'opacity 2s ease-in-out',
                transform: `scale(${currentBg === index ? 1 : 1.1})`,
              }}
            >
              <div
                style={{
                  position: 'absolute',
                  inset: 0,
                  backgroundImage: `url(${bg})`,
                  backgroundSize: 'cover',
                  backgroundPosition: 'center',
                  backgroundRepeat: 'no-repeat',
                  filter: 'brightness(0.5) contrast(1.2) saturate(1.2)',
                  transform: 'scale(1.1)',
                }}
              />
            </div>
          ))}
          
          <div style={{
            position: 'absolute',
            inset: 0,
            background: 'linear-gradient(to bottom, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0.5) 50%, rgba(0,0,0,0.8) 100%)',
          }} />
          
          <div style={{
            position: 'absolute',
            top: '20%',
            left: '20%',
            width: '400px',
            height: '400px',
            background: 'radial-gradient(circle, rgba(147, 51, 234, 0.3) 0%, transparent 70%)',
            filter: 'blur(100px)',
            animation: 'pulse 4s ease-in-out infinite',
          }} />
          <div style={{
            position: 'absolute',
            bottom: '20%',
            right: '20%',
            width: '400px',
            height: '400px',
            background: 'radial-gradient(circle, rgba(59, 130, 246, 0.3) 0%, transparent 70%)',
            filter: 'blur(100px)',
            animation: 'pulse 4s ease-in-out infinite 2s',
          }} />
        </div>

        <div style={{ position: 'relative', zIndex: 10, textAlign: 'center' }}>
          <div style={{
            width: '64px',
            height: '64px',
            border: '4px solid rgba(147, 51, 234, 0.3)',
            borderTopColor: '#9333ea',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 16px'
          }} />
          <p style={{ color: '#9ca3af', fontSize: '18px' }}>Initializing Admin Portal...</p>
        </div>
      </div>
    );
  }

  const tabs: Tab[] = [
    { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },
    { id: 'users', label: 'User Management', icon: Users },
    { id: 'logs', label: 'Activity Logs', icon: Activity },
    { id: 'settings', label: 'Settings', icon: Settings }
  ];

  const settingsTabs: Tab[] = [
    { id: 'quest_system', label: 'Quest System', icon: Gamepad2, color: 'from-purple-500 to-pink-500' },
    { id: 'level_progression', label: 'Level & Progression', icon: Trophy, color: 'from-yellow-500 to-orange-500' },
    { id: 'security', label: 'Security & Auth', icon: Shield, color: 'from-red-500 to-pink-500' },
    { id: 'platform', label: 'Platform', icon: Palette, color: 'from-blue-500 to-cyan-500' },
    { id: 'monitoring', label: 'System Monitoring', icon: BarChart3, color: 'from-green-500 to-teal-500' },
    { id: 'feature_flags', label: 'Feature Flags', icon: Flag, color: 'from-indigo-500 to-purple-500' },
    { id: 'coach_system', label: 'Coach System', icon: Database, color: 'from-cyan-500 to-blue-500' }
  ];

  return (
    <div style={{ 
      position: 'relative',
      minHeight: '100vh',
      overflow: 'hidden',
      backgroundColor: '#000',
      color: '#fff',
      fontFamily: 'Inter, -apple-system, sans-serif'
    }}>
      {/* Animated Background System */}
      <div style={{ position: 'fixed', inset: 0, zIndex: 0 }}>
        {backgrounds.map((bg, index) => (
          <div
            key={index}
            style={{
              position: 'absolute',
              inset: 0,
              opacity: currentBg === index ? 1 : 0,
              transition: 'opacity 2s ease-in-out',
              transform: `scale(${currentBg === index ? 1 : 1.1})`,
            }}
          >
            <div
              style={{
                position: 'absolute',
                inset: 0,
                backgroundImage: `url(${bg})`,
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundRepeat: 'no-repeat',
                filter: 'brightness(0.5) contrast(1.2) saturate(1.2)',
                transform: 'scale(1.1)',
              }}
            />
          </div>
        ))}
        
        <div style={{
          position: 'absolute',
          inset: 0,
          background: 'linear-gradient(to bottom, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0.5) 50%, rgba(0,0,0,0.8) 100%)',
        }} />
        
        <div style={{
          position: 'absolute',
          top: '20%',
          left: '20%',
          width: '400px',
          height: '400px',
          background: 'radial-gradient(circle, rgba(147, 51, 234, 0.3) 0%, transparent 70%)',
          filter: 'blur(100px)',
          animation: 'pulse 4s ease-in-out infinite',
        }} />
        <div style={{
          position: 'absolute',
          bottom: '20%',
          right: '20%',
          width: '400px',
          height: '400px',
          background: 'radial-gradient(circle, rgba(59, 130, 246, 0.3) 0%, transparent 70%)',
          filter: 'blur(100px)',
          animation: 'pulse 4s ease-in-out infinite 2s',
        }} />
      </div>

      {/* Admin Header */}
      <div style={{
        position: 'relative',
        zIndex: 10,
        background: 'rgba(0, 0, 0, 0.3)',
        backdropFilter: 'blur(10px)',
        borderBottom: '1px solid rgba(147, 51, 234, 0.2)'
      }}>
        <div className="container mx-auto px-6 py-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-3">
              <div style={{
                background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                padding: '10px',
                borderRadius: '12px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 0 20px rgba(147, 51, 234, 0.5)'
              }}>
                <Crown className="w-6 h-6" style={{ color: '#fff' }} />
              </div>
              <div>
                <h1 style={{
                  fontSize: '24px',
                  fontWeight: '900',
                  fontFamily: 'Orbitron, monospace',
                  background: 'linear-gradient(to right, #a855f7, #ec4899)',
                  WebkitBackgroundClip: 'text',
                  WebkitTextFillColor: 'transparent',
                  textShadow: '0 0 40px rgba(168, 85, 247, 0.5)',
                }}>
                  SYSTEM ADMIN
                </h1>
                <p className="text-gray-400 text-sm">Solo Leveling System Control Center</p>
              </div>
            </div>
            
            <div className="flex items-center gap-4">
              <div style={{
                background: 'rgba(147, 51, 234, 0.1)',
                padding: '8px 16px',
                borderRadius: '10px',
                border: '1px solid rgba(147, 51, 234, 0.3)'
              }}>
                <p style={{ fontSize: '14px', color: '#a855f7', fontWeight: '700' }}>
                  WELCOME {user?.name?.toUpperCase() || user?.username?.toUpperCase() || 'ADMIN'}
                </p>
                <p style={{ fontSize: '11px', color: '#a855f7', fontWeight: '700' }}>
                  {user?.profile?.access_level || 'SUPER ADMIN'}
                </p>
              </div>
              <button
                onClick={handleLogout}
                style={{
                  padding: '10px 20px',
                  background: 'rgba(239, 68, 68, 0.1)',
                  border: '1px solid rgba(239, 68, 68, 0.3)',
                  borderRadius: '10px',
                  color: '#ef4444',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px',
                  fontSize: '14px',
                  fontWeight: '600',
                }}
              >
                <LogOut className="w-5 h-5" />
                Logout
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-6 py-8" style={{ position: 'relative', zIndex: 10 }}>
        {/* Main Tab Navigation */}
        <div style={{
          display: 'flex',
          gap: '12px',
          marginBottom: '32px',
          background: 'rgba(0, 0, 0, 0.3)',
          backdropFilter: 'blur(20px)',
          borderRadius: '16px',
          padding: '8px',
          border: '1px solid rgba(147, 51, 234, 0.2)'
        }}>
          {tabs.map(tab => {
            const Icon = tab.icon;
            const isActive = activeTab === tab.id;
            
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                style={{
                  flex: 1,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '8px',
                  padding: '12px 20px',
                  background: isActive ? 'linear-gradient(135deg, #9333ea, #ec4899)' : 'transparent',
                  border: isActive ? '1px solid rgba(147, 51, 234, 0.5)' : '1px solid transparent',
                  borderRadius: '12px',
                  color: isActive ? '#fff' : '#9ca3af',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  fontSize: '14px',
                  fontWeight: '600',
                  position: 'relative',
                  overflow: 'hidden',
                  boxShadow: isActive ? '0 4px 20px rgba(147, 51, 234, 0.4)' : 'none'
                }}
              >
                {isActive && (
                  <div style={{
                    position: 'absolute',
                    top: '-50%',
                    left: '-50%',
                    width: '200%',
                    height: '200%',
                    background: 'linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent)',
                    transform: 'rotate(45deg)',
                    animation: 'shimmer 3s infinite'
                  }} />
                )}
                <Icon style={{ width: '18px', height: '18px', position: 'relative', zIndex: 1 }} />
                <span style={{ position: 'relative', zIndex: 1 }}>{tab.label}</span>
              </button>
            );
          })}
        </div>

        {/* Content Area */}
        <div className="min-h-[600px]">
          {activeTab === 'dashboard' && (
            <div className="animate-fadeIn">
              <AdminStats 
                stats={stats} 
                onRefresh={fetchDashboardStats}
                onQuestsClick={() => setShowQuestModal(true)}
                onUsersClick={handleUsersClick}
                onAdventurersClick={handleAdventurersClick} 
                onCoachesClick={handleCoachesClick}
              />
            </div>
          )}
          {activeTab === 'users' && <UserManagement initialFilter={userFilter} />}
          {activeTab === 'logs' && <AdminLogs />}
          
          {/* Settings Tab Content */}
          // Find this section in your app/admin/page.tsx (around line 680+)

{activeTab === 'settings' && (
  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(12, 1fr)', gap: '24px' }}>
    {/* Enhanced Settings Sidebar */}
    <div style={{ gridColumn: 'span 12 / span 12' }} className="lg:col-span-3">
      <div style={{
        background: 'rgba(0, 0, 0, 0.6)',
        backdropFilter: 'blur(20px)',
        border: '1px solid rgba(147, 51, 234, 0.2)',
        borderRadius: '16px',
        padding: '20px',
        marginBottom: '24px'
      }}>
        <h3 style={{
          color: '#a855f7',
          fontSize: '12px',
          fontWeight: '600',
          textTransform: 'uppercase',
          letterSpacing: '0.05em',
          marginBottom: '16px',
          display: 'flex',
          alignItems: 'center',
          gap: '8px'
        }}>
          <Settings size={16} />
          Settings Categories
        </h3>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
          {settingsTabs.map((tab) => {
            const Icon = tab.icon;
            const isActive = activeSettingsTab === tab.id;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveSettingsTab(tab.id)}
                style={{
                  width: '100%',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '12px',
                  padding: '14px 16px',
                  borderRadius: '12px',
                  border: 'none',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  position: 'relative',
                  overflow: 'hidden',
                  background: isActive 
                    ? 'linear-gradient(135deg, rgba(147, 51, 234, 0.3), rgba(236, 72, 153, 0.3))'
                    : 'transparent',
                  color: isActive ? '#fff' : '#9ca3af',
                  fontWeight: isActive ? '600' : '500',
                  fontSize: '14px',
                  boxShadow: isActive ? '0 4px 15px rgba(147, 51, 234, 0.3)' : 'none',
                  transform: isActive ? 'translateX(4px)' : 'translateX(0)'
                }}
                onMouseEnter={(e) => {
                  if (!isActive) {
                    e.currentTarget.style.background = 'rgba(255, 255, 255, 0.05)';
                    e.currentTarget.style.color = '#fff';
                  }
                }}
                onMouseLeave={(e) => {
                  if (!isActive) {
                    e.currentTarget.style.background = 'transparent';
                    e.currentTarget.style.color = '#9ca3af';
                  }
                }}
              >
                <Icon style={{ width: '20px', height: '20px', position: 'relative', zIndex: 1 }} />
                <span style={{ position: 'relative', zIndex: 1 }}>{tab.label}</span>
                {isActive && (
                  <>
                    <div style={{
                      position: 'absolute',
                      left: 0,
                      top: '50%',
                      transform: 'translateY(-50%)',
                      width: '3px',
                      height: '60%',
                      background: 'linear-gradient(to bottom, #a855f7, #ec4899)',
                      borderRadius: '0 2px 2px 0'
                    }} />
                    <div style={{
                      position: 'absolute',
                      right: '12px',
                      width: '6px',
                      height: '6px',
                      borderRadius: '50%',
                      background: '#10b981',
                      boxShadow: '0 0 8px #10b981',
                      animation: 'pulse 2s infinite'
                    }} />
                  </>
                )}
              </button>
            );
          })}
        </div>
      </div>

      {/* Enhanced Settings Quick Stats */}
      <div style={{
        background: 'rgba(0, 0, 0, 0.6)',
        backdropFilter: 'blur(20px)',
        border: '1px solid rgba(147, 51, 234, 0.2)',
        borderRadius: '16px',
        padding: '20px'
      }}>
        <h4 style={{
          color: '#fff',
          fontWeight: '600',
          marginBottom: '16px',
          display: 'flex',
          alignItems: 'center',
          gap: '8px'
        }}>
          <Activity size={18} />
          Quick Stats
        </h4>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
          <div style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            padding: '10px 12px',
            background: 'rgba(147, 51, 234, 0.05)',
            borderRadius: '8px',
            border: '1px solid rgba(147, 51, 234, 0.1)'
          }}>
            <span style={{ color: '#9ca3af', fontSize: '14px' }}>Active Settings</span>
            <span style={{
              color: '#fff',
              fontWeight: '700',
              fontSize: '18px'
            }}>
              {Object.values(settings).reduce((count: number, section: SettingsCategory) => count + Object.keys(section).length, 0)}
            </span>
          </div>
          <div style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            padding: '10px 12px',
            background: 'rgba(147, 51, 234, 0.05)',
            borderRadius: '8px',
            border: '1px solid rgba(147, 51, 234, 0.1)'
          }}>
            <span style={{ color: '#9ca3af', fontSize: '14px' }}>Categories</span>
            <span style={{ color: '#a855f7', fontWeight: '600' }}>{settingsTabs.length}</span>
          </div>
          <div style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            padding: '10px 12px',
            background: hasChanges ? 'rgba(250, 204, 21, 0.05)' : 'rgba(16, 185, 129, 0.05)',
            borderRadius: '8px',
            border: hasChanges ? '1px solid rgba(250, 204, 21, 0.2)' : '1px solid rgba(16, 185, 129, 0.2)'
          }}>
            <span style={{ color: '#9ca3af', fontSize: '14px' }}>Unsaved Changes</span>
            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
              <div style={{
                width: '8px',
                height: '8px',
                borderRadius: '50%',
                background: hasChanges ? '#facc15' : '#10b981',
                boxShadow: hasChanges ? '0 0 10px #facc15' : '0 0 10px #10b981',
                animation: hasChanges ? 'pulse 2s infinite' : 'none'
              }} />
              <span style={{
                fontWeight: '600',
                color: hasChanges ? '#facc15' : '#10b981'
              }}>
                {hasChanges ? 'Yes' : 'None'}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>

    {/* Enhanced Settings Main Content */}
    <div style={{ gridColumn: 'span 12 / span 12' }} className="lg:col-span-9">
      <div style={{
        background: 'rgba(0, 0, 0, 0.6)',
        backdropFilter: 'blur(20px)',
        border: '1px solid rgba(147, 51, 234, 0.2)',
        borderRadius: '16px',
        overflow: 'hidden'
      }}>
        {/* Enhanced Settings Header */}
        <div style={{
          padding: '24px 32px',
          borderBottom: '1px solid rgba(147, 51, 234, 0.2)',
          background: 'linear-gradient(135deg, rgba(147, 51, 234, 0.08), rgba(236, 72, 153, 0.08))',
          position: 'relative'
        }}>
          <div style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            height: '2px',
            background: 'linear-gradient(90deg, transparent, #a855f7, transparent)'
          }} />
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', flexWrap: 'wrap', gap: '16px' }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
              <div style={{
                width: '52px',
                height: '52px',
                borderRadius: '12px',
                background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                position: 'relative',
                boxShadow: '0 8px 20px rgba(147, 51, 234, 0.4)'
              }}>
                {(() => {
                  const Icon = settingsTabs.find(t => t.id === activeSettingsTab)?.icon || Settings;
                  return <Icon style={{ width: '26px', height: '26px', color: '#fff' }} />;
                })()}
                <div style={{
                  position: 'absolute',
                  inset: '-4px',
                  borderRadius: '14px',
                  border: '2px solid rgba(147, 51, 234, 0.4)',
                  animation: 'spin 4s linear infinite'
                }} />
              </div>
              <div>
                <h2 style={{
                  fontSize: '26px',
                  fontWeight: '700',
                  color: '#fff',
                  fontFamily: 'Orbitron, monospace',
                  marginBottom: '4px',
                  letterSpacing: '0.5px'
                }}>
                  {settingsTabs.find(t => t.id === activeSettingsTab)?.label || 'Settings'}
                </h2>
                <p style={{ color: '#9ca3af', fontSize: '14px', margin: 0 }}>
                  Configure system settings for this category
                </p>
              </div>
            </div>
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              background: 'rgba(147, 51, 234, 0.2)',
              padding: '10px 16px',
              borderRadius: '12px',
              border: '1px solid rgba(147, 51, 234, 0.3)'
            }}>
              <Database size={18} style={{ color: '#a855f7' }} />
              <span style={{ color: '#a855f7', fontSize: '14px', fontWeight: '700' }}>
                {Object.keys(settings[activeSettingsTab as keyof SystemSettings] || {}).length} Active
              </span>
            </div>
          </div>
        </div>

        {/* Settings Content */}
        <div style={{ padding: '32px' }}>
          {renderSettingsSection(activeSettingsTab)}
        </div>

        {/* Enhanced Action Buttons */}
        {!['monitoring', 'feature_flags'].includes(activeSettingsTab) && (
          <div style={{
            padding: '24px 32px',
            borderTop: '1px solid rgba(147, 51, 234, 0.2)',
            background: 'rgba(0, 0, 0, 0.4)'
          }}>
            <div style={{
              display: 'flex',
              flexWrap: 'wrap',
              alignItems: 'center',
              justifyContent: 'space-between',
              gap: '16px'
            }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '12px', flexWrap: 'wrap' }}>
                <button
                  onClick={saveSettings}
                  disabled={!hasChanges || saving}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    padding: '14px 28px',
                    borderRadius: '12px',
                    border: 'none',
                    cursor: hasChanges && !saving ? 'pointer' : 'not-allowed',
                    background: hasChanges && !saving
                      ? 'linear-gradient(135deg, #9333ea, #ec4899)'
                      : 'rgba(107, 114, 128, 0.3)',
                    color: hasChanges && !saving ? '#fff' : '#6b7280',
                    fontWeight: '600',
                    fontSize: '14px',
                    transition: 'all 0.3s ease',
                    boxShadow: hasChanges && !saving ? '0 4px 15px rgba(147, 51, 234, 0.4)' : 'none'
                  }}
                  onMouseEnter={(e) => {
                    if (hasChanges && !saving) {
                      e.currentTarget.style.transform = 'translateY(-2px)';
                      e.currentTarget.style.boxShadow = '0 6px 20px rgba(147, 51, 234, 0.6)';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (hasChanges && !saving) {
                      e.currentTarget.style.transform = 'translateY(0)';
                      e.currentTarget.style.boxShadow = '0 4px 15px rgba(147, 51, 234, 0.4)';
                    }
                  }}
                >
                  {saving ? (
                    <>
                      <div style={{
                        width: '16px',
                        height: '16px',
                        border: '2px solid rgba(255, 255, 255, 0.2)',
                        borderTopColor: '#fff',
                        borderRadius: '50%',
                        animation: 'spin 1s linear infinite'
                      }} />
                      Saving...
                    </>
                  ) : (
                    <>
                      <Save size={18} />
                      Save Changes
                    </>
                  )}
                </button>
                
                <button
                  onClick={resetToDefaults}
                  disabled={saving}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    padding: '14px 24px',
                    borderRadius: '12px',
                    border: '1px solid rgba(249, 115, 22, 0.3)',
                    background: 'rgba(249, 115, 22, 0.1)',
                    color: '#f97316',
                    cursor: saving ? 'not-allowed' : 'pointer',
                    fontWeight: '600',
                    fontSize: '14px',
                    transition: 'all 0.3s ease'
                  }}
                  onMouseEnter={(e) => {
                    if (!saving) {
                      e.currentTarget.style.background = 'rgba(249, 115, 22, 0.2)';
                      e.currentTarget.style.borderColor = 'rgba(249, 115, 22, 0.5)';
                      e.currentTarget.style.transform = 'translateY(-2px)';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (!saving) {
                      e.currentTarget.style.background = 'rgba(249, 115, 22, 0.1)';
                      e.currentTarget.style.borderColor = 'rgba(249, 115, 22, 0.3)';
                      e.currentTarget.style.transform = 'translateY(0)';
                    }
                  }}
                >
                  <RotateCcw size={18} />
                  Reset to Defaults
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
)}
        </div>
      </div>

      {/* Quest Management Modal */}
      <QuestManagementModal 
        isOpen={showQuestModal}
        onClose={() => setShowQuestModal(false)}
      />

      {/* Animations */}
      <style jsx>{`
        @keyframes pulse {
          0%, 100% { 
            opacity: 0.3; 
            transform: scale(1); 
          }
          50% { 
            opacity: 0.5; 
            transform: scale(1.1); 
          }
        }
        
        @keyframes spin {
          to { 
            transform: rotate(360deg); 
          }
        }

        @keyframes shimmer {
          0% { 
            transform: translateX(-100%) translateY(-100%) rotate(45deg); 
          }
          100% { 
            transform: translateX(100%) translateY(100%) rotate(45deg); 
          }
        }

        .animate-fadeIn {
          animation: fadeIn 0.5s ease-out;
        }

        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
      `}</style>
    </div>
  );
}





app/coach/page.tsx
// app/coach/page.tsx
'use client';
import { useEffect, useState } from 'react';
import Cookies from 'js-cookie';
import { useRouter } from 'next/navigation';
import toast from 'react-hot-toast';
import api from '@/lib/api';
import { getUser, logout } from '@/lib/auth';
import Navbar from '@/components/layout/Navbar';
import ProfileManager from '@/components/dashboard/ProfileManager';
import { 
  Users, Search, TrendingUp, Award, MessageSquare, Send,
  User, Mail, Target, BarChart3, Shield, Sword, Crown,
  Star, Trophy, Zap, Edit3, Save, X, Check, Bell,
  BookOpen, GraduationCap, Activity, Flame, ChevronRight,
  Trash2, AlertTriangle
} from 'lucide-react';

export default function CoachDashboard() {
  const router = useRouter();
  const [user, setUser] = useState<any>(null);
  const [students, setStudents] = useState<any[]>([]);
  const [selectedStudent, setSelectedStudent] = useState<any>(null);
  const [studentStats, setStudentStats] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [showProfile, setShowProfile] = useState(false);
  const [editingProfile, setEditingProfile] = useState(false);
  const [feedbackText, setFeedbackText] = useState('');
  const [sentFeedbacks, setSentFeedbacks] = useState<any[]>([]);
  const [currentBg, setCurrentBg] = useState(0);
  const [showRemoveModal, setShowRemoveModal] = useState(false);
  const [studentToRemove, setStudentToRemove] = useState<any>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [coachProfile, setCoachProfile] = useState({
    bio: '',
    achievements: [],
    specialization: '',
    yearsExperience: 0,
    totalStudentsCoached: 0,
    successStories: 0
  });
  
  const [verifyForm, setVerifyForm] = useState({
    student_email: '',
    student_name: '',
    field_of_interest: ''
  });

  // Solo Leveling themed backgrounds
  const backgrounds = [
    '/images/backgrounds/solo-leveling-1.jpg',
    '/images/backgrounds/solo-leveling-2.jpg',
    '/images/backgrounds/solo-leveling-3.jpg',
    '/images/backgrounds/solo-leveling-4.jpg',
  ];

  // Motivational quotes for coaches
  const motivationalQuotes = [
    { text: "A true master is an eternal student.", author: "Master Yi" },
    { text: "The best teachers are those who show you where to look, but don't tell you what to see.", author: "Alexandra K. Trenfor" },
    { text: "In learning you will teach, and in teaching you will learn.", author: "Phil Collins" },
    { text: "The shadow's strength comes from the light that guides it.", author: "Shadow Monarch" },
    { text: "Every student has the potential to become S-Rank.", author: "Guild Master" }
  ];

  const [currentQuote, setCurrentQuote] = useState(motivationalQuotes[0]);

  useEffect(() => {
    const currentUser = getUser();
    if (!currentUser || currentUser.user_type !== 'coach') {
      router.push('/login');
      return;
    }
    setUser(currentUser);
    fetchStudents();
    loadCoachProfile();
    
    // Change background every 5 seconds
    const bgTimer = setInterval(() => {
      setCurrentBg((prev) => (prev + 1) % backgrounds.length);
    }, 5000);
    
    // Change quote every 10 seconds
    const quoteTimer = setInterval(() => {
      setCurrentQuote(motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)]);
    }, 10000);
    
    return () => {
      clearInterval(bgTimer);
      clearInterval(quoteTimer);
    };
  }, []);
useEffect(() => {
  // Validate session when the page becomes visible again (user returns from another tab/site)
  const handleVisibilityChange = async () => {
    if (!document.hidden) {
      try {
        await api.get('/auth/health');
      } catch (error: any) {
        if (error.response?.status === 401 || error.response?.status === 403) {
          console.warn('Session validation failed, user will be redirected on next action');
        }
      }
    }
  };
  
  document.addEventListener('visibilitychange', handleVisibilityChange);
  
  // Cleanup
  return () => {
    document.removeEventListener('visibilitychange', handleVisibilityChange);
  };
}, []);

  const fetchStudents = async () => {
    try {
      const response = await api.get('/coach/my-students');
      setStudents(response.data.students || []);
    } catch (error) {
      console.error('Failed to fetch students:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadCoachProfile = () => {
    // Load from localStorage or API
    const savedProfile = localStorage.getItem('coachProfile');
    if (savedProfile) {
      setCoachProfile(JSON.parse(savedProfile));
    }
  };

  const saveCoachProfile = () => {
    localStorage.setItem('coachProfile', JSON.stringify(coachProfile));
    setEditingProfile(false);
    toast.success('Profile updated successfully!');
  };

  const verifyStudent = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await api.post('/coach/verify-student', verifyForm);
      setSelectedStudent(response.data.student_profile);
      setStudentStats(response.data.student_stats);
      toast.success('✅ Student verified successfully!');
      fetchStudents();
      
      // Reset form
      setVerifyForm({
        student_email: '',
        student_name: '',
        field_of_interest: ''
      });
    } catch (error: any) {
      toast.error('❌ ' + (error.response?.data?.error || 'Student not found'));
    }
  };

 const provideFeedback = async () => {
  if (!feedbackText.trim() || !selectedStudent || isSubmitting) return;
  
  try {
    setIsSubmitting(true);
    
    // Verify we still have a valid session before sending feedback
    const token = Cookies.get('token');
    if (!token) {
      toast.error('❌ Session expired. Please log in again.');
      window.location.href = '/login';
      return;
    }

    // First, make a quick health check to ensure our session is still valid
    try {
      await api.get('/auth/health');
    } catch (healthError: any) {
      if (healthError.response?.status === 401 || healthError.response?.status === 403) {
        toast.error('❌ Session expired. Please log in again.');
        Cookies.remove('token');
        Cookies.remove('user');
        Cookies.remove('profile');
        window.location.href = '/login';
        return;
      }
    }

    // Send the feedback
    await api.post('/coach/feedback', {
      student_id: selectedStudent.user_id,
      feedback_type: 'guidance',
      feedback_text: feedbackText,
      rating: 5
    });

    // Success - update local state
    const newFeedback = {
      id: Date.now(),
      student_id: selectedStudent.user_id,
      student_name: selectedStudent.full_name,
      text: feedbackText,
      sent_at: new Date().toISOString(),
      read: false
    };
    
    setSentFeedbacks([newFeedback, ...sentFeedbacks]);
    setFeedbackText('');
    
    toast.success('📨 Guidance sent successfully! Student will be notified.');
    
    // Simulate read status after 5 seconds
    setTimeout(() => {
      setSentFeedbacks(prev => prev.map(f => 
        f.id === newFeedback.id ? { ...f, read: true } : f
      ));
    }, 5000);
    
  } catch (error: any) {
    console.error('Feedback submission error:', error);
    
    // Handle specific error cases
    if (error.response?.status === 401 || error.response?.status === 403) {
      const errorCode = error.response?.data?.code;
      
      switch (errorCode) {
        case 'TOKEN_EXPIRED':
        case 'SESSION_EXPIRED':
          toast.error('❌ Your session has expired. Please log in again.');
          Cookies.remove('token');
          Cookies.remove('user');
          Cookies.remove('profile');
          setTimeout(() => {
            window.location.href = '/login';
          }, 1000);
          break;
          
        case 'ACCOUNT_INACTIVE':
          toast.error('❌ Your account is not active. Please contact support.');
          break;
          
        default:
          toast.error('❌ Authentication failed. Please log in again.');
          setTimeout(() => {
            window.location.href = '/login';
          }, 1000);
          break;
      }
    } else if (error.response?.status === 500) {
      toast.error('❌ Server error. Please try again in a moment.');
    } else if (!error.response) {
      toast.error('❌ Network error. Please check your connection.');
    } else {
      toast.error('❌ Failed to send guidance: ' + (error.response?.data?.error || 'Unknown error'));
    }
  } finally {
    setIsSubmitting(false);
  }
};


  // Handler for when profile image is updated
  const handleProfileUpdate = (updatedUser: any) => {
    setUser(updatedUser);
  };

  // Remove student functionality
  const handleRemoveStudent = (student: any) => {
    setStudentToRemove(student);
    setShowRemoveModal(true);
  };

  const confirmRemoveStudent = async () => {
    if (!studentToRemove) return;
    
    try {
      // Try backend API first
      await api.delete(`/coach/remove-student/${studentToRemove.user_id}`);
      
      // Remove from local state
      setStudents(prev => prev.filter(s => s.user_id !== studentToRemove.user_id));
      
      // If this was the selected student, clear selection
      if (selectedStudent?.user_id === studentToRemove.user_id) {
        setSelectedStudent(null);
        setStudentStats(null);
      }
      
      // Clear any feedback for this student
      setSentFeedbacks(prev => prev.filter(f => f.student_id !== studentToRemove.user_id));
      
      toast.success(`🗑️ ${studentToRemove.full_name} has been removed from your roster.`);
      
    } catch (error: any) {
      console.warn('Backend removal failed, using demo mode:', error);
      
      
      // If this was the selected student, clear selection
      if (selectedStudent?.user_id === studentToRemove.user_id) {
        setSelectedStudent(null);
        setStudentStats(null);
      }
      
      // Clear any feedback for this student
      setSentFeedbacks(prev => prev.filter(f => f.student_id !== studentToRemove.user_id));
      
      toast.success(`🗑️ ${studentToRemove.full_name} has been removed from your roster. (Demo mode)`);
    } finally {
      setShowRemoveModal(false);
      setStudentToRemove(null);
    }
  };

  const handleStudentClick = async (student: any) => {
  try {
    // Set the selected student immediately for UI feedback
    setSelectedStudent(student);
    setStudentStats(null); // Clear previous stats
    
    // Fetch comprehensive student data
    const response = await api.get(`/coach/student-stats/${student.user_id}`);
    
    // Update all student-related data
    setSelectedStudent(response.data.student_profile || student);
    setStudentStats(response.data.student_stats || []);
    
    // You can also set additional data if you want to display more info
    // setStudentQuests(response.data.quest_progress);
    // setStudentAchievements(response.data.achievements);
    
  } catch (error: any) {
    console.error('Failed to fetch student stats:', error);
    
    // Fallback: try to fetch basic stats
    try {
      const basicResponse = await api.get(`/users/profile/${student.user_id}`);
      if (basicResponse.data.stats) {
        setStudentStats(basicResponse.data.stats);
      }
    } catch (fallbackError) {
      console.warn('Fallback stats fetch also failed:', fallbackError);
      
      // Set default stats so something shows
      setStudentStats([
        { stat_name: 'Strength', stat_icon: '💪', current_value: 10, max_value: 100 },
        { stat_name: 'Intelligence', stat_icon: '🧠', current_value: 10, max_value: 100 },
        { stat_name: 'Agility', stat_icon: '⚡', current_value: 10, max_value: 100 },
        { stat_name: 'Stamina', stat_icon: '🏃', current_value: 10, max_value: 100 },
        { stat_name: 'Wisdom', stat_icon: '📚', current_value: 10, max_value: 100 },
        { stat_name: 'Charisma', stat_icon: '✨', current_value: 10, max_value: 100 }
      ]);
    }
    
    toast.error('Some student data may be incomplete');
  }
};

  if (loading) {
    return (
      <div className="hero" style={{ background: '#000' }}>
        <div className="spinner"></div>
        <p className="text-gray-400 mt-4">Initializing Coach System...</p>
      </div>
    );
  }

  return (
    <div style={{ 
      position: 'relative',
      minHeight: '100vh',
      background: '#000',
      overflow: 'hidden'
    }}>
      {/* Animated Background */}
      <div style={{ position: 'fixed', inset: 0, zIndex: 0 }}>
        {backgrounds.map((bg, index) => (
          <div
            key={index}
            style={{
              position: 'absolute',
              inset: 0,
              opacity: currentBg === index ? 1 : 0,
              transition: 'opacity 2s ease-in-out',
              backgroundImage: `url(${bg})`,
              backgroundSize: 'cover',
              backgroundPosition: 'center',
              filter: 'brightness(0.3) contrast(1.2)',
            }}
          />
        ))}
        <div style={{
          position: 'absolute',
          inset: 0,
          background: 'linear-gradient(to bottom, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0.8) 100%)',
        }} />
      </div>

      <div style={{ position: 'relative', zIndex: 1 }}>
        <Navbar user={user} onLogout={logout} />
        
        <div className="container" style={{ padding: '32px 20px' }}>
          {/* Header with Profile Button */}
          <div className="glass mb-8 fade-in" style={{
            background: 'rgba(0, 0, 0, 0.6)',
            backdropFilter: 'blur(20px)',
            animation: 'slideUp 0.8s ease-out'
          }}>
            <div className="flex justify-between items-center">
              <div>
                <h1 style={{ 
                  fontSize: '48px', 
                  fontWeight: '900', 
                  marginBottom: '16px',
                  fontFamily: 'Orbitron, monospace',
                  background: 'linear-gradient(135deg, #9333ea 0%, #ec4899 100%)',
                  WebkitBackgroundClip: 'text',
                  WebkitTextFillColor: 'transparent',
                  textShadow: '0 0 30px rgba(147, 51, 234, 0.5)'
                }}>
                  COACH COMMAND CENTER
                </h1>
                <p className="text-gray-400" style={{ fontSize: '18px' }}>
                  Guide your hunters to become Shadow Monarchs
                </p>
              </div>
              
              <button
                onClick={() => setShowProfile(true)}
                className="btn btn-primary"
                style={{
                  background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                  padding: '16px 32px',
                  borderRadius: '12px',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '12px',
                  border: 'none',
                  color: '#fff',
                  fontSize: '16px',
                  fontWeight: '700',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  boxShadow: '0 4px 20px rgba(147, 51, 234, 0.4)',
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-2px)';
                  e.currentTarget.style.boxShadow = '0 6px 30px rgba(147, 51, 234, 0.6)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = '0 4px 20px rgba(147, 51, 234, 0.4)';
                }}
              >
                <Crown size={24} />
                Coach Profile
              </button>
            </div>
          </div>

          {/* Stats Overview */}
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
            gap: '24px',
            marginBottom: '32px'
          }}>
            {[
              { icon: Users, label: 'Active Students', value: students.length, color: '#a855f7' },
              { icon: Trophy, label: 'Total Coached', value: coachProfile.totalStudentsCoached || students.length, color: '#fbbf24' },
              { icon: Star, label: 'Success Stories', value: coachProfile.successStories || 0, color: '#3b82f6' },
              { icon: GraduationCap, label: 'Years Experience', value: coachProfile.yearsExperience || 1, color: '#10b981' }
            ].map((stat, index) => (
              <div
                key={index}
                className="glass"
                style={{
                  padding: '24px',
                  textAlign: 'center',
                  background: 'rgba(0, 0, 0, 0.5)',
                  backdropFilter: 'blur(10px)',
                  border: '1px solid rgba(147, 51, 234, 0.3)',
                  borderRadius: '16px',
                  transition: 'all 0.3s ease',
                  cursor: 'pointer',
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-4px)';
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
                  e.currentTarget.style.background = 'rgba(147, 51, 234, 0.2)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                  e.currentTarget.style.background = 'rgba(0, 0, 0, 0.5)';
                }}
              >
                <stat.icon size={32} style={{ color: stat.color, margin: '0 auto 12px' }} />
                <div style={{ fontSize: '32px', fontWeight: '700', marginBottom: '4px' }}>
                  {stat.value}
                </div>
                <div style={{ fontSize: '14px', color: '#9ca3af', textTransform: 'uppercase', letterSpacing: '1px' }}>
                  {stat.label}
                </div>
              </div>
            ))}
          </div>

          {/* Verify Student Section */}
          <div className="glass mb-8" style={{
            background: 'rgba(147, 51, 234, 0.1)',
            backdropFilter: 'blur(20px)',
            border: '1px solid rgba(147, 51, 234, 0.3)',
          }}>
            <h2 style={{ 
              fontSize: '28px', 
              fontWeight: 'bold', 
              marginBottom: '24px', 
              display: 'flex', 
              alignItems: 'center', 
              gap: '12px',
              color: '#e9d5ff'
            }}>
              <Shield className="text-purple-400" size={28} />
              Verify New Hunter
            </h2>
            <form onSubmit={verifyStudent} style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
              gap: '20px' 
            }}>
              <input
                type="email"
                placeholder="Hunter Email"
                className="form-input"
                style={{
                  padding: '16px 20px',
                  background: 'rgba(0, 0, 0, 0.6)',
                  border: '2px solid rgba(147, 51, 234, 0.3)',
                  borderRadius: '12px',
                  color: '#fff',
                  fontSize: '16px',
                  transition: 'all 0.3s ease',
                }}
                value={verifyForm.student_email}
                onChange={(e) => setVerifyForm({...verifyForm, student_email: e.target.value})}
                required
                onFocus={(e) => {
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
                  e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                }}
                onBlur={(e) => {
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                  e.currentTarget.style.background = 'rgba(0, 0, 0, 0.6)';
                }}
              />
              <input
                type="text"
                placeholder="Hunter Name"
                className="form-input"
                style={{
                  padding: '16px 20px',
                  background: 'rgba(0, 0, 0, 0.6)',
                  border: '2px solid rgba(147, 51, 234, 0.3)',
                  borderRadius: '12px',
                  color: '#fff',
                  fontSize: '16px',
                  transition: 'all 0.3s ease',
                }}
                value={verifyForm.student_name}
                onChange={(e) => setVerifyForm({...verifyForm, student_name: e.target.value})}
                required
                onFocus={(e) => {
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
                  e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                }}
                onBlur={(e) => {
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                  e.currentTarget.style.background = 'rgba(0, 0, 0, 0.6)';
                }}
              />
              <input
                type="text"
                placeholder="Field of Interest"
                className="form-input"
                style={{
                  padding: '16px 20px',
                  background: 'rgba(0, 0, 0, 0.6)',
                  border: '2px solid rgba(147, 51, 234, 0.3)',
                  borderRadius: '12px',
                  color: '#fff',
                  fontSize: '16px',
                  transition: 'all 0.3s ease',
                }}
                value={verifyForm.field_of_interest}
                onChange={(e) => setVerifyForm({...verifyForm, field_of_interest: e.target.value})}
                required
                onFocus={(e) => {
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
                  e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                }}
                onBlur={(e) => {
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                  e.currentTarget.style.background = 'rgba(0, 0, 0, 0.6)';
                }}
              />
              <button 
                type="submit" 
                className="btn btn-primary"
                style={{
                  background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                  padding: '16px 32px',
                  borderRadius: '12px',
                  border: 'none',
                  color: '#fff',
                  fontSize: '16px',
                  fontWeight: '700',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '8px',
                }}
              >
                <Search size={20} />
                Verify Hunter
              </button>
            </form>
          </div>

          {/* Students Grid */}
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 2fr', gap: '32px' }}>
            {/* Students List */}
            <div>
              <h2 style={{ 
                fontSize: '24px', 
                fontWeight: 'bold', 
                marginBottom: '24px', 
                display: 'flex', 
                alignItems: 'center', 
                gap: '12px',
                color: '#e9d5ff'
              }}>
                <Users className="text-purple-400" size={24} />
                Your Hunters ({students.length})
              </h2>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                {students.map((student) => (
                  <div
                    key={student.user_id}
                    className="glass"
                    style={{ 
                      cursor: 'pointer',
                      background: selectedStudent?.user_id === student.user_id 
                        ? 'linear-gradient(135deg, rgba(147, 51, 234, 0.3), rgba(236, 72, 153, 0.3))'
                        : 'rgba(0, 0, 0, 0.5)',
                      backdropFilter: 'blur(10px)',
                      border: selectedStudent?.user_id === student.user_id
                        ? '2px solid rgba(147, 51, 234, 0.6)'
                        : '1px solid rgba(147, 51, 234, 0.2)',
                      borderRadius: '16px',
                      padding: '20px',
                      transition: 'all 0.3s ease',
                    }}
                    onClick={() => handleStudentClick(student)}
                    onMouseEnter={(e) => {
                      if (selectedStudent?.user_id !== student.user_id) {
                        e.currentTarget.style.transform = 'translateX(8px)';
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.4)';
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (selectedStudent?.user_id !== student.user_id) {
                        e.currentTarget.style.transform = 'translateX(0)';
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.2)';
                      }
                    }}
                  >
                    <div className="flex justify-between items-center">
                      <div>
                        <h3 style={{ fontWeight: 'bold', marginBottom: '8px', fontSize: '18px' }}>
                          {student.full_name}
                        </h3>
                        <p className="text-gray-400" style={{ fontSize: '14px', marginBottom: '4px' }}>
                          {student.field_of_interest}
                        </p>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginTop: '8px' }}>
                          <Flame size={16} className="text-orange-400" />
                          <span style={{ fontSize: '14px', color: '#fbbf24' }}>
                            {student.streak_days} day streak
                          </span>
                        </div>
                      </div>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                        <div className="text-right">
                          <div style={{
                            fontSize: '24px',
                            fontWeight: 'bold',
                            background: 'linear-gradient(135deg, #fbbf24, #f59e0b)',
                            WebkitBackgroundClip: 'text',
                            WebkitTextFillColor: 'transparent',
                          }}>
                            LV {student.current_level}
                          </div>
                          <p className="text-gray-400" style={{ fontSize: '12px' }}>
                            {student.total_exp} XP
                          </p>
                        </div>
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleRemoveStudent(student);
                          }}
                          style={{
                            padding: '8px',
                            background: 'rgba(239, 68, 68, 0.2)',
                            border: '1px solid rgba(239, 68, 68, 0.3)',
                            borderRadius: '8px',
                            cursor: 'pointer',
                            transition: 'all 0.3s ease',
                            color: '#ef4444',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                          }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.background = 'rgba(239, 68, 68, 0.3)';
                            e.currentTarget.style.borderColor = 'rgba(239, 68, 68, 0.5)';
                            e.currentTarget.style.transform = 'scale(1.05)';
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.background = 'rgba(239, 68, 68, 0.2)';
                            e.currentTarget.style.borderColor = 'rgba(239, 68, 68, 0.3)';
                            e.currentTarget.style.transform = 'scale(1)';
                          }}
                          title="Remove Hunter"
                        >
                          <Trash2 size={16} />
                        </button>
                      </div>
                    </div>
                    {selectedStudent?.user_id === student.user_id && (
                      <ChevronRight 
                        size={20} 
                        style={{ 
                          position: 'absolute', 
                          right: '-10px', 
                          color: '#a855f7' 
                        }} 
                      />
                    )}
                  </div>
                ))}
                {students.length === 0 && (
                  <div className="text-center glass" style={{ 
                    padding: '48px', 
                    background: 'rgba(0, 0, 0, 0.5)',
                    backdropFilter: 'blur(10px)',
                    borderRadius: '16px'
                  }}>
                    <Users size={64} style={{ margin: '0 auto 16px', opacity: 0.5 }} />
                    <p className="text-gray-400">No hunters verified yet</p>
                    <p style={{ fontSize: '14px', marginTop: '8px', color: '#9ca3af' }}>
                      Verify your students using the form above
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Selected Student Details */}
            <div>
              {selectedStudent ? (
                <div className="glass" style={{
                  background: 'rgba(0, 0, 0, 0.6)',
                  backdropFilter: 'blur(20px)',
                  borderRadius: '20px',
                  padding: '32px',
                  border: '1px solid rgba(147, 51, 234, 0.3)',
                }}>
                  <h2 style={{ 
                    fontSize: '32px', 
                    fontWeight: 'bold', 
                    marginBottom: '32px',
                    background: 'linear-gradient(135deg, #a855f7, #ec4899)',
                    WebkitBackgroundClip: 'text',
                    WebkitTextFillColor: 'transparent',
                  }}>
                    {selectedStudent.full_name}'s Journey
                  </h2>
                  
                  {/* Hunter Stats Overview */}
                  <div style={{ 
                    display: 'grid', 
                    gridTemplateColumns: 'repeat(3, 1fr)', 
                    gap: '24px', 
                    marginBottom: '32px' 
                  }}>
                    <div style={{
                      textAlign: 'center',
                      padding: '20px',
                      background: 'linear-gradient(135deg, rgba(251, 191, 36, 0.2), rgba(245, 158, 11, 0.2))',
                      borderRadius: '12px',
                      border: '1px solid rgba(251, 191, 36, 0.4)',
                    }}>
                      <Sword size={32} style={{ margin: '0 auto 8px', color: '#fbbf24' }} />
                      <p style={{ fontSize: '36px', fontWeight: 'bold', color: '#fbbf24' }}>
                        {selectedStudent.current_level}
                      </p>
                      <p className="text-gray-400" style={{ fontSize: '14px' }}>Level</p>
                    </div>
                    <div style={{
                      textAlign: 'center',
                      padding: '20px',
                      background: 'linear-gradient(135deg, rgba(147, 51, 234, 0.2), rgba(236, 72, 153, 0.2))',
                      borderRadius: '12px',
                      border: '1px solid rgba(147, 51, 234, 0.4)',
                    }}>
                      <Zap size={32} style={{ margin: '0 auto 8px', color: '#a855f7' }} />
                      <p style={{ fontSize: '36px', fontWeight: 'bold', color: '#a855f7' }}>
                        {selectedStudent.total_exp}
                      </p>
                      <p className="text-gray-400" style={{ fontSize: '14px' }}>Total XP</p>
                    </div>
                    <div style={{
                      textAlign: 'center',
                      padding: '20px',
                      background: 'linear-gradient(135deg, rgba(251, 146, 60, 0.2), rgba(254, 215, 170, 0.2))',
                      borderRadius: '12px',
                      border: '1px solid rgba(251, 146, 60, 0.4)',
                    }}>
                      <Flame size={32} style={{ margin: '0 auto 8px', color: '#fb923c' }} />
                      <p style={{ fontSize: '36px', fontWeight: 'bold', color: '#fb923c' }}>
                        {selectedStudent.streak_days}
                      </p>
                      <p className="text-gray-400" style={{ fontSize: '14px' }}>Streak</p>
                    </div>
                  </div>

                  {/* Character Stats */}
                  {studentStats && (
                    <div style={{ marginBottom: '32px' }}>
                      <h3 style={{ 
                        fontWeight: 'bold', 
                        marginBottom: '20px', 
                        fontSize: '20px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px'
                      }}>
                        <Activity size={20} className="text-purple-400" />
                        Character Stats
                      </h3>
                      <div style={{ display: 'grid', gap: '16px' }}>
                        {studentStats.map((stat: any, index: number) => (
                          <div key={index} style={{ 
                            display: 'flex', 
                            alignItems: 'center', 
                            justifyContent: 'space-between',
                            padding: '12px 16px',
                            background: 'rgba(147, 51, 234, 0.1)',
                            borderRadius: '8px',
                            border: '1px solid rgba(147, 51, 234, 0.2)',
                          }}>
                            <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                              <span style={{ fontSize: '20px' }}>{stat.stat_icon}</span>
                              <span style={{ fontWeight: '600' }}>{stat.stat_name}</span>
                            </div>
                            <div style={{ display: 'flex', alignItems: 'center', gap: '12px', flex: 1, maxWidth: '300px' }}>
                              <div style={{ 
                                flex: 1, 
                                height: '10px', 
                                background: 'rgba(0, 0, 0, 0.5)', 
                                borderRadius: '5px', 
                                overflow: 'hidden' 
                              }}>
                                <div 
                                  style={{ 
                                    height: '100%', 
                                    background: 'linear-gradient(to right, #a855f7, #ec4899)',
                                    width: `${(stat.current_value / stat.max_value) * 100}%`,
                                    transition: 'width 0.5s ease',
                                    boxShadow: '0 0 10px rgba(168, 85, 247, 0.5)'
                                  }}
                                />
                              </div>
                              <span style={{ fontSize: '14px', fontWeight: 'bold', minWidth: '60px', textAlign: 'right' }}>
                                {stat.current_value}/{stat.max_value}
                              </span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Guidance Section */}
                  <div>
                    <h3 style={{ 
                      fontWeight: 'bold', 
                      marginBottom: '16px', 
                      fontSize: '20px',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px'
                    }}>
                      <MessageSquare size={20} className="text-purple-400" />
                      Send Guidance
                    </h3>
                    <div style={{ position: 'relative' }}>
                      <textarea
                        className="form-input"
                        placeholder="Share wisdom, encouragement, or strategic advice..."
                        rows={4}
                        value={feedbackText}
                        onChange={(e) => setFeedbackText(e.target.value)}
                        style={{ 
                          width: '100%', 
                          resize: 'none',
                          padding: '16px',
                          paddingRight: '60px',
                          background: 'rgba(0, 0, 0, 0.6)',
                          border: '2px solid rgba(147, 51, 234, 0.3)',
                          borderRadius: '12px',
                          color: '#fff',
                          fontSize: '16px',
                          transition: 'all 0.3s ease',
                        }}
                        onFocus={(e) => {
                          e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
                          e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                        }}
                        onBlur={(e) => {
                          e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                          e.currentTarget.style.background = 'rgba(0, 0, 0, 0.6)';
                        }}
                      />
                      <button
  onClick={provideFeedback}
  disabled={!feedbackText.trim() || !selectedStudent || isSubmitting}
  style={{
    position: 'absolute',
    right: '12px',
    bottom: '12px',
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    background: (feedbackText.trim() && selectedStudent && !isSubmitting)
      ? 'linear-gradient(135deg, #9333ea, #ec4899)' 
      : 'rgba(147, 51, 234, 0.3)',
    border: 'none',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    cursor: (feedbackText.trim() && selectedStudent && !isSubmitting) ? 'pointer' : 'not-allowed',
    transition: 'all 0.3s ease',
    color: '#fff',
  }}
  onMouseEnter={(e) => {
    if (feedbackText.trim() && selectedStudent && !isSubmitting) {
      e.currentTarget.style.transform = 'scale(1.1)';
      e.currentTarget.style.boxShadow = '0 4px 20px rgba(147, 51, 234, 0.6)';
    }
  }}
  onMouseLeave={(e) => {
    e.currentTarget.style.transform = 'scale(1)';
    e.currentTarget.style.boxShadow = 'none';
  }}
>
  {isSubmitting ? (
    <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  ) : (
    <Send size={20} />
  )}
</button>
                    </div>
                    
                    {/* Recent Feedback Status */}
                    {sentFeedbacks.filter(f => f.student_id === selectedStudent.user_id).length > 0 && (
                      <div style={{ marginTop: '16px' }}>
                        <p style={{ fontSize: '14px', color: '#9ca3af', marginBottom: '8px' }}>
                          Recent Guidance:
                        </p>
                        {sentFeedbacks
                          .filter(f => f.student_id === selectedStudent.user_id)
                          .slice(0, 3)
                          .map(feedback => (
                            <div key={feedback.id} style={{
                              padding: '8px 12px',
                              background: 'rgba(147, 51, 234, 0.1)',
                              borderRadius: '8px',
                              marginBottom: '8px',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'space-between',
                              fontSize: '14px'
                            }}>
                              <span style={{ 
                                flex: 1, 
                                overflow: 'hidden', 
                                textOverflow: 'ellipsis', 
                                whiteSpace: 'nowrap' 
                              }}>
                                {feedback.text}
                              </span>
                              {feedback.read ? (
                                <span style={{ display: 'flex', alignItems: 'center', gap: '4px', color: '#10b981' }}>
                                  <Check size={16} />
                                  Read
                                </span>
                              ) : (
                                <span style={{ display: 'flex', alignItems: 'center', gap: '4px', color: '#fbbf24' }}>
                                  <Bell size={16} />
                                  Sent
                                </span>
                              )}
                            </div>
                          ))}
                      </div>
                    )}
                  </div>
                </div>
              ) : (
                <div className="glass text-center" style={{ 
                  padding: '80px 48px',
                  background: 'rgba(0, 0, 0, 0.5)',
                  backdropFilter: 'blur(10px)',
                  borderRadius: '20px'
                }}>
                  <BookOpen size={80} style={{ margin: '0 auto 24px', color: '#6b7280' }} />
                  <h3 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '12px' }}>
                    Select a Hunter
                  </h3>
                  <p className="text-gray-400">
                    Choose a student from your roster to view their progress and provide guidance
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Coach Profile Modal */}
      {showProfile && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.9)',
          backdropFilter: 'blur(20px)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 9999,
        }}>
          <div className="glass" style={{
            maxWidth: '800px',
            width: '90%',
            maxHeight: '90vh',
            overflow: 'auto',
            padding: '48px',
            borderRadius: '24px',
            background: 'rgba(0, 0, 0, 0.8)',
            border: '2px solid rgba(147, 51, 234, 0.4)',
          }}>
            <div className="flex justify-between items-center mb-8">
              <h2 style={{
                fontSize: '36px',
                fontWeight: '900',
                background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
              }}>
                Guild Master Profile
              </h2>
              <button
                onClick={() => setShowProfile(false)}
                style={{
                  padding: '12px',
                  background: 'transparent',
                  border: 'none',
                  cursor: 'pointer',
                  color: '#fff',
                  borderRadius: '8px',
                  transition: 'background 0.3s ease'
                }}
                onMouseOver={(e) => e.currentTarget.style.background = 'rgba(255, 255, 255, 0.1)'}
                onMouseOut={(e) => e.currentTarget.style.background = 'transparent'}
              >
                <X size={28} />
              </button>
            </div>

            {/* Profile Photo Section */}
            <div style={{ marginBottom: '32px', textAlign: 'center' }}>
              <ProfileManager 
                user={user} 
                onUpdate={handleProfileUpdate}
              />
            </div>

            {/* Motivational Quote */}
            <div style={{
              padding: '24px',
              background: 'linear-gradient(135deg, rgba(147, 51, 234, 0.2), rgba(236, 72, 153, 0.2))',
              borderRadius: '16px',
              marginBottom: '32px',
              textAlign: 'center',
              border: '1px solid rgba(147, 51, 234, 0.4)',
            }}>
              <p style={{ 
                fontSize: '20px', 
                fontStyle: 'italic', 
                marginBottom: '12px',
                color: '#e9d5ff'
              }}>
                "{currentQuote.text}"
              </p>
              <p style={{ fontSize: '14px', color: '#a855f7' }}>
                — {currentQuote.author}
              </p>
            </div>

            {/* Profile Content */}
            {editingProfile ? (
              <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '8px', color: '#e9d5ff' }}>
                    Specialization
                  </label>
                  <input
                    type="text"
                    value={coachProfile.specialization}
                    onChange={(e) => setCoachProfile({...coachProfile, specialization: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '12px',
                      background: 'rgba(0, 0, 0, 0.6)',
                      border: '2px solid rgba(147, 51, 234, 0.3)',
                      borderRadius: '8px',
                      color: '#fff',
                    }}
                    placeholder="e.g., Elite Athlete Training, Programming Mastery"
                  />
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', color: '#e9d5ff' }}>
                    Years of Experience
                  </label>
                  <input
                    type="number"
                    value={coachProfile.yearsExperience}
                    onChange={(e) => setCoachProfile({...coachProfile, yearsExperience: parseInt(e.target.value)})}
                    style={{
                      width: '100%',
                      padding: '12px',
                      background: 'rgba(0, 0, 0, 0.6)',
                      border: '2px solid rgba(147, 51, 234, 0.3)',
                      borderRadius: '8px',
                      color: '#fff',
                    }}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', color: '#e9d5ff' }}>
                    Bio / Philosophy
                  </label>
                  <textarea
                    value={coachProfile.bio}
                    onChange={(e) => setCoachProfile({...coachProfile, bio: e.target.value})}
                    rows={4}
                    style={{
                      width: '100%',
                      padding: '12px',
                      background: 'rgba(0, 0, 0, 0.6)',
                      border: '2px solid rgba(147, 51, 234, 0.3)',
                      borderRadius: '8px',
                      color: '#fff',
                      resize: 'none',
                    }}
                    placeholder="Share your coaching philosophy and approach..."
                  />
                </div>

                <div className="flex gap-4">
                  <button
                    onClick={saveCoachProfile}
                    className="btn btn-primary"
                    style={{
                      flex: 1,
                      padding: '12px',
                      background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                      borderRadius: '8px',
                      border: 'none',
                      color: '#fff',
                      fontWeight: '700',
                      cursor: 'pointer',
                    }}
                  >
                    <Save size={20} style={{ display: 'inline', marginRight: '8px' }} />
                    Save Profile
                  </button>
                  <button
                    onClick={() => setEditingProfile(false)}
                    className="btn btn-secondary"
                    style={{
                      flex: 1,
                      padding: '12px',
                      background: 'rgba(255, 255, 255, 0.1)',
                      borderRadius: '8px',
                      border: '2px solid rgba(255, 255, 255, 0.2)',
                      color: '#fff',
                      fontWeight: '700',
                      cursor: 'pointer',
                    }}
                  >
                    Cancel
                  </button>
                </div>
              </div>
            ) : (
              <div>
                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px', marginBottom: '32px' }}>
                  <div>
                    <p style={{ color: '#9ca3af', marginBottom: '4px' }}>Specialization</p>
                    <p style={{ fontSize: '18px', fontWeight: '600' }}>
                      {coachProfile.specialization || 'Shadow Monarch Training'}
                    </p>
                  </div>
                  <div>
                    <p style={{ color: '#9ca3af', marginBottom: '4px' }}>Experience</p>
                    <p style={{ fontSize: '18px', fontWeight: '600' }}>
                      {coachProfile.yearsExperience || 1} Years
                    </p>
                  </div>
                </div>

                {coachProfile.bio && (
                  <div style={{ marginBottom: '32px' }}>
                    <p style={{ color: '#9ca3af', marginBottom: '8px' }}>Philosophy</p>
                    <p style={{ fontSize: '16px', lineHeight: '1.6' }}>{coachProfile.bio}</p>
                  </div>
                )}

                {/* Achievement Badges */}
                <div style={{ marginBottom: '32px' }}>
                  <p style={{ color: '#9ca3af', marginBottom: '16px' }}>Achievements</p>
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '16px' }}>
                    {[
                      { icon: Trophy, label: 'First Student', earned: students.length > 0 },
                      { icon: Star, label: '5 Students', earned: students.length >= 5 },
                      { icon: Crown, label: 'Guild Master', earned: students.length >= 10 },
                      { icon: Sword, label: 'Elite Coach', earned: coachProfile.successStories > 5 },
                    ].map((achievement, index) => (
                      <div
                        key={index}
                        style={{
                          padding: '16px',
                          textAlign: 'center',
                          background: achievement.earned 
                            ? 'linear-gradient(135deg, rgba(251, 191, 36, 0.2), rgba(245, 158, 11, 0.2))'
                            : 'rgba(0, 0, 0, 0.3)',
                          borderRadius: '12px',
                          border: achievement.earned
                            ? '1px solid rgba(251, 191, 36, 0.4)'
                            : '1px solid rgba(107, 114, 128, 0.3)',
                          opacity: achievement.earned ? 1 : 0.5,
                        }}
                      >
                        <achievement.icon 
                          size={32} 
                          style={{ 
                            margin: '0 auto 8px', 
                            color: achievement.earned ? '#fbbf24' : '#6b7280' 
                          }} 
                        />
                        <p style={{ fontSize: '12px', fontWeight: '600' }}>
                          {achievement.label}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>

                <button
                  onClick={() => setEditingProfile(true)}
                  className="btn btn-primary"
                  style={{
                    width: '100%',
                    padding: '14px',
                    background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                    borderRadius: '8px',
                    border: 'none',
                    color: '#fff',
                    fontWeight: '700',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    gap: '8px',
                  }}
                >
                  <Edit3 size={20} />
                  Edit Profile
                </button>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Remove Student Confirmation Modal */}
      {showRemoveModal && studentToRemove && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.9)',
          backdropFilter: 'blur(20px)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 10000,
        }}>
          <div className="glass" style={{
            maxWidth: '500px',
            width: '90%',
            padding: '40px',
            borderRadius: '24px',
            background: 'rgba(0, 0, 0, 0.8)',
            border: '2px solid rgba(239, 68, 68, 0.4)',
            textAlign: 'center',
          }}>
            <div style={{
              width: '80px',
              height: '80px',
              borderRadius: '50%',
              background: 'rgba(239, 68, 68, 0.2)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              margin: '0 auto 24px',
            }}>
              <AlertTriangle size={40} style={{ color: '#ef4444' }} />
            </div>

            <h2 style={{
              fontSize: '28px',
              fontWeight: '900',
              marginBottom: '16px',
              color: '#ef4444',
            }}>
              Remove Hunter
            </h2>

            <p style={{
              fontSize: '18px',
              marginBottom: '8px',
              color: '#fff',
            }}>
              Are you sure you want to remove
            </p>
            
            <p style={{
              fontSize: '24px',
              fontWeight: 'bold',
              marginBottom: '20px',
              background: 'linear-gradient(135deg, #a855f7, #ec4899)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
            }}>
              {studentToRemove.full_name}
            </p>

            <div style={{
              padding: '20px',
              background: 'rgba(239, 68, 68, 0.1)',
              borderRadius: '12px',
              marginBottom: '32px',
              border: '1px solid rgba(239, 68, 68, 0.3)',
            }}>
              <p style={{ color: '#fca5a5', fontSize: '14px', lineHeight: '1.6' }}>
                <strong>Warning:</strong> This action cannot be undone. The hunter will be removed from your roster and you will lose access to their progress data and feedback history.
              </p>
            </div>

            <div style={{ display: 'flex', gap: '16px' }}>
              <button
                onClick={() => {
                  setShowRemoveModal(false);
                  setStudentToRemove(null);
                }}
                style={{
                  flex: 1,
                  padding: '16px',
                  background: 'rgba(255, 255, 255, 0.1)',
                  border: '2px solid rgba(255, 255, 255, 0.2)',
                  borderRadius: '12px',
                  color: '#fff',
                  fontSize: '16px',
                  fontWeight: '600',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = 'rgba(255, 255, 255, 0.2)';
                  e.currentTarget.style.borderColor = 'rgba(255, 255, 255, 0.3)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'rgba(255, 255, 255, 0.1)';
                  e.currentTarget.style.borderColor = 'rgba(255, 255, 255, 0.2)';
                }}
              >
                Cancel
              </button>
              
              <button
                onClick={confirmRemoveStudent}
                style={{
                  flex: 1,
                  padding: '16px',
                  background: 'linear-gradient(135deg, #ef4444, #dc2626)',
                  border: 'none',
                  borderRadius: '12px',
                  color: '#fff',
                  fontSize: '16px',
                  fontWeight: '700',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '8px',
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-2px)';
                  e.currentTarget.style.boxShadow = '0 6px 30px rgba(239, 68, 68, 0.6)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = 'none';
                }}
              >
                <Trash2 size={20} />
                Remove Hunter
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Animations */}
      <style jsx>{`
        @keyframes slideUp {
          from {
            opacity: 0;
            transform: translateY(30px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        @keyframes pulse {
          0%, 100% { opacity: 0.3; transform: scale(1); }
          50% { opacity: 0.6; transform: scale(1.1); }
        }
      `}</style>
    </div>
  );
}





app/dashboard/page.tsx
'use client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import toast from 'react-hot-toast';
import api from '@/lib/api';
import { getUser, logout } from '@/lib/auth';
import Navbar from '@/components/layout/Navbar';
import ProfileManager from '@/components/dashboard/ProfileManager';
import Cookies from 'js-cookie';
import { 
  Sword, Shield, Heart, Brain, Zap, Star,
  Trophy, Target, TrendingUp, Calendar, Clock, CheckCircle,
  Flame, Swords, Crown, Activity, Lock, Unlock, AlertCircle, RefreshCw,
  MessageSquare, Mail, Eye, EyeOff, User
} from 'lucide-react';

const refreshUserData = () => {
  // Refresh user data from cookies
  const userStr = document.cookie
    .split('; ')
    .find(row => row.startsWith('user='));
  
  if (userStr) {
    try {
      const userData = JSON.parse(decodeURIComponent(userStr.split('=')[1]));
      return userData;
    } catch (error) {
      console.error('Failed to parse user data:', error);
    }
  }
  return null;
};

export default function DashboardPage() {
  const router = useRouter();
  const [user, setUser] = useState<any>(null);
  const [profile, setProfile] = useState<any>(null);
  const [stats, setStats] = useState<any[]>([]);
  const [dailyQuests, setDailyQuests] = useState<any[]>([]);
  const [weeklyQuests, setWeeklyQuests] = useState<any[]>([]);
  const [achievements, setAchievements] = useState<any[]>([]);
  const [allAchievements, setAllAchievements] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('daily');
  const [currentTime, setCurrentTime] = useState(new Date());
  const [backgroundIndex, setBackgroundIndex] = useState(0);
  const [receivedGuidance, setReceivedGuidance] = useState<any[]>([]);
  const [unreadGuidanceCount, setUnreadGuidanceCount] = useState(0);
  const [showGuidanceModal, setShowGuidanceModal] = useState(false);
  const [selectedGuidance, setSelectedGuidance] = useState<any>(null);

  // Solo Leveling themed backgrounds
  const backgrounds = [
    '/images/backgrounds/solo-leveling-1.jpg',
    '/images/backgrounds/solo-leveling-2.jpg',
    '/images/backgrounds/solo-leveling-3.jpg',
    '/images/backgrounds/solo-leveling-4.jpg',
  ];

  useEffect(() => {
    console.log('Dashboard: Starting initialization...');
    const currentUser = getUser();
    if (!currentUser || currentUser.user_type !== 'adventurer') {
      console.log('Dashboard: No valid user found, redirecting to login');
      router.push('/login');
      return;
    }
    console.log('Dashboard: User found:', currentUser);
    setUser(currentUser);
    
    // Add timeout to prevent infinite loading
    const timeout = setTimeout(() => {
      if (loading) {
        setError('Loading timeout. Please refresh the page.');
        setLoading(false);
      }
    }, 15000); // 15 seconds timeout

    fetchDashboardData().finally(() => {
      clearTimeout(timeout);
    });
    
    // Update time every minute
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000);
    
    // Change background every 10 seconds
    const bgTimer = setInterval(() => {
      setBackgroundIndex((prev) => (prev + 1) % backgrounds.length);
    }, 10000);
    
    return () => {
      clearInterval(timer);
      clearInterval(bgTimer);
      clearTimeout(timeout);
    };
  }, []);

  const fetchDashboardData = async () => {
  console.log('Dashboard: Starting data fetch...');
  setLoading(true);
  setError(null);
  
  try {
    // Get current user from cookies first
    const currentUser = getUser();
    console.log('Dashboard: Current user from cookies:', currentUser);
    
    if (currentUser) {
      setUser(currentUser);
      console.log('Dashboard: User profile photo URL from cookies:', currentUser.profile_photo_url);
    }

    // Test backend connection first
    console.log('Dashboard: Testing backend connection...');
    const healthCheck = await fetch('http://localhost:5000/api/health');
    if (!healthCheck.ok) {
      throw new Error('Backend server is not responding');
    }
    console.log('Dashboard: Backend connection successful');

    // Fetch profile 
    console.log('Dashboard: Fetching profile...');
    try {
      const profileRes = await api.get('/users/profile');
      console.log('Dashboard: Profile response:', profileRes.data);
      
      // Update user data if backend returns updated info
      if (profileRes.data.user && profileRes.data.user.profile_photo_url !== currentUser?.profile_photo_url) {
        console.log('Dashboard: Updating user with new profile photo URL:', profileRes.data.user.profile_photo_url);
        
        const updatedUser = { ...currentUser, ...profileRes.data.user };
        setUser(updatedUser);
        Cookies.set('user', JSON.stringify(updatedUser), { expires: 7 });
      }
      
      if (profileRes.data.profile) {
        setProfile(profileRes.data.profile);
      } else {
        // Set default profile
        setProfile({ 
          current_level: 1, 
          total_exp: 0, 
          current_exp: 0, 
          exp_to_next_level: 100,
          streak_days: 0,
          field_of_interest: 'Programming Skills'
        });
      }
    } catch (profileError) {
      console.error('Dashboard: Profile fetch failed:', profileError);
      // Keep the user from cookies even if profile fetch fails
      if (currentUser) {
        setUser(currentUser);
      }
      
      // Set default profile and continue
      setProfile({ 
        current_level: 1, 
        total_exp: 0, 
        current_exp: 0, 
        exp_to_next_level: 100,
        streak_days: 0,
        field_of_interest: 'Programming Skills'
      });
    }

      // Fetch stats
      console.log('Dashboard: Fetching stats...');
      try {
        const statsRes = await api.get('/users/stats');
        console.log('Dashboard: Stats response:', statsRes.data);
        if (statsRes.data.stats && statsRes.data.stats.length > 0) {
          setStats(statsRes.data.stats);
        } else {
          await initializeUserStats();
        }
      } catch (statsError) {
        console.error('Dashboard: Stats fetch failed:', statsError);
        // Set default stats
        setStats([
          { stat_name: 'Strength', stat_icon: '💪', current_value: 10, max_value: 100 },
          { stat_name: 'Intelligence', stat_icon: '🧠', current_value: 10, max_value: 100 },
          { stat_name: 'Agility', stat_icon: '⚡', current_value: 10, max_value: 100 },
          { stat_name: 'Stamina', stat_icon: '🏃', current_value: 10, max_value: 100 },
          { stat_name: 'Wisdom', stat_icon: '📚', current_value: 10, max_value: 100 },
          { stat_name: 'Charisma', stat_icon: '✨', current_value: 10, max_value: 100 }
        ]);
      }

      // Fetch quests with more robust error handling
      console.log('Dashboard: Fetching quests...');
      await fetchQuests();

      // Fetch achievements
      console.log('Dashboard: Fetching achievements...');
      try {
        const achievementsRes = await api.get('/users/achievements');
        console.log('Dashboard: Achievements response:', achievementsRes.data);
        const earnedAchievements = achievementsRes.data.achievements || [];
        setAchievements(earnedAchievements);
        
        const allPossibleAchievements = getAchievementsList();
        const achievementsWithStatus = allPossibleAchievements.map(achievement => ({
          ...achievement,
          isEarned: earnedAchievements.some((earned: any) => 
            earned.achievement_id === achievement.achievement_id
          ),
          earned_at: earnedAchievements.find((earned: any) => 
            earned.achievement_id === achievement.achievement_id
          )?.earned_at
        }));
        setAllAchievements(achievementsWithStatus);
      } catch (achievementsError) {
        console.error('Dashboard: Achievements fetch failed:', achievementsError);
        // Set default achievements
        setAllAchievements(getAchievementsList().map(achievement => ({
          ...achievement,
          isEarned: false
        })));
      }
      
      await fetchReceivedGuidance();

      console.log('Dashboard: Data fetch completed successfully');
      
    } catch (error: any) {
      console.error('Dashboard: Data fetch failed:', error);
      const errorMessage = error.response?.data?.error || error.message || 'Failed to load dashboard data';
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const fetchQuests = async () => {
    try {
      console.log('Dashboard: Fetching daily quests...');
      const dailyRes = await api.get('/quests/daily');
      console.log('Dashboard: Daily quests response:', dailyRes.data);
      
      if (dailyRes.data.quests && dailyRes.data.quests.length > 0) {
        setDailyQuests(dailyRes.data.quests);
      } else {
        console.log('Dashboard: No daily quests found, generating...');
        await generateDailyQuests();
      }
    } catch (dailyError) {
      console.error('Dashboard: Daily quests fetch failed:', dailyError);
      // Generate default daily quests
      await generateDefaultDailyQuests();
    }

    try {
      console.log('Dashboard: Fetching weekly quests...');
      const weeklyRes = await api.get('/quests/weekly');
      console.log('Dashboard: Weekly quests response:', weeklyRes.data);
      
      if (weeklyRes.data.quests && weeklyRes.data.quests.length > 0) {
        setWeeklyQuests(weeklyRes.data.quests);
      } else {
        console.log('Dashboard: No weekly quests found, generating...');
        await generateWeeklyQuests();
      }
    } catch (weeklyError) {
      console.error('Dashboard: Weekly quests fetch failed:', weeklyError);
      // Generate default weekly quests
      await generateDefaultWeeklyQuests();
    }
  };

  const generateDefaultDailyQuests = async () => {
    console.log('Dashboard: Generating default daily quests...');
    const defaultQuests = [
      { active_quest_id: 1, quest_title: 'Morning Routine', base_xp: 25, difficulty: 'easy', is_completed: false, expires_at: new Date(Date.now() + 86400000).toISOString() },
      { active_quest_id: 2, quest_title: 'Study/Practice for 30 minutes', base_xp: 35, difficulty: 'medium', is_completed: false, expires_at: new Date(Date.now() + 86400000).toISOString() },
      { active_quest_id: 3, quest_title: 'Physical Exercise', base_xp: 30, difficulty: 'medium', is_completed: false, expires_at: new Date(Date.now() + 86400000).toISOString() },
      { active_quest_id: 4, quest_title: 'Skill Development', base_xp: 40, difficulty: 'medium', is_completed: false, expires_at: new Date(Date.now() + 86400000).toISOString() },
      { active_quest_id: 5, quest_title: 'Healthy Meal Planning', base_xp: 20, difficulty: 'easy', is_completed: false, expires_at: new Date(Date.now() + 86400000).toISOString() },
      { active_quest_id: 6, quest_title: 'Goal Review & Planning', base_xp: 25, difficulty: 'easy', is_completed: false, expires_at: new Date(Date.now() + 86400000).toISOString() },
      { active_quest_id: 7, quest_title: 'Creative Activity', base_xp: 30, difficulty: 'medium', is_completed: false, expires_at: new Date(Date.now() + 86400000).toISOString() },
      { active_quest_id: 8, quest_title: 'Evening Reflection', base_xp: 20, difficulty: 'easy', is_completed: false, expires_at: new Date(Date.now() + 86400000).toISOString() }
    ];
    setDailyQuests(defaultQuests);
  };

  const generateDefaultWeeklyQuests = async () => {
    console.log('Dashboard: Generating default weekly quests...');
    const defaultWeeklyQuests = [
      { active_quest_id: 101, quest_title: 'Complete 5 Daily Quests', base_xp: 200, difficulty: 'medium', is_completed: false, expires_at: new Date(Date.now() + 604800000).toISOString() },
      { active_quest_id: 102, quest_title: 'Weekly Skill Master Challenge', base_xp: 300, difficulty: 'hard', is_completed: false, expires_at: new Date(Date.now() + 604800000).toISOString() },
      { active_quest_id: 103, quest_title: 'Consistency Champion', base_xp: 250, difficulty: 'medium', is_completed: false, expires_at: new Date(Date.now() + 604800000).toISOString() }
    ];
    setWeeklyQuests(defaultWeeklyQuests);
  };

  const initializeUserStats = async () => {
    console.log('Dashboard: Initializing user stats...');
    try {
      const initialStats = [
        { stat_name: 'Strength', stat_icon: '💪', current_value: 10, max_value: 100 },
        { stat_name: 'Intelligence', stat_icon: '🧠', current_value: 10, max_value: 100 },
        { stat_name: 'Agility', stat_icon: '⚡', current_value: 10, max_value: 100 },
        { stat_name: 'Stamina', stat_icon: '🏃', current_value: 10, max_value: 100 },
        { stat_name: 'Wisdom', stat_icon: '📚', current_value: 10, max_value: 100 },
        { stat_name: 'Charisma', stat_icon: '✨', current_value: 10, max_value: 100 }
      ];
      
      setStats(initialStats);
      
      // Try to initialize in backend
      try {
        await api.post('/users/initialize-stats', { stats: initialStats });
      } catch (error) {
        console.warn('Dashboard: Backend stats initialization failed, using frontend stats');
      }
    } catch (error) {
      console.error('Dashboard: Failed to initialize stats:', error);
    }
  };

  const generateDailyQuests = async () => {
    try {
      console.log('Dashboard: Generating daily quests via API...');
      const response = await api.post('/quests/generate-daily');
      if (response.data.quests) {
        setDailyQuests(response.data.quests);
      } else {
        await generateDefaultDailyQuests();
      }
    } catch (error) {
      console.error('Dashboard: Failed to generate daily quests:', error);
      await generateDefaultDailyQuests();
    }
  };

  const generateWeeklyQuests = async () => {
    try {
      console.log('Dashboard: Generating weekly quests via API...');
      const response = await api.post('/quests/generate-weekly');
      if (response.data.quests) {
        setWeeklyQuests(response.data.quests);
      } else {
        await generateDefaultWeeklyQuests();
      }
    } catch (error) {
      console.error('Dashboard: Failed to generate weekly quests:', error);
      await generateDefaultWeeklyQuests();
    }
  };

  const getAchievementsList = () => {
    return [
      { achievement_id: 1, achievement_name: 'First Steps', achievement_description: 'Complete your first quest', achievement_icon: '🎯', requirement: 'complete_quests_1' },
      { achievement_id: 2, achievement_name: 'Week Warrior', achievement_description: 'Maintain a 7-day streak', achievement_icon: '🔥', requirement: 'streak_7' },
      { achievement_id: 3, achievement_name: 'Level 5 Hunter', achievement_description: 'Reach Level 5', achievement_icon: '⭐', requirement: 'level_5' },
      { achievement_id: 4, achievement_name: 'Level 10 Fighter', achievement_description: 'Reach Level 10', achievement_icon: '🗡️', requirement: 'level_10' },
      { achievement_id: 5, achievement_name: 'Quest Master', achievement_description: 'Complete 50 quests', achievement_icon: '👑', requirement: 'complete_quests_50' },
      { achievement_id: 6, achievement_name: 'Dedication', achievement_description: 'Maintain a 30-day streak', achievement_icon: '💎', requirement: 'streak_30' },
      { achievement_id: 7, achievement_name: 'Power Surge', achievement_description: 'Reach 1000 total XP', achievement_icon: '⚡', requirement: 'xp_1000' },
      { achievement_id: 8, achievement_name: 'Elite Hunter', achievement_description: 'Reach Level 20', achievement_icon: '🏆', requirement: 'level_20' },
      { achievement_id: 9, achievement_name: 'Strength Master', achievement_description: 'Max out Strength stat', achievement_icon: '💪', requirement: 'stat_strength_100' },
      { achievement_id: 10, achievement_name: 'Shadow Monarch', achievement_description: 'Reach Level 50', achievement_icon: '👤', requirement: 'level_50' }
    ];
  };

 const handleQuestComplete = async (questId: number, questType: 'daily' | 'weekly' = 'daily') => {
  try {
    console.log(`Dashboard: Completing quest ${questId}...`);
    
    // Update locally first for immediate feedback
    if (questType === 'daily') {
      setDailyQuests(prev => prev.map(q => 
        q.active_quest_id === questId ? {...q, is_completed: true} : q
      ));
    } else {
      setWeeklyQuests(prev => prev.map(q => 
        q.active_quest_id === questId ? {...q, is_completed: true} : q
      ));
    }

    // Try to complete via API
    try {
      const response = await api.post(`/quests/complete/${questId}`);
      const xpGained = response.data.xp_gained || (questType === 'weekly' ? 500 : 100);
      
      // Show XP gained toast
      toast.success(`🎉 Quest completed! +${xpGained} XP gained!`);
      
      // Show level up toast if applicable
      if (response.data.leveledUp) {
        toast.success(`🎊 LEVEL UP! You reached Level ${response.data.newLevel}!`);
      }
      
      // *** NEW: Show streak notifications ***
      if (response.data.streakInfo) {
        const { currentStreak, streakBroken, isNewRecord } = response.data.streakInfo;
        
        if (streakBroken) {
          toast.error(`💔 Streak reset! Starting fresh at Day 1`, {
            duration: 4000
          });
        } else if (isNewRecord) {
          toast.success(`🔥 New personal record! ${currentStreak} day streak!`, {
            duration: 5000,
            style: {
              background: '#F59E0B',
              color: '#fff',
              fontWeight: 'bold'
            }
          });
        } else if (currentStreak > 1) {
          toast.success(`🔥 ${currentStreak} day streak! Keep it up!`, {
            duration: 3000
          });
        }
        
        // Update profile locally to reflect new streak
        setProfile(prev => prev ? {
          ...prev,
          streak_days: currentStreak,
          longest_streak: isNewRecord ? currentStreak : prev.longest_streak
        } : prev);
      }
      
      // Show achievement notifications
      if (response.data.newAchievements && response.data.newAchievements.length > 0) {
        response.data.newAchievements.forEach((achievement: any) => {
          toast.success(`🏆 Achievement Unlocked: ${achievement.achievement_name}!`, {
            duration: 6000,
            style: {
              background: '#4F46E5',
              color: '#fff',
              fontWeight: 'bold'
            }
          });
        });
      }
      
      // Refresh data to show updates
      setTimeout(() => {
        fetchDashboardData();
      }, 1000);
      
    } catch (apiError) {
      console.warn('Dashboard: API quest completion failed, using frontend simulation');
      // Simulate XP gain locally
      const xpGained = questType === 'weekly' ? 200 : 30;
      toast.success(`🎉 Quest completed! +${xpGained} XP gained! (Demo mode)`);
      
      // Update profile locally
      if (profile) {
        const newTotalExp = profile.total_exp + xpGained;
        let newCurrentExp = profile.current_exp + xpGained;
        let newLevel = profile.current_level;
        
        if (newCurrentExp >= profile.exp_to_next_level) {
          newLevel++;
          newCurrentExp = newCurrentExp - profile.exp_to_next_level;
          toast.success(`🎊 LEVEL UP! You reached Level ${newLevel}!`);
        }
        
        setProfile(prev => ({
          ...prev,
          total_exp: newTotalExp,
          current_exp: newCurrentExp,
          current_level: newLevel
        }));
        
        checkAchievements(newLevel, newTotalExp);
      }
    }
    
  } catch (error: any) {
    console.error('Dashboard: Quest completion error:', error);
    toast.error('Failed to complete quest. Please try again.');
  }
};

  const checkAchievements = async (level: number, totalExp: number) => {
    try {
      const response = await api.post('/users/check-achievements', { level, totalExp });
      
      if (response.data.newAchievements && response.data.newAchievements.length > 0) {
        response.data.newAchievements.forEach((achievement: any) => {
          toast.success(`🏆 Achievement Unlocked: ${achievement.achievement_name}!`, {
            duration: 5000
          });
        });
        
        fetchDashboardData();
      }
    } catch (error) {
      console.error('Dashboard: Failed to check achievements:', error);
    }
  };

  const fetchReceivedGuidance = async () => {
    try {
      console.log('Dashboard: Fetching received guidance...');
      const response = await api.get('/users/received-feedback');
      console.log('Dashboard: Received guidance response:', response.data);
      
      setReceivedGuidance(response.data.feedback || []);
      setUnreadGuidanceCount(response.data.unread_count || 0);
    } catch (error) {
      console.error('Dashboard: Failed to fetch received guidance:', error);
      setReceivedGuidance([]);
      setUnreadGuidanceCount(0);
    }
  };

  const markGuidanceAsRead = async (feedbackId: number) => {
    try {
      await api.put(`/users/feedback/${feedbackId}/read`);
      
      setReceivedGuidance(prev => 
        prev.map(guidance => 
          guidance.feedback_id === feedbackId 
            ? { ...guidance, is_read: true }
            : guidance
        )
      );
      
      setUnreadGuidanceCount(prev => Math.max(0, prev - 1));
      
    } catch (error) {
      console.error('Dashboard: Failed to mark guidance as read:', error);
    }
  };

  const formatTimeRemaining = (expiresAt: string) => {
    try {
      const expires = new Date(expiresAt);
      const now = currentTime;
      const diff = expires.getTime() - now.getTime();
      
      if (diff <= 0) return 'Expired';
      
      const hours = Math.floor(diff / (1000 * 60 * 60));
      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
      
      if (hours > 24) {
        const days = Math.floor(hours / 24);
        return `${days} day${days > 1 ? 's' : ''} remaining`;
      }
      
      return `${hours}h ${minutes}m remaining`;
    } catch (error) {
      return 'Time remaining';
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty.toLowerCase()) {
      case 'easy': return '#4ade80';
      case 'medium': return '#facc15';
      case 'hard': return '#f87171';
      default: return '#9ca3af';
    }
  };

  const retryFetch = () => {
    setError(null);
    setLoading(true);
    fetchDashboardData();
  };

  if (loading) {
    return (
      <div className="hero">
        <div className="spinner"></div>
        <p className="text-gray-400 mt-4">Loading your adventure...</p>
        {error && (
          <div className="mt-4 text-center">
            <p className="text-red-400 mb-2">{error}</p>
            <button 
              onClick={retryFetch}
              className="btn btn-primary flex items-center gap-2"
            >
              <RefreshCw size={16} />
              Retry
            </button>
          </div>
        )}
      </div>
    );
  }

  if (error && !profile) {
    return (
      <div className="hero">
        <AlertCircle size={64} className="text-red-400 mb-4" />
        <h2 className="text-2xl font-bold mb-4">Connection Error</h2>
        <p className="text-gray-400 mb-6 text-center max-w-md">
          {error}
        </p>
        <button 
          onClick={retryFetch}
          className="btn btn-primary flex items-center gap-2"
        >
          <RefreshCw size={16} />
          Try Again
        </button>
        <div className="mt-6 text-sm text-gray-500">
          <p>Troubleshooting tips:</p>
          <ul className="list-disc list-inside mt-2 space-y-1">
            <li>Make sure the backend server is running on port 5000</li>
            <li>Check your database connection</li>
            <li>Verify your .env file is configured correctly</li>
          </ul>
        </div>
      </div>
    );
  }

  return (
    <div style={{ minHeight: '100vh', background: '#000', position: 'relative' }}>
      {/* Animated Solo Leveling Background */}
      <div style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: 0,
        overflow: 'hidden'
      }}>
        {backgrounds.map((bg, index) => (
          <div
            key={index}
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundImage: `url(${bg})`,
              backgroundSize: 'cover',
              backgroundPosition: 'center',
              opacity: index === backgroundIndex ? 1 : 0,
              transition: 'opacity 2s ease-in-out',
              transform: `scale(${index === backgroundIndex ? 1.1 : 1})`,
              filter: 'brightness(0.3) saturate(1.2)'
            }}
          />
        ))}
        <div style={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'linear-gradient(to bottom, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0.7) 100%)'
        }} />
      </div>

      <div style={{ position: 'relative', zIndex: 1 }}>
        <Navbar user={user} onLogout={logout} />
        
        <div className="container" style={{ padding: '32px 20px' }}>
          {/* Hero Section with Profile */}
          <div className="glass mb-8 fade-in">
            <div className="flex justify-between items-start">
              <div style={{ flex: 1 }}>
                <h1 className="hero-title gradient-text" style={{ fontSize: '48px', marginBottom: '16px' }}>
                  Welcome back, {user?.username}
                </h1>
                <p className="text-gray-400 mb-4">
                  {profile?.field_of_interest || 'Adventurer'} • Level {profile?.current_level || 1}
                </p>
                
                {/* Level Progress */}
                <div className="mb-6">
                  <div className="flex justify-between mb-2">
                    <span>Level {profile?.current_level || 1}</span>
                    <span className="text-indigo-400">
                      {profile?.current_exp || 0} / {profile?.exp_to_next_level || 100} XP
                    </span>
                  </div>
                  <div className="progress-bar">
                    <div 
                      className="progress-fill"
                      style={{ 
                        width: `${((profile?.current_exp || 0) / (profile?.exp_to_next_level || 100)) * 100}%` 
                      }}
                    />
                  </div>
                </div>
                
                {/* Streak & Total XP */}
                <div className="flex items-center gap-4">
                  <div className="stat-card" style={{ padding: '16px', minWidth: '150px' }}>
                    <div className="stat-value">
                      <Flame className="inline w-6 h-6 mr-2 text-orange-500" />
                      {profile?.streak_days || 0}
                    </div>
                    <div className="stat-label">Day Streak</div>
                  </div>
                  <div className="stat-card" style={{ padding: '16px', minWidth: '150px' }}>
                    <div className="stat-value">
                      <Zap className="inline w-6 h-6 mr-2 text-yellow-500" />
                      {profile?.total_exp || 0}
                    </div>
                    <div className="stat-label">Total XP</div>
                  </div>
                </div>
              </div>
              
              {/* Profile Photo Manager */}
              <ProfileManager 
                user={user} 
                onUpdate={(updatedUser) => {
                  setUser(updatedUser);
                }} 
              />
            </div>
          </div>

          {/* Stats Grid */}
          <div className="stats-grid mb-8">
            {stats.map((stat, index) => (
              <div key={index} className="stat-card float-animation" style={{ animationDelay: `${index * 0.1}s` }}>
                <div className="stat-value">{stat.stat_icon} {stat.current_value}</div>
                <div className="stat-label">{stat.stat_name}</div>
                <div className="progress-bar mt-2" style={{ height: '6px' }}>
                  <div 
                    className="progress-fill"
                    style={{ width: `${(stat.current_value / stat.max_value) * 100}%` }}
                  />
                </div>
              </div>
            ))}
          </div>

          {/* Guidance Section - Always Visible */}
          <div 
            className="glass mb-8 fade-in" 
            style={{
              background: unreadGuidanceCount > 0 
                ? 'linear-gradient(135deg, rgba(168, 85, 247, 0.2), rgba(236, 72, 153, 0.2))'
                : 'rgba(0, 0, 0, 0.3)',
              border: unreadGuidanceCount > 0 
                ? '2px solid rgba(168, 85, 247, 0.4)' 
                : '1px solid rgba(255, 255, 255, 0.1)',
              animation: unreadGuidanceCount > 0 ? 'pulse 2s infinite' : 'none'
            }}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div style={{
                  width: '60px',
                  height: '60px',
                  borderRadius: '50%',
                  background: unreadGuidanceCount > 0 
                    ? 'linear-gradient(135deg, #a855f7, #ec4899)' 
                    : 'rgba(147, 51, 234, 0.3)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  position: 'relative'
                }}>
                  <MessageSquare size={28} style={{ color: '#fff' }} />
                  {unreadGuidanceCount > 0 && (
                    <div style={{
                      position: 'absolute',
                      top: '-5px',
                      right: '-5px',
                      width: '24px',
                      height: '24px',
                      borderRadius: '50%',
                      background: '#ef4444',
                      color: '#fff',
                      fontSize: '12px',
                      fontWeight: 'bold',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      animation: 'bounce 1s infinite'
                    }}>
                      {unreadGuidanceCount}
                    </div>
                  )}
                </div>
                
                <div>
                  <h3 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '8px' }}>
                    {unreadGuidanceCount > 0 
                      ? 'New Guidance from Your Coach!'
                      : 'Coach Guidance Center'
                    }
                  </h3>
                  <p className="text-gray-300">
                    {unreadGuidanceCount > 0 
                      ? `${unreadGuidanceCount} new messages from your coach`
                      : receivedGuidance.length > 0 
                        ? `${receivedGuidance.length} total messages from your coach`
                        : 'No messages yet from your coach'
                    }
                  </p>
                </div>
              </div>
              
              <button
                onClick={() => setShowGuidanceModal(true)}
                style={{
                  background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                  padding: '16px 32px',
                  borderRadius: '12px',
                  border: 'none',
                  color: '#fff',
                  fontSize: '16px',
                  fontWeight: '700',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px',
                }}
              >
                <Mail size={20} />
                {unreadGuidanceCount > 0 ? 'Read Messages' : 'View Messages'}
              </button>
            </div>
          </div>

          {/* Quests Section */}
          <div className="glass">
            {/* Tab Navigation */}
            <div className="flex gap-4 mb-6" style={{ borderBottom: '2px solid rgba(255, 255, 255, 0.1)', paddingBottom: '16px' }}>
              <button
                onClick={() => setActiveTab('daily')}
                className={`btn ${activeTab === 'daily' ? 'btn-primary' : 'btn-secondary'}`}
              >
                Daily Quests ({dailyQuests.filter(q => !q.is_completed).length})
              </button>
              <button
                onClick={() => setActiveTab('weekly')}
                className={`btn ${activeTab === 'weekly' ? 'btn-primary' : 'btn-secondary'}`}
              >
                Weekly Challenges ({weeklyQuests.filter(q => !q.is_completed).length})
              </button>
              <button
                onClick={() => setActiveTab('achievements')}
                className={`btn ${activeTab === 'achievements' ? 'btn-primary' : 'btn-secondary'}`}
              >
                Achievements ({achievements.length}/{allAchievements.length})
              </button>
            </div>

            {/* Daily Quests */}
            {activeTab === 'daily' && (
              <div>
                <div className="flex justify-between items-center mb-4">
                  <h2 style={{ fontSize: '24px', fontWeight: 'bold' }}>Daily Quests</h2>
                  <p className="text-gray-400">
                    <Clock className="inline w-4 h-4 mr-2" />
                    Reset in {formatTimeRemaining(dailyQuests[0]?.expires_at || new Date(Date.now() + 86400000).toISOString())}
                  </p>
                </div>
                <div className="grid md:grid-cols-2 gap-4">
                  {dailyQuests.length > 0 ? dailyQuests.map((quest) => (
                    <div 
                      key={quest.active_quest_id} 
                      className={`quest-card ${quest.is_completed ? 'opacity-60' : ''}`}
                    >
                      <div className="flex justify-between items-start mb-4">
                        <div>
                          <h3 style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '8px' }}>
                            {quest.quest_title}
                          </h3>
                          <div className="flex items-center gap-3">
                            <span style={{ 
                              color: getDifficultyColor(quest.difficulty),
                              fontSize: '14px',
                              textTransform: 'uppercase',
                              fontWeight: 'bold'
                            }}>
                              {quest.difficulty}
                            </span>
                            <span className="text-yellow-400">
                              <Zap className="inline w-4 h-4 mr-1" />
                              {quest.base_xp} XP
                            </span>
                            {quest.related_stat && (
                              <span className="text-gray-400" style={{ fontSize: '14px' }}>
                                +{quest.related_stat}
                              </span>
                            )}
                          </div>
                        </div>
                        {quest.is_completed && (
                          <CheckCircle className="text-green-400" size={24} />
                        )}
                      </div>
                      
                      {!quest.is_completed && (
                        <button
                          onClick={() => handleQuestComplete(quest.active_quest_id, 'daily')}
                          className="btn btn-primary w-full"
                        >
                          Complete Quest
                        </button>
                      )}
                    </div>
                  )) : (
                    <div className="text-center col-span-2 py-8">
                      <p className="text-gray-400">No daily quests available.</p>
                      <button 
                        onClick={generateDailyQuests}
                        className="btn btn-primary mt-4"
                      >
                        Generate Daily Quests
                      </button>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Weekly Challenges */}
            {activeTab === 'weekly' && (
              <div>
                <div className="flex justify-between items-center mb-4">
                  <h2 style={{ fontSize: '24px', fontWeight: 'bold' }}>Weekly Challenges</h2>
                  <p className="text-gray-400">
                    <Clock className="inline w-4 h-4 mr-2" />
                    Reset in {formatTimeRemaining(weeklyQuests[0]?.expires_at || new Date(Date.now() + 604800000).toISOString())}
                  </p>
                </div>
                <div className="grid md:grid-cols-2 gap-4">
                  {weeklyQuests.length > 0 ? weeklyQuests.map((quest) => (
                    <div 
                      key={quest.active_quest_id} 
                      className={`quest-card ${quest.is_completed ? 'opacity-60' : ''}`}
                    >
                      <div className="flex justify-between items-start mb-4">
                        <div>
                          <h3 style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '8px' }}>
                            {quest.quest_title}
                          </h3>
                          <div className="flex items-center gap-3">
                            <span style={{ 
                              color: getDifficultyColor(quest.difficulty),
                              fontSize: '14px',
                              textTransform: 'uppercase',
                              fontWeight: 'bold'
                            }}>
                              {quest.difficulty}
                            </span>
                            <span className="text-yellow-400">
                              <Zap className="inline w-4 h-4 mr-1" />
                              {quest.base_xp} XP
                            </span>
                          </div>
                        </div>
                        {quest.is_completed && (
                          <CheckCircle className="text-green-400" size={24} />
                        )}
                      </div>
                      
                      {!quest.is_completed && (
                        <button
                          onClick={() => handleQuestComplete(quest.active_quest_id, 'weekly')}
                          className="btn btn-primary w-full"
                        >
                          Complete Challenge
                        </button>
                      )}
                    </div>
                  )) : (
                    <div className="text-center col-span-2 py-8">
                      <p className="text-gray-400">No weekly challenges available.</p>
                      <button 
                        onClick={generateWeeklyQuests}
                        className="btn btn-primary mt-4"
                      >
                        Generate Weekly Quests
                      </button>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Achievements */}
            {activeTab === 'achievements' && (
              <div>
                <h2 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '16px' }}>Achievements</h2>
                <div className="grid md:grid-cols-3 gap-4">
                  {allAchievements.map((achievement) => (
                    <div 
                      key={achievement.achievement_id} 
                      className={`card text-center ${!achievement.isEarned ? 'opacity-50' : ''}`}
                      style={{
                        position: 'relative',
                        border: achievement.isEarned ? '2px solid #fbbf24' : '2px solid #374151'
                      }}
                    >
                      {!achievement.isEarned && (
                        <div style={{
                          position: 'absolute',
                          top: '50%',
                          left: '50%',
                          transform: 'translate(-50%, -50%)',
                          zIndex: 1
                        }}>
                          <Lock size={32} className="text-gray-600" />
                        </div>
                      )}
                      
                      <div style={{ 
                        fontSize: '48px', 
                        marginBottom: '12px',
                        filter: !achievement.isEarned ? 'grayscale(1)' : 'none'
                      }}>
                        {achievement.achievement_icon || '🏆'}
                      </div>
                      
                      <h3 style={{ 
                        fontWeight: 'bold', 
                        marginBottom: '8px',
                        color: achievement.isEarned ? '#fff' : '#6b7280'
                      }}>
                        {achievement.achievement_name}
                      </h3>
                      
                      <p className="text-gray-400" style={{ fontSize: '14px', marginBottom: '8px' }}>
                        {achievement.achievement_description}
                      </p>
                      
                      {achievement.isEarned && achievement.earned_at && (
                        <p className="text-yellow-400" style={{ fontSize: '12px' }}>
                          <Unlock className="inline w-3 h-3 mr-1" />
                          Earned: {new Date(achievement.earned_at).toLocaleDateString()}
                        </p>
                      )}
                      
                      {!achievement.isEarned && (
                        <p className="text-gray-600" style={{ fontSize: '12px' }}>
                          Locked
                        </p>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Guidance Modal */}
      {showGuidanceModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.9)',
          backdropFilter: 'blur(20px)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 9999,
        }}>
          <div className="glass" style={{
            maxWidth: '800px',
            width: '90%',
            maxHeight: '90vh',
            overflow: 'auto',
            padding: '32px',
            borderRadius: '20px',
            background: 'rgba(0, 0, 0, 0.8)',
            border: '2px solid rgba(147, 51, 234, 0.4)',
          }}>
            <div className="flex justify-between items-center mb-8">
              <h2 style={{
                fontSize: '32px',
                fontWeight: '900',
                background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
              }}>
                Coach Guidance ({receivedGuidance.length})
              </h2>
              <button
                onClick={() => setShowGuidanceModal(false)}
                style={{
                  padding: '8px',
                  background: 'transparent',
                  border: 'none',
                  cursor: 'pointer',
                  color: '#fff',
                  borderRadius: '8px',
                  fontSize: '24px',
                }}
              >
                ✕
              </button>
            </div>

            <div style={{ maxHeight: '60vh', overflow: 'auto' }}>
              {receivedGuidance.length > 0 ? (
                <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                  {receivedGuidance.map((guidance) => (
                    <div
                      key={guidance.feedback_id}
                      style={{
                        padding: '20px',
                        background: guidance.is_read 
                          ? 'rgba(0, 0, 0, 0.4)' 
                          : 'linear-gradient(135deg, rgba(147, 51, 234, 0.3), rgba(236, 72, 153, 0.3))',
                        border: guidance.is_read 
                          ? '1px solid rgba(255, 255, 255, 0.2)' 
                          : '2px solid rgba(147, 51, 234, 0.6)',
                        borderRadius: '16px',
                        cursor: guidance.is_read ? 'default' : 'pointer',
                        transition: 'all 0.3s ease',
                        position: 'relative',
                      }}
                      onClick={() => {
                        if (!guidance.is_read) {
                          markGuidanceAsRead(guidance.feedback_id);
                        }
                      }}
                      onMouseEnter={(e) => {
                        if (!guidance.is_read) {
                          e.currentTarget.style.transform = 'translateY(-2px)';
                          e.currentTarget.style.boxShadow = '0 8px 32px rgba(147, 51, 234, 0.4)';
                        }
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.transform = 'translateY(0)';
                        e.currentTarget.style.boxShadow = 'none';
                      }}
                    >
                      {/* New Message Badge */}
                      {!guidance.is_read && (
                        <div style={{
                          position: 'absolute',
                          top: '-8px',
                          right: '-8px',
                          width: '20px',
                          height: '20px',
                          borderRadius: '50%',
                          background: '#ef4444',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: '12px',
                          fontWeight: 'bold',
                          color: '#fff',
                          animation: 'pulse 2s infinite',
                          zIndex: 1,
                        }}>
                          !
                        </div>
                      )}

                      <div className="flex justify-between items-start mb-4">
                        <div className="flex items-center gap-3">
                          <div style={{
                            width: '50px',
                            height: '50px',
                            borderRadius: '50%',
                            background: 'linear-gradient(135deg, #a855f7, #ec4899)',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            border: '2px solid rgba(147, 51, 234, 0.4)',
                          }}>
                            <User size={24} style={{ color: '#fff' }} />
                          </div>
                          
                          <div>
                            <p style={{ 
                              fontWeight: 'bold', 
                              marginBottom: '4px',
                              fontSize: '18px',
                              color: guidance.is_read ? '#d1d5db' : '#fff'
                            }}>
                              {guidance.coach_name || 'Your Coach'}
                            </p>
                            <p style={{ 
                              fontSize: '12px', 
                              color: '#9ca3af',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '8px'
                            }}>
                              <Clock size={12} />
                              {new Date(guidance.created_at).toLocaleString()}
                            </p>
                          </div>
                        </div>
                        
                        <div className="flex items-center gap-2">
                          {guidance.is_read ? (
                            <div style={{
                              display: 'flex',
                              alignItems: 'center',
                              gap: '4px',
                              color: '#10b981',
                              fontSize: '12px',
                              fontWeight: '600'
                            }}>
                              <Eye size={16} />
                              Read
                            </div>
                          ) : (
                            <div style={{
                              display: 'flex',
                              alignItems: 'center',
                              gap: '4px',
                              color: '#a855f7',
                              fontSize: '12px',
                              fontWeight: '600'
                            }}>
                              <EyeOff size={16} />
                              New
                            </div>
                          )}
                        </div>
                      </div>
                      
                      {/* Message Content */}
                      <div style={{
                        padding: '20px',
                        background: guidance.is_read 
                          ? 'rgba(0, 0, 0, 0.4)' 
                          : 'rgba(147, 51, 234, 0.2)',
                        borderRadius: '12px',
                        borderLeft: `4px solid ${guidance.is_read ? '#6b7280' : '#a855f7'}`,
                        marginBottom: '16px',
                      }}>
                        <p style={{ 
                          lineHeight: '1.7',
                          fontSize: '16px',
                          color: guidance.is_read ? '#d1d5db' : '#fff',
                          margin: 0,
                        }}>
                          {guidance.feedback_text}
                        </p>
                      </div>
                      
                      {/* Footer */}
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        alignItems: 'center',
                        fontSize: '12px'
                      }}>
                        <span style={{
                          padding: '4px 12px',
                          background: guidance.is_read 
                            ? 'rgba(107, 114, 128, 0.3)' 
                            : 'rgba(147, 51, 234, 0.4)',
                          borderRadius: '20px',
                          textTransform: 'capitalize',
                          color: guidance.is_read ? '#9ca3af' : '#e9d5ff',
                          fontWeight: '600'
                        }}>
                          {guidance.feedback_type || 'guidance'}
                        </span>
                        
                        {guidance.rating && (
                          <div style={{ 
                            display: 'flex', 
                            alignItems: 'center', 
                            gap: '4px',
                            color: '#fbbf24'
                          }}>
                            {'★'.repeat(guidance.rating)}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div style={{ textAlign: 'center', padding: '60px 20px' }}>
                  <MessageSquare size={80} style={{ margin: '0 auto 24px', color: '#6b7280', opacity: 0.5 }} />
                  <h3 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '12px', color: '#9ca3af' }}>
                    No Guidance Yet
                  </h3>
                  <p className="text-gray-400" style={{ fontSize: '16px' }}>
                    Your coach hasn't sent any guidance messages yet. Keep up the great work on your quests!
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      <style jsx>{`
        @keyframes pulse {
          0%, 100% { 
            opacity: 1;
            transform: scale(1);
          }
          50% { 
            opacity: 0.7;
            transform: scale(1.05);
          }
        }
        
        @keyframes bounce {
          0%, 100% { 
            transform: translateY(0);
          }
          50% { 
            transform: translateY(-5px);
          }
        }
      `}</style>
    </div>
  );
}
const StreakDisplay = ({ streakDays, longestStreak }: { streakDays: number, longestStreak: number }) => {
  const getStreakColor = (days: number) => {
    if (days >= 30) return 'text-purple-600';
    if (days >= 14) return 'text-blue-600';
    if (days >= 7) return 'text-orange-600';
    if (days >= 3) return 'text-yellow-600';
    return 'text-gray-600';
  };

  const getStreakEmoji = (days: number) => {
    if (days >= 30) return '💎';
    if (days >= 14) return '🔥';
    if (days >= 7) return '⚡';
    if (days >= 3) return '🌟';
    return '✨';
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6 border-l-4 border-orange-500">
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold text-gray-700">Current Streak</h3>
          <div className={`text-3xl font-bold ${getStreakColor(streakDays)}`}>
            {getStreakEmoji(streakDays)} {streakDays} {streakDays === 1 ? 'day' : 'days'}
          </div>
        </div>
        <div className="text-right">
          <p className="text-sm text-gray-500">Personal Best</p>
          <p className="text-xl font-semibold text-gray-700">
            🏆 {longestStreak} {longestStreak === 1 ? 'day' : 'days'}
          </p>
        </div>
      </div>
      
      {/* Streak progress bar */}
      <div className="mt-4">
        <div className="flex justify-between text-xs text-gray-500 mb-1">
          <span>Next milestone</span>
          <span>
            {streakDays >= 30 ? 'Streak Master!' : 
             streakDays >= 14 ? `${30 - streakDays} days to Diamond` :
             streakDays >= 7 ? `${14 - streakDays} days to Fire` :
             `${7 - streakDays} days to Lightning`}
          </span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className={`h-2 rounded-full transition-all duration-300 ${
              streakDays >= 30 ? 'bg-purple-500' :
              streakDays >= 14 ? 'bg-blue-500' :
              streakDays >= 7 ? 'bg-orange-500' :
              'bg-yellow-500'
            }`}
            style={{ 
              width: `${Math.min(100, (streakDays % 7 || streakDays) / 7 * 100)}%`
            }}
          />
        </div>
      </div>
      
      {/* Streak tips */}
      {streakDays === 0 && (
        <div className="mt-3 p-2 bg-yellow-50 border border-yellow-200 rounded text-sm text-yellow-800">
          💡 Complete your first quest today to start your streak!
        </div>
      )}
      {streakDays >= 1 && streakDays < 3 && (
        <div className="mt-3 p-2 bg-blue-50 border border-blue-200 rounded text-sm text-blue-800">
          🚀 Great start! Complete quests daily to build your streak!
        </div>
      )}
    </div>
  );
};

// Replace your coach guidance section in the adventurer dashboard with this improved version

const CoachGuidanceSection = ({ receivedGuidance, markGuidanceAsRead }: any) => {
  return (
    <div style={{ 
      background: 'rgba(0, 0, 0, 0.7)', 
      backdropFilter: 'blur(10px)', 
      borderRadius: '20px', 
      border: '1px solid rgba(147, 51, 234, 0.3)', 
      padding: '32px',
      height: '500px',
      display: 'flex',
      flexDirection: 'column'
    }}>
      {/* Header */}
      <div style={{ 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'space-between', 
        marginBottom: '24px',
        paddingBottom: '16px',
        borderBottom: '1px solid rgba(147, 51, 234, 0.2)'
      }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
          <MessageSquare size={24} style={{ color: '#a855f7' }} />
          <h3 style={{ 
            fontSize: '20px', 
            fontWeight: 'bold', 
            color: '#e9d5ff', 
            margin: 0 
          }}>
            Coach Guidance
          </h3>
        </div>
        {receivedGuidance.length > 0 && (
          <span style={{
            background: 'rgba(147, 51, 234, 0.2)',
            color: '#e9d5ff',
            padding: '4px 12px',
            borderRadius: '12px',
            fontSize: '12px',
            fontWeight: '600'
          }}>
            {receivedGuidance.length} message{receivedGuidance.length !== 1 ? 's' : ''}
          </span>
        )}
      </div>

      {/* Messages */}
      <div style={{ 
        flex: 1, 
        overflowY: 'auto', 
        paddingRight: '8px',
        display: 'flex',
        flexDirection: 'column',
        gap: '16px'
      }}>
        {receivedGuidance.length > 0 ? (
          receivedGuidance.map((guidance: any, index: number) => (
            <div
              key={guidance.feedback_id || index}
              style={{
                background: guidance.is_read 
                  ? 'rgba(75, 85, 99, 0.3)' 
                  : 'rgba(147, 51, 234, 0.15)',
                border: guidance.is_read 
                  ? '1px solid rgba(75, 85, 99, 0.4)' 
                  : '1px solid rgba(147, 51, 234, 0.4)',
                borderRadius: '16px',
                padding: '20px',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                position: 'relative'
              }}
              onClick={() => !guidance.is_read && markGuidanceAsRead(guidance.feedback_id)}
              onMouseEnter={(e) => {
                if (!guidance.is_read) {
                  e.currentTarget.style.background = 'rgba(147, 51, 234, 0.25)';
                  e.currentTarget.style.transform = 'translateY(-2px)';
                }
              }}
              onMouseLeave={(e) => {
                if (!guidance.is_read) {
                  e.currentTarget.style.background = 'rgba(147, 51, 234, 0.15)';
                  e.currentTarget.style.transform = 'translateY(0)';
                }
              }}
            >
              {/* Coach Info Header */}
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: '12px', 
                marginBottom: '12px' 
              }}>
                {/* Coach Profile Photo */}
                <div style={{
                  width: '40px',
                  height: '40px',
                  borderRadius: '50%',
                  background: guidance.coach_photo 
                    ? `url(${guidance.coach_photo})` 
                    : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                  backgroundSize: 'cover',
                  backgroundPosition: 'center',
                  border: '2px solid rgba(147, 51, 234, 0.5)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  color: '#fff',
                  fontWeight: 'bold',
                  fontSize: '14px'
                }}>
                  {!guidance.coach_photo && (guidance.coach_name || guidance.coach_username || 'C').charAt(0).toUpperCase()}
                </div>

                {/* Coach Name and Info */}
                <div style={{ flex: 1 }}>
                  <div style={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: '8px',
                    marginBottom: '4px'
                  }}>
                    <span style={{
                      color: guidance.is_read ? '#9ca3af' : '#e9d5ff',
                      fontWeight: '600',
                      fontSize: '16px'
                    }}>
                      {guidance.coach_name || guidance.coach_username || 'Your Coach'}
                    </span>
                    <Crown size={14} style={{ color: '#fbbf24' }} />
                    <span style={{
                      color: guidance.is_read ? '#6b7280' : '#a855f7',
                      fontSize: '12px',
                      fontWeight: '500'
                    }}>
                      Coach
                    </span>
                  </div>
                  <div style={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: '8px',
                    fontSize: '12px',
                    color: '#9ca3af'
                  }}>
                    <span>{guidance.formatted_date}</span>
                    {!guidance.is_read && (
                      <span style={{
                        background: '#3b82f6',
                        color: 'white',
                        padding: '2px 6px',
                        borderRadius: '8px',
                        fontSize: '10px',
                        fontWeight: '600'
                      }}>
                        NEW
                      </span>
                    )}
                  </div>
                </div>
              </div>

              {/* Message Content */}
              <div style={{
                color: guidance.is_read ? '#d1d5db' : '#f3f4f6',
                fontSize: '14px',
                lineHeight: '1.6',
                marginBottom: '12px',
                padding: '12px',
                background: 'rgba(0, 0, 0, 0.2)',
                borderRadius: '8px',
                borderLeft: '3px solid rgba(147, 51, 234, 0.6)'
              }}>
                {guidance.feedback_text}
              </div>

              {/* Message Footer */}
              <div style={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center',
                fontSize: '12px'
              }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <span style={{
                    background: guidance.is_read 
                      ? 'rgba(107, 114, 128, 0.3)' 
                      : 'rgba(147, 51, 234, 0.4)',
                    padding: '4px 8px',
                    borderRadius: '20px',
                    textTransform: 'capitalize',
                    color: guidance.is_read ? '#9ca3af' : '#e9d5ff',
                    fontWeight: '600'
                  }}>
                    {guidance.feedback_type || 'guidance'}
                  </span>
                  
                  {guidance.rating && (
                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: '4px',
                      color: '#fbbf24'
                    }}>
                      {'★'.repeat(guidance.rating)}
                    </div>
                  )}
                </div>

                {!guidance.is_read && (
                  <div style={{
                    color: '#a855f7',
                    fontSize: '11px',
                    fontWeight: '500',
                    opacity: 0.8
                  }}>
                    Click to mark as read
                  </div>
                )}
              </div>
            </div>
          ))
        ) : (
          // Empty State
          <div style={{ 
            textAlign: 'center', 
            padding: '60px 20px',
            flex: 1,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center'
          }}>
            <div style={{
              width: '80px',
              height: '80px',
              borderRadius: '50%',
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              marginBottom: '24px',
              opacity: 0.5
            }}>
              <MessageSquare size={40} style={{ color: '#fff' }} />
            </div>
            <h3 style={{ 
              fontSize: '24px', 
              fontWeight: 'bold', 
              marginBottom: '12px', 
              color: '#9ca3af' 
            }}>
              No Guidance Yet
            </h3>
            <p style={{ 
              fontSize: '16px',
              color: '#6b7280',
              maxWidth: '300px',
              lineHeight: '1.5'
            }}>
              Your coach hasn't sent any guidance messages yet. Keep up the great work on your quests!
            </p>
            
            {/* Motivational element */}
            <div style={{
              marginTop: '20px',
              padding: '12px 20px',
              background: 'rgba(147, 51, 234, 0.1)',
              border: '1px solid rgba(147, 51, 234, 0.3)',
              borderRadius: '12px',
              color: '#a855f7',
              fontSize: '14px',
              fontWeight: '500'
            }}>
              💡 Complete quests to get your coach's attention!
            </div>
          </div>
        )}
      </div>
    </div>
  );
};





app/dashboard/ProfileSection.tsx
const profileSection = `
export default function ProfileSection({ profile }: { profile: any }) {
  return (
    <div className="glass rounded-2xl p-6">
      <h2 className="text-2xl font-bold mb-4">Character Profile</h2>
      <div className="space-y-3">
        <div className="flex justify-between">
          <span className="text-gray-400">Class</span>
          <span className="font-semibold">{profile.field_of_interest}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Commitment</span>
          <span className="font-semibold">{profile.commitment_level?.replace('_', ' ')}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Experience</span>
          <span className="font-semibold">{profile.experience_level?.replace('_', ' ')}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Longest Streak</span>
          <span className="font-semibold text-yellow-400">{profile.longest_streak || 0} days</span>
        </div>
      </div>
    </div>
  );
}
`;



app/login/page.tsx
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import toast from 'react-hot-toast';
import { login } from '@/lib/auth';
import { Mail, Lock, Eye, EyeOff, Zap, Sword, Crown, ArrowRight } from 'lucide-react';

export default function LoginPage() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [currentBg, setCurrentBg] = useState(0);
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });

  // Solo Leveling backgrounds
  const backgrounds = [
    '/images/backgrounds/solo-leveling-1.jpg',
    '/images/backgrounds/solo-leveling-2.jpg', 
    '/images/backgrounds/solo-leveling-3.jpg',
    '/images/backgrounds/solo-leveling-4.jpg',
  ];

  const quotes = [
    { text: "I alone shall level up!", author: "Sung Jin-Woo" },
    { text: "The system has chosen you.", author: "System" },
    { text: "Arise and become stronger.", author: "Shadow Monarch" },
    { text: "Your journey begins now.", author: "System Message" }
  ];

  const [currentQuote, setCurrentQuote] = useState(quotes[0]); // Start with first quote
  
  // Set random quote after component mounts (client-side only)
  useEffect(() => {
    setCurrentQuote(quotes[Math.floor(Math.random() * quotes.length)]);
  }, []);

  useEffect(() => {
    // Change background every 5 seconds
    const bgTimer = setInterval(() => {
      setCurrentBg((prev) => (prev + 1) % backgrounds.length);
    }, 5000);
    
    return () => clearInterval(bgTimer);
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.email || !formData.password) {
      toast.error('Please fill in all fields');
      return;
    }

    setLoading(true);

    try {
      const response = await login(formData.email, formData.password);
      console.log("User object from backend:", response.user);

      // Show success message with solo leveling theme
      toast.success(
        `🎯 Welcome back, ${response.user.username}! System activated.`,
        { duration: 3000 }
      );
      
      // Redirect based on user type
      setTimeout(() => {
  if (response.user.user_type === 'admin') {
    router.push('/admin');
  } else if (response.user.user_type === 'coach') {
    router.push('/coach');
  } else {
    router.push('/dashboard');
  }
}, 1000);
      
    } catch (error: any) {
      const errorMessage = error.response?.data?.error || 'Login failed';
      toast.error(`❌ ${errorMessage}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ 
      position: 'relative',
      minHeight: '100vh',
      overflow: 'hidden',
      backgroundColor: '#000',
      color: '#fff',
      fontFamily: 'Inter, -apple-system, sans-serif'
    }}>
      {/* Animated Background System */}
      <div style={{ position: 'fixed', inset: 0, zIndex: 0 }}>
        {backgrounds.map((bg, index) => (
          <div
            key={index}
            style={{
              position: 'absolute',
              inset: 0,
              opacity: currentBg === index ? 1 : 0,
              transition: 'opacity 2s ease-in-out',
              transform: `scale(${currentBg === index ? 1.05 : 1.1})`,
            }}
          >
            <div
              style={{
                position: 'absolute',
                inset: 0,
                backgroundImage: `url(${bg})`,
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundRepeat: 'no-repeat',
                filter: 'brightness(0.4) contrast(1.3) saturate(1.1)',
              }}
            />
          </div>
        ))}
        
        {/* Enhanced Gradient Overlays */}
        <div style={{
          position: 'absolute',
          inset: 0,
          background: `
            radial-gradient(circle at 30% 20%, rgba(147, 51, 234, 0.3) 0%, transparent 50%),
            radial-gradient(circle at 70% 80%, rgba(59, 130, 246, 0.3) 0%, transparent 50%),
            linear-gradient(135deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.4) 50%, rgba(0,0,0,0.8) 100%)
          `,
        }} />
        
        {/* Animated Purple Energy */}
        <div style={{
          position: 'absolute',
          top: '10%',
          right: '10%',
          width: '300px',
          height: '300px',
          background: 'radial-gradient(circle, rgba(147, 51, 234, 0.4) 0%, transparent 70%)',
          filter: 'blur(60px)',
          animation: 'pulse 3s ease-in-out infinite',
        }} />
        <div style={{
          position: 'absolute',
          bottom: '10%',
          left: '10%',
          width: '400px',
          height: '400px',
          background: 'radial-gradient(circle, rgba(99, 102, 241, 0.3) 0%, transparent 70%)',
          filter: 'blur(80px)',
          animation: 'pulse 4s ease-in-out infinite 1.5s',
        }} />
      </div>

      {/* Main Content */}
      <div style={{
        position: 'relative',
        zIndex: 10,
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '20px',
      }}>
        <div style={{ width: '100%', maxWidth: '500px' }}>
          {/* System Badge */}
          <div style={{
            textAlign: 'center',
            marginBottom: '32px',
            animation: 'fadeIn 1s ease-out',
          }}>
            <div style={{
              display: 'inline-flex',
              alignItems: 'center',
              gap: '12px',
              padding: '16px 32px',
              background: 'rgba(147, 51, 234, 0.2)',
              backdropFilter: 'blur(20px)',
              borderRadius: '16px',
              border: '1px solid rgba(147, 51, 234, 0.5)',
              marginBottom: '16px',
            }}>
              <Crown size={24} style={{ color: '#a855f7' }} />
              <span style={{ 
                fontSize: '14px', 
                fontWeight: '700', 
                letterSpacing: '2px',
                color: '#e9d5ff',
                textTransform: 'uppercase'
              }}>
                Shadow Monarch System
              </span>
              <Crown size={24} style={{ color: '#a855f7' }} />
            </div>
            
            {/* Inspirational Quote */}
            <div style={{
              padding: '16px 24px',
              background: 'rgba(0, 0, 0, 0.4)',
              backdropFilter: 'blur(10px)',
              borderRadius: '12px',
              border: '1px solid rgba(147, 51, 234, 0.3)',
              marginBottom: '24px',
            }}>
              <p style={{ 
                fontSize: '16px', 
                fontStyle: 'italic',
                color: '#d1d5db',
                marginBottom: '8px',
                lineHeight: '1.4'
              }}>
                "{currentQuote.text}"
              </p>
              <p style={{ 
                fontSize: '12px', 
                color: '#a855f7',
                fontWeight: '600'
              }}>
                — {currentQuote.author}
              </p>
            </div>
          </div>

          {/* Login Form Container */}
          <div style={{
            background: 'rgba(0, 0, 0, 0.6)',
            backdropFilter: 'blur(20px)',
            borderRadius: '24px',
            border: '1px solid rgba(147, 51, 234, 0.4)',
            padding: '48px',
            boxShadow: `
              0 25px 50px rgba(0, 0, 0, 0.5),
              0 0 0 1px rgba(147, 51, 234, 0.1),
              inset 0 1px 0 rgba(255, 255, 255, 0.1)
            `,
            animation: 'slideUp 0.8s ease-out',
          }}>
            {/* Header */}
            <div style={{ textAlign: 'center', marginBottom: '40px' }}>
              <div style={{
                display: 'inline-flex',
                alignItems: 'center',
                justifyContent: 'center',
                width: '80px',
                height: '80px',
                background: 'linear-gradient(135deg, #9333ea 0%, #ec4899 100%)',
                borderRadius: '50%',
                marginBottom: '20px',
                boxShadow: '0 10px 30px rgba(147, 51, 234, 0.5)',
              }}>
                <Sword size={40} style={{ color: '#fff' }} />
              </div>
              
              <h1 style={{
                fontSize: '36px',
                fontWeight: '900',
                marginBottom: '8px',
                fontFamily: 'Orbitron, monospace',
                background: 'linear-gradient(135deg, #a855f7 0%, #3b82f6 100%)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                textShadow: '0 0 30px rgba(147, 51, 234, 0.5)',
                letterSpacing: '2px',
                textTransform: 'uppercase',
              }}>
                Player Login
              </h1>
              
              <p style={{ 
                color: '#9ca3af', 
                fontSize: '16px',
                fontWeight: '300'
              }}>
                Access the Hunter's System
              </p>
            </div>

            {/* Login Form */}
            <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
              {/* Email Field */}
              <div>
                <label style={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  gap: '8px', 
                  marginBottom: '8px', 
                  fontSize: '14px', 
                  color: '#e9d5ff',
                  fontWeight: '600',
                  textTransform: 'uppercase',
                  letterSpacing: '1px'
                }}>
                  <Mail size={18} />
                  Hunter ID (Email)
                </label>
                <input
                  type="email"
                  required
                  style={{
                    width: '100%',
                    padding: '16px 20px',
                    background: 'rgba(0, 0, 0, 0.5)',
                    border: '2px solid rgba(147, 51, 234, 0.3)',
                    borderRadius: '12px',
                    color: '#fff',
                    fontSize: '16px',
                    transition: 'all 0.3s ease',
                    outline: 'none',
                  }}
                  value={formData.email}
                  onChange={(e) => setFormData({...formData, email: e.target.value})}
                  placeholder="hunter@system.com"
                  onFocus={(e) => {
                    e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.8)';
                    e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                    e.currentTarget.style.boxShadow = '0 0 20px rgba(147, 51, 234, 0.3)';
                  }}
                  onBlur={(e) => {
                    e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                    e.currentTarget.style.background = 'rgba(0, 0, 0, 0.5)';
                    e.currentTarget.style.boxShadow = 'none';
                  }}
                />
              </div>

              {/* Password Field */}
              <div>
                <label style={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  gap: '8px', 
                  marginBottom: '8px', 
                  fontSize: '14px', 
                  color: '#e9d5ff',
                  fontWeight: '600',
                  textTransform: 'uppercase',
                  letterSpacing: '1px'
                }}>
                  <Lock size={18} />
                  Access Code
                </label>
                <div style={{ position: 'relative' }}>
                  <input
                    type={showPassword ? 'text' : 'password'}
                    required
                    style={{
                      width: '100%',
                      padding: '16px 50px 16px 20px',
                      background: 'rgba(0, 0, 0, 0.5)',
                      border: '2px solid rgba(147, 51, 234, 0.3)',
                      borderRadius: '12px',
                      color: '#fff',
                      fontSize: '16px',
                      transition: 'all 0.3s ease',
                      outline: 'none',
                    }}
                    value={formData.password}
                    onChange={(e) => setFormData({...formData, password: e.target.value})}
                    placeholder="••••••••••••"
                    onFocus={(e) => {
                      e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.8)';
                      e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                      e.currentTarget.style.boxShadow = '0 0 20px rgba(147, 51, 234, 0.3)';
                    }}
                    onBlur={(e) => {
                      e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                      e.currentTarget.style.background = 'rgba(0, 0, 0, 0.5)';
                      e.currentTarget.style.boxShadow = 'none';
                    }}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    style={{
                      position: 'absolute',
                      right: '16px',
                      top: '50%',
                      transform: 'translateY(-50%)',
                      background: 'transparent',
                      border: 'none',
                      color: '#9ca3af',
                      cursor: 'pointer',
                      padding: '4px',
                      transition: 'color 0.3s ease',
                    }}
                    onMouseEnter={(e) => e.currentTarget.style.color = '#a855f7'}
                    onMouseLeave={(e) => e.currentTarget.style.color = '#9ca3af'}
                  >
                    {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                </div>
              </div>

              {/* Login Button */}
              <button
                type="submit"
                disabled={loading}
                style={{
                  width: '100%',
                  padding: '18px',
                  background: loading 
                    ? 'linear-gradient(135deg, #6b7280, #9ca3af)'
                    : 'linear-gradient(135deg, #9333ea 0%, #ec4899 50%, #3b82f6 100%)',
                  backgroundSize: '200% auto',
                  border: 'none',
                  borderRadius: '12px',
                  color: '#fff',
                  fontSize: '16px',
                  fontWeight: '700',
                  letterSpacing: '1px',
                  textTransform: 'uppercase',
                  cursor: loading ? 'not-allowed' : 'pointer',
                  transition: 'all 0.3s ease',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '12px',
                  boxShadow: '0 8px 25px rgba(147, 51, 234, 0.4)',
                  animation: !loading ? 'gradientShift 3s ease infinite' : 'none',
                }}
                onMouseEnter={(e) => {
                  if (!loading) {
                    e.currentTarget.style.transform = 'translateY(-2px) scale(1.02)';
                    e.currentTarget.style.boxShadow = '0 12px 35px rgba(147, 51, 234, 0.6)';
                  }
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0) scale(1)';
                  e.currentTarget.style.boxShadow = '0 8px 25px rgba(147, 51, 234, 0.4)';
                }}
              >
                {loading ? (
                  <>
                    <div style={{
                      width: '20px',
                      height: '20px',
                      border: '2px solid #fff',
                      borderTopColor: 'transparent',
                      borderRadius: '50%',
                      animation: 'spin 1s linear infinite',
                    }} />
                    Authenticating...
                  </>
                ) : (
                  <>
                    <Zap size={20} />
                    Enter System
                    <ArrowRight size={20} />
                  </>
                )}
              </button>
            </form>

            {/* Demo Credentials */}
<div style={{
  marginTop: '32px',
  padding: '20px',
  background: 'rgba(147, 51, 234, 0.1)',
  backdropFilter: 'blur(10px)',
  borderRadius: '12px',
  border: '1px solid rgba(147, 51, 234, 0.3)',
}}>
  <p style={{ 
    fontSize: '12px', 
    color: '#a855f7', 
    marginBottom: '12px',
    fontWeight: '600',
    textTransform: 'uppercase',
    letterSpacing: '1px'
  }}>
    🎮 Demo Hunter Accounts
  </p>
  <div style={{ fontSize: '14px', color: '#d1d5db', lineHeight: '1.6' }}>
    <p><strong>Adventurer:</strong> test@example.com / password123</p>
    <p><strong>Coach:</strong> coach@example.com / password123</p>
    <p><strong>Admin:</strong> admin@sololeveling.com / Admin@123456</p>
  </div>
</div>

            {/* Sign Up Link */}
            <div style={{ textAlign: 'center', marginTop: '32px' }}>
              <p style={{ color: '#9ca3af', marginBottom: '16px' }}>
                Not registered with the System?
              </p>
              <Link 
                href="/signup"
                style={{ 
                  textDecoration: 'none',
                  display: 'inline-flex',
                  alignItems: 'center',
                  gap: '8px',
                  color: '#a855f7',
                  fontWeight: '600',
                  fontSize: '16px',
                  transition: 'all 0.3s ease',
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.color = '#c084fc';
                  e.currentTarget.style.transform = 'translateY(-1px)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.color = '#a855f7';
                  e.currentTarget.style.transform = 'translateY(0)';
                }}
              >
                <Sword size={18} />
                Create Hunter Profile
              </Link>
            </div>
          </div>
        </div>
      </div>

      {/* Animations */}
      <style jsx>{`
        @keyframes pulse {
          0%, 100% { opacity: 0.3; transform: scale(1); }
          50% { opacity: 0.6; transform: scale(1.1); }
        }
        
        @keyframes gradientShift {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
        
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
        
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideUp {
          from { opacity: 0; transform: translateY(40px) scale(0.95); }
          to { opacity: 1; transform: translateY(0) scale(1); }
        }
      `}</style>
    </div>
  );
}



app/signup/page.tsx
'use client';
import { useState, useRef, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import toast from 'react-hot-toast';
import { signup } from '@/lib/auth';
import { Upload, User, Mail, Lock, Target, Clock, Star, Camera, X, ArrowLeft, ArrowRight, Sword, Shield } from 'lucide-react';

const fields = [
  'Elite Athlete', 
  'Academic Excellence', 
  'Physical Fitness', 
  'Professional Growth',
  'Creative Mastery', 
  'Mental Wellness', 
  'Programming Skills', 
  'Language Learning',
  'Music Production', 
  'Content Creation', 
  'Writing & Literature', 
  'Business & Entrepreneurship',
  'Martial Arts', 
  'Cooking & Nutrition', 
  'Public Speaking', 
  'Digital Art & Design',
  'Photography', 
  'Gaming & Esports', 
  'Meditation & Mindfulness', 
  'Social Skills',
  'Financial Literacy', 
  'Scientific Research', 
  'Dance & Movement', 
  'Chess & Strategy',
  'Custom Goal'
];

export default function SignupPage() {
  const router = useRouter();
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [profileImage, setProfileImage] = useState<File | null>(null);
  const [profileImagePreview, setProfileImagePreview] = useState<string | null>(null);
  const [currentBg, setCurrentBg] = useState(0);
  
  // Form refs for Enter key navigation
  const emailRef = useRef<HTMLInputElement>(null);
  const usernameRef = useRef<HTMLInputElement>(null);
  const passwordRef = useRef<HTMLInputElement>(null);
  const confirmPasswordRef = useRef<HTMLInputElement>(null);
  const fullNameRef = useRef<HTMLInputElement>(null);
  const fieldRef = useRef<HTMLSelectElement>(null);
  
  const [formData, setFormData] = useState({
    email: '',
    username: '',
    password: '',
    confirmPassword: '',
    user_type: 'adventurer',
    full_name: '',
    field_of_interest: '',
    commitment_level: '1_hour',
    experience_level: 'beginner'
  });

const [passwordChecks, setPasswordChecks] = useState({
  length: false,
  uppercase: false,
  lowercase: false,
  number: false,
  specialChar: false
});
const validatePasswordStrength = (password: string) => {
  const checks = {
    length: password.length >= 6,
    uppercase: /[A-Z]/.test(password),
    lowercase: /[a-z]/.test(password),
    number: /[0-9]/.test(password),
    specialChar: (password.match(/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/g) || []).length === 1
  };
  
  return checks;
};
const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const newPassword = e.target.value;
  setFormData({...formData, password: newPassword});
  setPasswordChecks(validatePasswordStrength(newPassword));
};

  // Solo Leveling backgrounds
  const backgrounds = [
    '/images/backgrounds/solo-leveling-1.jpg',
    '/images/backgrounds/solo-leveling-2.jpg',
    '/images/backgrounds/solo-leveling-3.jpg',
    '/images/backgrounds/solo-leveling-4.jpg',
  ];

  useEffect(() => {
    const bgTimer = setInterval(() => {
      setCurrentBg((prev) => (prev + 1) % backgrounds.length);
    }, 5000);
    
    return () => clearInterval(bgTimer);
  }, []);

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        toast.error('Image size should be less than 5MB');
        return;
      }
      
      setProfileImage(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setProfileImagePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const removeImage = () => {
    setProfileImage(null);
    setProfileImagePreview(null);
  };

  const handleKeyPress = (e: React.KeyboardEvent, nextRef?: React.RefObject<any>) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      if (nextRef && nextRef.current) {
        nextRef.current.focus();
      } else {
        // Only advance step, don't submit
        handleNextStep();
      }
    }
  };

  const validateStep = (stepNumber: number) => {
    if (stepNumber === 1) {
      if (!formData.email || !formData.username || !formData.password || !formData.confirmPassword) {
        toast.error('Please fill all required fields');
        return false;
      }
      if (!formData.email.includes('@')) {
        toast.error('Please enter a valid email');
        return false;
      }

      const checks = validatePasswordStrength(formData.password);
    if (!checks.length) {
      toast.error('Password must be at least 6 characters');
      return false;
    }
    if (!checks.uppercase) {
      toast.error('Password must contain at least one uppercase letter');
      return false;
    }
    if (!checks.lowercase) {
      toast.error('Password must contain at least one lowercase letter');
      return false;
    }
    if (!checks.number) {
      toast.error('Password must contain at least one number');
      return false;
    }
    if (!checks.specialChar) {
      toast.error('Password must contain exactly one special character');
      return false;
    }
    
    if (formData.password !== formData.confirmPassword) {
      toast.error('Passwords do not match!');
      return false;
    }
    return true;
    } else if (stepNumber === 2) {
      if (!formData.full_name || !formData.field_of_interest) {
        toast.error('Please complete your profile');
        return false;
      }
      return true;
    } else if (stepNumber === 3) {
      if (formData.user_type === 'adventurer') {
        if (!formData.commitment_level || !formData.experience_level) {
          toast.error('Please select your commitment and experience level');
          return false;
        }
      }
      return true;
    }
    return true;
  };

  const handleNextStep = () => {
    console.log('handleNextStep called, current step:', step, 'user_type:', formData.user_type);
    
    if (step === 1 && validateStep(1)) {
      console.log('Moving from step 1 to step 2');
      setStep(2);
    } else if (step === 2 && validateStep(2)) {
      if (formData.user_type === 'adventurer') {
        console.log('Moving from step 2 to step 3 (adventurer)');
        setStep(3);
      } else {
        console.log('Coach signup, submitting from step 2');
        handleSubmit();
      }
    }
  };

  const handlePrevStep = () => {
    if (step > 1) {
      setStep(step - 1);
    }
  };

  const handleSubmit = async () => {
    console.log('handleSubmit called, step:', step, 'user_type:', formData.user_type);
    
    // Final validation
    if (!validateStep(1) || !validateStep(2)) {
      return;
    }

    // For adventurers, ensure we're on step 3 and step 3 is validated
    if (formData.user_type === 'adventurer') {
      if (step !== 3) {
        console.log('Adventurer not on step 3, not submitting');
        return;
      }
      if (!validateStep(3)) {
        return;
      }
    }

    setLoading(true);
    
    try {
      const submitData = new FormData();
      
      // Add all form fields except confirmPassword
      Object.entries(formData).forEach(([key, value]) => {
        if (key !== 'confirmPassword') {
          submitData.append(key, value);
        }
      });
      
      // Add profile photo if exists
      if (profileImage) {
        submitData.append('profile_photo', profileImage);
      }

      await signup(submitData);
      toast.success('🎉 Character created successfully! Welcome to Solo Leveling!');
      router.push('/dashboard');
    } catch (error: any) {
      console.error('Signup error:', error);
      toast.error(error.response?.data?.error || 'Failed to create account. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const isOnFinalStep = () => {
    return (formData.user_type === 'adventurer' && step === 3) || 
           (formData.user_type === 'coach' && step === 2);
  };

  const canGoToNextStep = () => {
    return (formData.user_type === 'adventurer' && step < 3) || 
           (formData.user_type === 'coach' && step < 2);
  };

  return (
    <div style={{ 
      position: 'relative',
      minHeight: '100vh',
      overflow: 'hidden',
      backgroundColor: '#000',
      color: '#fff',
      fontFamily: 'Inter, -apple-system, sans-serif'
    }}>
      {/* Animated Background System (Same as landing page) */}
      <div style={{ position: 'fixed', inset: 0, zIndex: 0 }}>
        {backgrounds.map((bg, index) => (
          <div
            key={index}
            style={{
              position: 'absolute',
              inset: 0,
              opacity: currentBg === index ? 1 : 0,
              transition: 'opacity 2s ease-in-out',
              transform: `scale(${currentBg === index ? 1 : 1.1})`,
            }}
          >
            <div
              style={{
                position: 'absolute',
                inset: 0,
                backgroundImage: `url(${bg})`,
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundRepeat: 'no-repeat',
                filter: 'brightness(0.5) contrast(1.2) saturate(1.2)',
                transform: `scale(1.1)`,
              }}
            />
          </div>
        ))}
        
        {/* Gradient Overlays */}
        <div style={{
          position: 'absolute',
          inset: 0,
          background: 'linear-gradient(to bottom, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0.5) 50%, rgba(0,0,0,0.8) 100%)',
        }} />
        
        {/* Purple Glow Effects */}
        <div style={{
          position: 'absolute',
          top: '20%',
          left: '20%',
          width: '400px',
          height: '400px',
          background: 'radial-gradient(circle, rgba(147, 51, 234, 0.3) 0%, transparent 70%)',
          filter: 'blur(100px)',
          animation: 'pulse 4s ease-in-out infinite',
        }} />
        <div style={{
          position: 'absolute',
          bottom: '20%',
          right: '20%',
          width: '400px',
          height: '400px',
          background: 'radial-gradient(circle, rgba(59, 130, 246, 0.3) 0%, transparent 70%)',
          filter: 'blur(100px)',
          animation: 'pulse 4s ease-in-out infinite 2s',
        }} />
      </div>

      {/* Main Content */}
      <div style={{
        position: 'relative',
        zIndex: 10,
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '20px',
      }}>
        <div style={{
          width: '100%',
          maxWidth: '600px',
        }}>
          {/* Glass Container */}
          <div style={{
            background: 'rgba(0, 0, 0, 0.5)',
            backdropFilter: 'blur(20px)',
            borderRadius: '24px',
            border: '1px solid rgba(147, 51, 234, 0.3)',
            padding: '48px',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)',
          }}>
            {/* Header */}
            <div style={{ textAlign: 'center', marginBottom: '32px' }}>
              <h1 style={{
                fontSize: '48px',
                fontWeight: '900',
                marginBottom: '8px',
                fontFamily: 'Orbitron, monospace',
                background: 'linear-gradient(to right, #a855f7, #ec4899)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                textShadow: '0 0 40px rgba(168, 85, 247, 0.5)',
              }}>
                CREATE CHARACTER
              </h1>
              <p style={{ color: '#9ca3af' }}>Step {step} of {formData.user_type === 'coach' ? '2' : '3'}</p>
              
              {/* Progress bar */}
              <div style={{
                width: '100%',
                height: '8px',
                background: 'rgba(147, 51, 234, 0.2)',
                borderRadius: '4px',
                marginTop: '16px',
                overflow: 'hidden',
              }}>
                <div style={{
                  height: '100%',
                  background: 'linear-gradient(90deg, #a855f7, #ec4899)',
                  width: `${(step / (formData.user_type === 'coach' ? 2 : 3)) * 100}%`,
                  transition: 'width 0.3s ease',
                  boxShadow: '0 0 10px rgba(168, 85, 247, 0.5)',
                }} />
              </div>
            </div>

            {/* Form Content - NO form tag here, just div */}
            <div>
              {step === 1 && (
                <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
                  {/* Email */}
                  <div>
                    <label style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px', fontSize: '14px', color: '#e9d5ff' }}>
                      <Mail size={18} />
                      Email Address
                    </label>
                    <input
                      ref={emailRef}
                      type="email"
                      required
                      style={{
                        width: '100%',
                        padding: '14px 20px',
                        background: 'rgba(0, 0, 0, 0.4)',
                        border: '2px solid rgba(147, 51, 234, 0.3)',
                        borderRadius: '12px',
                        color: '#fff',
                        fontSize: '16px',
                        transition: 'all 0.3s ease',
                      }}
                      value={formData.email}
                      onChange={(e) => setFormData({...formData, email: e.target.value})}
                      onKeyPress={(e) => handleKeyPress(e, usernameRef)}
                      placeholder="hunter@example.com"
                      onFocus={(e) => {
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
                        e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                      }}
                      onBlur={(e) => {
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                        e.currentTarget.style.background = 'rgba(0, 0, 0, 0.4)';
                      }}
                    />
                  </div>

                  {/* Username */}
                  <div>
                    <label style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px', fontSize: '14px', color: '#e9d5ff' }}>
                      <User size={18} />
                      Username
                    </label>
                    <input
                      ref={usernameRef}
                      type="text"
                      required
                      style={{
                        width: '100%',
                        padding: '14px 20px',
                        background: 'rgba(0, 0, 0, 0.4)',
                        border: '2px solid rgba(147, 51, 234, 0.3)',
                        borderRadius: '12px',
                        color: '#fff',
                        fontSize: '16px',
                        transition: 'all 0.3s ease',
                      }}
                      value={formData.username}
                      onChange={(e) => setFormData({...formData, username: e.target.value})}
                      onKeyPress={(e) => handleKeyPress(e, passwordRef)}
                      placeholder="ShadowMonarch"
                      onFocus={(e) => {
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
                        e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                      }}
                      onBlur={(e) => {
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                        e.currentTarget.style.background = 'rgba(0, 0, 0, 0.4)';
                      }}
                    />
                  </div>

                  {/* Password */}
                  <div>
                    <label style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px', fontSize: '14px', color: '#e9d5ff' }}>
    <Lock size={18} />
    Password
  </label>
  <input
    ref={passwordRef}
    type="password"
    required
    style={{
      width: '100%',
      padding: '14px 20px',
      background: 'rgba(0, 0, 0, 0.4)',
      border: '2px solid rgba(147, 51, 234, 0.3)',
      borderRadius: '12px',
      color: '#fff',
      fontSize: '16px',
      transition: 'all 0.3s ease',
    }}
    value={formData.password}
    onChange={handlePasswordChange}  // CHANGED: Use new handler
    onKeyPress={(e) => handleKeyPress(e, confirmPasswordRef)}
    placeholder="••••••••"
    onFocus={(e) => {
      e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
      e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
    }}
    onBlur={(e) => {
      e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
      e.currentTarget.style.background = 'rgba(0, 0, 0, 0.4)';
                      }}
                    />
                    {/* Password Strength Indicator */}
  {formData.password && (
    <div style={{
      marginTop: '12px',
      padding: '12px',
      background: 'rgba(0, 0, 0, 0.3)',
      borderRadius: '8px',
      border: '1px solid rgba(147, 51, 234, 0.2)'
    }}>
      <p style={{ 
        fontSize: '12px', 
        color: '#a855f7', 
        marginBottom: '8px',
        fontWeight: '600'
      }}>
        Password Requirements:
      </p>
      <div style={{ fontSize: '12px', display: 'flex', flexDirection: 'column', gap: '4px' }}>
        <div style={{ 
          color: passwordChecks.length ? '#10b981' : '#6b7280',
          display: 'flex',
          alignItems: 'center',
          gap: '6px'
        }}>
          <span>{passwordChecks.length ? '✓' : '○'}</span>
          <span>At least 6 characters</span>
        </div>
        <div style={{ 
          color: passwordChecks.uppercase ? '#10b981' : '#6b7280',
          display: 'flex',
          alignItems: 'center',
          gap: '6px'
        }}>
          <span>{passwordChecks.uppercase ? '✓' : '○'}</span>
          <span>One uppercase letter (A-Z)</span>
        </div>
        <div style={{ 
          color: passwordChecks.lowercase ? '#10b981' : '#6b7280',
          display: 'flex',
          alignItems: 'center',
          gap: '6px'
        }}>
          <span>{passwordChecks.lowercase ? '✓' : '○'}</span>
          <span>One lowercase letter (a-z)</span>
        </div>
        <div style={{ 
          color: passwordChecks.number ? '#10b981' : '#6b7280',
          display: 'flex',
          alignItems: 'center',
          gap: '6px'
        }}>
          <span>{passwordChecks.number ? '✓' : '○'}</span>
          <span>One number (0-9)</span>
        </div>
        <div style={{ 
          color: passwordChecks.specialChar ? '#10b981' : '#6b7280',
          display: 'flex',
          alignItems: 'center',
          gap: '6px'
        }}>
          <span>{passwordChecks.specialChar ? '✓' : '○'}</span>
          <span>Exactly one special character (@, #, $, etc.)</span>
        </div>
      </div>
    </div>
  )}
                  </div>
                  {/* Confirm Password */}
                  <div>
                    <label style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px', fontSize: '14px', color: '#e9d5ff' }}>
                      <Lock size={18} />
                      Confirm Password
                    </label>
                    <input
                      ref={confirmPasswordRef}
                      type="password"
                      required
                      style={{
                        width: '100%',
                        padding: '14px 20px',
                        background: 'rgba(0, 0, 0, 0.4)',
                        border: '2px solid rgba(147, 51, 234, 0.3)',
                        borderRadius: '12px',
                        color: '#fff',
                        fontSize: '16px',
                        transition: 'all 0.3s ease',
                      }}
                      value={formData.confirmPassword}
                      onChange={(e) => setFormData({...formData, confirmPassword: e.target.value})}
                      onKeyPress={(e) => handleKeyPress(e)}
                      placeholder="••••••••"
                      onFocus={(e) => {
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
                        e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                      }}
                      onBlur={(e) => {
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                        e.currentTarget.style.background = 'rgba(0, 0, 0, 0.4)';
                      }}
                    />
                  </div>

                  {/* Character Type */}
                  <div>
                    <label style={{ marginBottom: '12px', display: 'block', fontSize: '14px', color: '#e9d5ff' }}>
                      Character Type
                    </label>
                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
                      <button
                        type="button"
                        onClick={() => setFormData({...formData, user_type: 'adventurer'})}
                        style={{
                          padding: '20px',
                          background: formData.user_type === 'adventurer' 
                            ? 'linear-gradient(135deg, rgba(147, 51, 234, 0.3), rgba(236, 72, 153, 0.3))'
                            : 'rgba(0, 0, 0, 0.4)',
                          border: `2px solid ${formData.user_type === 'adventurer' ? 'rgba(147, 51, 234, 0.6)' : 'rgba(147, 51, 234, 0.2)'}`,
                          borderRadius: '16px',
                          cursor: 'pointer',
                          transition: 'all 0.3s ease',
                          textAlign: 'center',
                        }}
                      >
                        <Sword size={32} style={{ margin: '0 auto 8px', color: '#a855f7' }} />
                        <div style={{ fontWeight: '700', marginBottom: '4px' }}>Adventurer</div>
                        <div style={{ fontSize: '12px', color: '#9ca3af' }}>Level up yourself</div>
                      </button>
                      
                      <button
                        type="button"
                        onClick={() => setFormData({...formData, user_type: 'coach'})}
                        style={{
                          padding: '20px',
                          background: formData.user_type === 'coach' 
                            ? 'linear-gradient(135deg, rgba(147, 51, 234, 0.3), rgba(236, 72, 153, 0.3))'
                            : 'rgba(0, 0, 0, 0.4)',
                          border: `2px solid ${formData.user_type === 'coach' ? 'rgba(147, 51, 234, 0.6)' : 'rgba(147, 51, 234, 0.2)'}`,
                          borderRadius: '16px',
                          cursor: 'pointer',
                          transition: 'all 0.3s ease',
                          textAlign: 'center',
                        }}
                      >
                        <Shield size={32} style={{ margin: '0 auto 8px', color: '#ec4899' }} />
                        <div style={{ fontWeight: '700', marginBottom: '4px' }}>Coach</div>
                        <div style={{ fontSize: '12px', color: '#9ca3af' }}>Guide others</div>
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {step === 2 && (
                <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
                  {/* Profile Photo Upload */}
                  <div style={{ textAlign: 'center' }}>
                    <div style={{ 
                      width: '150px',
                      height: '150px',
                      margin: '0 auto',
                      position: 'relative'
                    }}>
                      {profileImagePreview ? (
                        <>
                          <img 
                            src={profileImagePreview} 
                            alt="Profile" 
                            style={{
                              width: '100%',
                              height: '100%',
                              borderRadius: '50%',
                              objectFit: 'cover',
                              border: '3px solid rgba(147, 51, 234, 0.5)',
                            }}
                          />
                          <button
                            type="button"
                            onClick={removeImage}
                            style={{
                              position: 'absolute',
                              top: '0',
                              right: '0',
                              width: '40px',
                              height: '40px',
                              borderRadius: '50%',
                              background: 'linear-gradient(135deg, #f5576c 0%, #f093fb 100%)',
                              border: '2px solid #000',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              cursor: 'pointer',
                            }}
                          >
                            <X size={20} />
                          </button>
                        </>
                      ) : (
                        <>
                          <div style={{
                            width: '100%',
                            height: '100%',
                            borderRadius: '50%',
                            background: 'linear-gradient(135deg, rgba(147, 51, 234, 0.2), rgba(236, 72, 153, 0.2))',
                            border: '2px dashed rgba(147, 51, 234, 0.4)',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                          }}>
                            <User size={60} style={{ color: '#6b7280' }} />
                          </div>
                          <label style={{
                            position: 'absolute',
                            bottom: '0',
                            right: '0',
                            width: '48px',
                            height: '48px',
                            borderRadius: '50%',
                            background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                            border: '3px solid #000',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            cursor: 'pointer',
                          }}>
                            <Camera size={24} />
                            <input
                              type="file"
                              accept="image/*"
                              onChange={handleImageUpload}
                              style={{ display: 'none' }}
                            />
                          </label>
                        </>
                      )}
                    </div>
                    <p style={{ fontSize: '14px', color: '#9ca3af', marginTop: '12px' }}>
                      {profileImage ? 'Click X to remove' : 'Click camera to upload (optional)'}
                    </p>
                  </div>

                  {/* Full Name */}
                  <div>
                    <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', color: '#e9d5ff' }}>
                      Full Name
                    </label>
                    <input
                      ref={fullNameRef}
                      type="text"
                      required
                      style={{
                        width: '100%',
                        padding: '14px 20px',
                        background: 'rgba(0, 0, 0, 0.4)',
                        border: '2px solid rgba(147, 51, 234, 0.3)',
                        borderRadius: '12px',
                        color: '#fff',
                        fontSize: '16px',
                        transition: 'all 0.3s ease',
                      }}
                      value={formData.full_name}
                      onChange={(e) => setFormData({...formData, full_name: e.target.value})}
                      onKeyPress={(e) => handleKeyPress(e, fieldRef)}
                      placeholder="Sung Jin-Woo"
                      onFocus={(e) => {
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
                        e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                      }}
                      onBlur={(e) => {
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                        e.currentTarget.style.background = 'rgba(0, 0, 0, 0.4)';
                      }}
                    />
                  </div>

                  {/* Field of Interest */}
                  <div>
                    <label style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px', fontSize: '14px', color: '#e9d5ff' }}>
                      <Target size={18} />
                      Field of Interest
                    </label>
                    <select
                      ref={fieldRef}
                      required
                      style={{
                        width: '100%',
                        padding: '14px 20px',
                        background: 'rgba(0, 0, 0, 0.4)',
                        border: '2px solid rgba(147, 51, 234, 0.3)',
                        borderRadius: '12px',
                        color: '#fff',
                        fontSize: '16px',
                        transition: 'all 0.3s ease',
                        cursor: 'pointer',
                      }}
                      value={formData.field_of_interest}
                      onChange={(e) => setFormData({...formData, field_of_interest: e.target.value})}
                      onKeyPress={(e) => handleKeyPress(e)}
                      onFocus={(e) => {
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
                        e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                      }}
                      onBlur={(e) => {
                        e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                        e.currentTarget.style.background = 'rgba(0, 0, 0, 0.4)';
                      }}
                    >
                      <option value="">Select your quest path</option>
                      {fields.map(field => (
                        <option key={field} value={field} style={{ background: '#1f2937' }}>
                          {field}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}

              {step === 3 && formData.user_type === 'adventurer' && (
                <div style={{ display: 'flex', flexDirection: 'column', gap: '32px' }}>
                  <div style={{ textAlign: 'center', marginBottom: '16px' }}>
                    <h3 style={{ fontSize: '24px', fontWeight: 'bold', color: '#a855f7', marginBottom: '8px' }}>
                      Customize Your Journey
                    </h3>
                    <p style={{ color: '#9ca3af' }}>
                      Choose your commitment level and experience to get personalized quests
                    </p>
                  </div>

                  {/* Daily Commitment */}
                  <div>
                    <label style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '16px', fontSize: '14px', color: '#e9d5ff' }}>
                      <Clock size={18} />
                      Daily Commitment
                    </label>
                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>
                      {['30_minutes', '1_hour', '2_hours', '3_plus_hours'].map(level => (
                        <button
                          key={level}
                          type="button"
                          onClick={() => setFormData({...formData, commitment_level: level})}
                          style={{
                            padding: '16px',
                            background: formData.commitment_level === level 
                              ? 'linear-gradient(135deg, rgba(147, 51, 234, 0.3), rgba(236, 72, 153, 0.3))'
                              : 'rgba(0, 0, 0, 0.4)',
                            border: `2px solid ${formData.commitment_level === level ? 'rgba(147, 51, 234, 0.6)' : 'rgba(147, 51, 234, 0.2)'}`,
                            borderRadius: '12px',
                            cursor: 'pointer',
                            transition: 'all 0.3s ease',
                            color: '#fff',
                            fontWeight: formData.commitment_level === level ? '600' : '400',
                          }}
                        >
                          {level.replace(/_/g, ' ').replace('plus', '+')}
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Experience Level */}
                  <div>
                    <label style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '16px', fontSize: '14px', color: '#e9d5ff' }}>
                      <Star size={18} />
                      Experience Level
                    </label>
                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>
                      {['beginner', 'some_experience', 'intermediate', 'advanced'].map(level => (
                        <button
                          key={level}
                          type="button"
                          onClick={() => setFormData({...formData, experience_level: level})}
                          style={{
                            padding: '16px',
                            background: formData.experience_level === level 
                              ? 'linear-gradient(135deg, rgba(147, 51, 234, 0.3), rgba(236, 72, 153, 0.3))'
                              : 'rgba(0, 0, 0, 0.4)',
                            border: `2px solid ${formData.experience_level === level ? 'rgba(147, 51, 234, 0.6)' : 'rgba(147, 51, 234, 0.2)'}`,
                            borderRadius: '12px',
                            cursor: 'pointer',
                            transition: 'all 0.3s ease',
                            color: '#fff',
                            fontWeight: formData.experience_level === level ? '600' : '400',
                          }}
                        >
                          {level.replace(/_/g, ' ')}
                        </button>
                      ))}
                    </div>
                  </div>
                </div>
              )}

              {/* Action Buttons */}
              <div style={{ display: 'flex', gap: '16px', marginTop: '32px' }}>
                {step > 1 && (
                  <button
                    type="button"
                    onClick={handlePrevStep}
                    style={{
                      flex: 1,
                      padding: '16px',
                      background: 'rgba(255, 255, 255, 0.1)',
                      backdropFilter: 'blur(10px)',
                      border: '2px solid rgba(255, 255, 255, 0.2)',
                      borderRadius: '12px',
                      color: '#fff',
                      fontSize: '16px',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '8px',
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = 'rgba(255, 255, 255, 0.2)';
                      e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.4)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = 'rgba(255, 255, 255, 0.1)';
                      e.currentTarget.style.borderColor = 'rgba(255, 255, 255, 0.2)';
                    }}
                  >
                    <ArrowLeft size={20} />
                    Previous
                  </button>
                )}
                
                {canGoToNextStep() ? (
                  <button
                    type="button"
                    onClick={handleNextStep}
                    style={{
                      flex: 1,
                      padding: '16px',
                      background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                      border: 'none',
                      borderRadius: '12px',
                      color: '#fff',
                      fontSize: '16px',
                      fontWeight: '700',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '8px',
                      boxShadow: '0 4px 20px rgba(147, 51, 234, 0.4)',
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.transform = 'translateY(-2px)';
                      e.currentTarget.style.boxShadow = '0 6px 30px rgba(147, 51, 234, 0.6)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'translateY(0)';
                      e.currentTarget.style.boxShadow = '0 4px 20px rgba(147, 51, 234, 0.4)';
                    }}
                  >
                    Next
                    <ArrowRight size={20} />
                  </button>
                ) : (
                  <button
                    type="button"
                    onClick={handleSubmit}
                    disabled={loading}
                    style={{
                      flex: 1,
                      padding: '16px',
                      background: loading 
                        ? 'linear-gradient(135deg, #6b7280, #9ca3af)'
                        : 'linear-gradient(135deg, #9333ea, #ec4899)',
                      border: 'none',
                      borderRadius: '12px',
                      color: '#fff',
                      fontSize: '16px',
                      fontWeight: '700',
                      cursor: loading ? 'not-allowed' : 'pointer',
                      transition: 'all 0.3s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '8px',
                      boxShadow: '0 4px 20px rgba(147, 51, 234, 0.4)',
                    }}
                    onMouseEnter={(e) => {
                      if (!loading) {
                        e.currentTarget.style.transform = 'translateY(-2px)';
                        e.currentTarget.style.boxShadow = '0 6px 30px rgba(147, 51, 234, 0.6)';
                      }
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'translateY(0)';
                      e.currentTarget.style.boxShadow = '0 4px 20px rgba(147, 51, 234, 0.4)';
                    }}
                  >
                    {loading ? (
                      <>
                        <div style={{
                          width: '20px',
                          height: '20px',
                          border: '2px solid #fff',
                          borderTopColor: 'transparent',
                          borderRadius: '50%',
                          animation: 'spin 1s linear infinite',
                        }} />
                        Creating Character...
                      </>
                    ) : (
                      <>
                        <Sword size={20} />
                        Start Adventure
                      </>
                    )}
                  </button>
                )}
              </div>
            </div>

            {/* Login Link */}
            <p style={{ textAlign: 'center', marginTop: '24px', color: '#9ca3af' }}>
              Already have an account?{' '}
              <Link href="/login" style={{ color: '#a855f7', textDecoration: 'none', fontWeight: '600' }}>
                Login
              </Link>
            </p>
          </div>
        </div>
      </div>

      {/* Animations */}
      <style jsx>{`
        @keyframes pulse {
          0%, 100% { opacity: 0.3; transform: scale(1); }
          50% { opacity: 0.5; transform: scale(1.1); }
        }
        
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
} 






globals.css
/* app/globals.css - Enhanced Attractive UI */

/* Import Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Inter:wght@300;400;500;600;700&display=swap');

/* CSS Variables for Theme */
:root {
  --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
  --success-gradient: linear-gradient(135deg, #13c2c2 0%, #6dd8b1 100%);
  --gold-gradient: linear-gradient(135deg, #ffd700 0%, #ffed4e 100%);
  --glass-bg: rgba(255, 255, 255, 0.08);
  --glass-border: rgba(255, 255, 255, 0.18);
  --animation-duration: 0.4s;
}

/* Reset and Base Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  background: #000;
  color: #fff;
  overflow-x: hidden;
  position: relative;
}

/* Animated Background */
body::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: 
    radial-gradient(circle at 20% 50%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
    radial-gradient(circle at 80% 80%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
    radial-gradient(circle at 40% 20%, rgba(255, 219, 112, 0.2) 0%, transparent 50%);
  animation: backgroundShift 20s ease-in-out infinite;
  z-index: -2;
}

body::after {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: 
    linear-gradient(180deg, 
      rgba(0,0,0,0.7) 0%, 
      rgba(0,0,0,0.3) 50%, 
      rgba(0,0,0,0.7) 100%);
  z-index: -1;
}

@keyframes backgroundShift {
  0%, 100% { transform: translate(0, 0) scale(1); }
  33% { transform: translate(-20px, -20px) scale(1.1); }
  66% { transform: translate(20px, -10px) scale(0.9); }
}

/* Container */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  position: relative;
}

/* Enhanced Glass Effect */
.glass {
  background: var(--glass-bg);
  backdrop-filter: blur(20px);
  -webkit-backdrop-filter: blur(20px);
  border: 1px solid var(--glass-border);
  border-radius: 24px;
  padding: 32px;
  position: relative;
  overflow: hidden;
  box-shadow: 
    0 8px 32px 0 rgba(99, 102, 241, 0.1),
    inset 0 2px 4px 0 rgba(255, 255, 255, 0.06);
  transition: all var(--animation-duration) cubic-bezier(0.4, 0, 0.2, 1);
}

.glass::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, 
    transparent 0%, 
    rgba(255, 255, 255, 0.3) 50%, 
    transparent 100%);
}

.glass:hover {
  transform: translateY(-2px);
  box-shadow: 
    0 12px 48px 0 rgba(99, 102, 241, 0.2),
    inset 0 2px 8px 0 rgba(255, 255, 255, 0.08);
  border-color: rgba(255, 255, 255, 0.25);
}

/* Enhanced Navigation */
nav {
  background: rgba(0, 0, 0, 0.9);
  backdrop-filter: blur(20px);
  -webkit-backdrop-filter: blur(20px);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  padding: 20px 0;
  position: sticky;
  top: 0;
  z-index: 1000;
  transition: all 0.3s ease;
}

.nav-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-brand {
  font-family: 'Orbitron', monospace;
  font-size: 28px;
  font-weight: 900;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  letter-spacing: 2px;
  text-transform: uppercase;
  position: relative;
}

.nav-brand::after {
  content: '';
  position: absolute;
  bottom: -5px;
  left: 0;
  width: 100%;
  height: 2px;
  background: var(--primary-gradient);
  transform: scaleX(0);
  transition: transform 0.3s ease;
}

.nav-brand:hover::after {
  transform: scaleX(1);
}

/* Enhanced Buttons */
.btn {
  padding: 14px 28px;
  border: none;
  border-radius: 12px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all var(--animation-duration) cubic-bezier(0.4, 0, 0.2, 1);
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 8px;
  position: relative;
  overflow: hidden;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.btn::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.2);
  transform: translate(-50%, -50%);
  transition: width 0.6s, height 0.6s;
}

.btn:hover::before {
  width: 300px;
  height: 300px;
}

.btn-primary {
  background: var(--primary-gradient);
  color: white;
  box-shadow: 0 4px 15px 0 rgba(102, 126, 234, 0.4);
}

.btn-primary:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 25px 0 rgba(102, 126, 234, 0.6);
}

.btn-secondary {
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border: 2px solid rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(10px);
}

.btn-secondary:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(255, 255, 255, 0.3);
  transform: translateY(-2px);
}

.btn-danger {
  background: linear-gradient(135deg, #f5576c 0%, #f093fb 100%);
  color: white;
  box-shadow: 0 4px 15px 0 rgba(245, 87, 108, 0.4);
}

.btn-success {
  background: var(--success-gradient);
  color: white;
  box-shadow: 0 4px 15px 0 rgba(19, 194, 194, 0.4);
}

/* Enhanced Form Inputs */
.form-input {
  width: 100%;
  padding: 14px 20px;
  background: rgba(0, 0, 0, 0.6);
  border: 2px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  color: white;
  font-size: 16px;
  transition: all var(--animation-duration) ease;
  backdrop-filter: blur(10px);
}

.form-input:focus {
  outline: none;
  border-color: #667eea;
  background: rgba(0, 0, 0, 0.8);
  box-shadow: 
    0 0 0 4px rgba(102, 126, 234, 0.1),
    0 4px 20px 0 rgba(102, 126, 234, 0.2);
  transform: translateY(-2px);
}

.form-input::placeholder {
  color: #6b7280;
  transition: color 0.3s ease;
}

.form-input:focus::placeholder {
  color: #9ca3af;
}

/* Enhanced Cards */
.card {
  background: var(--glass-bg);
  border: 1px solid var(--glass-border);
  border-radius: 20px;
  padding: 24px;
  transition: all var(--animation-duration) cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
  backdrop-filter: blur(10px);
}

.card::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    45deg,
    transparent,
    rgba(255, 255, 255, 0.05),
    transparent
  );
  transform: rotate(45deg);
  transition: all 0.5s;
  opacity: 0;
}

.card:hover::before {
  animation: shimmer 0.5s ease;
  opacity: 1;
}

@keyframes shimmer {
  0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
  100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
}

.card:hover {
  transform: translateY(-8px) scale(1.02);
  box-shadow: 
    0 20px 40px rgba(102, 126, 234, 0.3),
    0 10px 20px rgba(255, 255, 255, 0.1);
  border-color: rgba(102, 126, 234, 0.5);
}

/* Quest Cards */
.quest-card {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  border: 2px solid rgba(102, 126, 234, 0.2);
  border-radius: 20px;
  padding: 24px;
  position: relative;
  overflow: hidden;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

.quest-card::after {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: var(--primary-gradient);
  border-radius: 20px;
  opacity: 0;
  z-index: -1;
  transition: opacity 0.3s ease;
}

.quest-card:hover::after {
  opacity: 0.3;
}

.quest-card:hover {
  transform: translateY(-8px) scale(1.02);
  box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);
}

/* Hero Section */
.hero {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  padding: 40px 20px;
  position: relative;
  overflow: hidden;
}

.hero-title {
  font-family: 'Orbitron', monospace;
  font-size: clamp(48px, 10vw, 120px);
  font-weight: 900;
  line-height: 1;
  margin-bottom: 24px;
  text-transform: uppercase;
  letter-spacing: 3px;
  animation: glowText 3s ease-in-out infinite;
}

@keyframes glowText {
  0%, 100% { 
    text-shadow: 
      0 0 10px rgba(102, 126, 234, 0.8),
      0 0 20px rgba(102, 126, 234, 0.6),
      0 0 30px rgba(102, 126, 234, 0.4);
  }
  50% { 
    text-shadow: 
      0 0 20px rgba(118, 75, 162, 0.8),
      0 0 30px rgba(118, 75, 162, 0.6),
      0 0 40px rgba(118, 75, 162, 0.4);
  }
}

.gradient-text {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  background-size: 200% auto;
  animation: gradientShift 3s linear infinite;
}

@keyframes gradientShift {
  to { background-position: 200% center; }
}

/* Profile Avatar */
.avatar-container {
  position: relative;
  width: 120px;
  height: 120px;
  margin: 0 auto 20px;
}

.avatar {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  object-fit: cover;
  border: 4px solid transparent;
  background: linear-gradient(white, white) padding-box,
              var(--primary-gradient) border-box;
  transition: transform 0.3s ease;
}

.avatar:hover {
  transform: scale(1.1) rotate(5deg);
}

.avatar-placeholder {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background: var(--primary-gradient);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 48px;
  font-weight: bold;
  color: white;
  text-transform: uppercase;
}

.avatar-upload-btn {
  position: absolute;
  bottom: 0;
  right: 0;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: var(--primary-gradient);
  border: 3px solid #000;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
}

.avatar-upload-btn:hover {
  transform: scale(1.1);
  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
}

/* Stats Display */
.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 20px;
  margin: 30px 0;
}

.stat-card {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  border: 2px solid rgba(102, 126, 234, 0.2);
  border-radius: 16px;
  padding: 20px;
  text-align: center;
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
}

.stat-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.stat-card:hover::before {
  left: 100%;
}

.stat-card:hover {
  transform: translateY(-5px);
  border-color: rgba(102, 126, 234, 0.5);
}

.stat-value {
  font-size: 36px;
  font-weight: bold;
  background: var(--primary-gradient);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  margin-bottom: 8px;
}

.stat-label {
  font-size: 14px;
  color: #9ca3af;
  text-transform: uppercase;
  letter-spacing: 1px;
}

/* Progress Bars */
.progress-bar {
  width: 100%;
  height: 12px;
  background: rgba(0, 0, 0, 0.5);
  border-radius: 6px;
  overflow: hidden;
  position: relative;
}

.progress-fill {
  height: 100%;
  background: var(--primary-gradient);
  border-radius: 6px;
  position: relative;
  transition: width 1s cubic-bezier(0.4, 0, 0.2, 1);
  overflow: hidden;
}

.progress-fill::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.3),
    transparent
  );
  animation: progressShine 2s linear infinite;
}

@keyframes progressShine {
  0% { transform: translateX(-100%); }
  100% { transform: translateX(100%); }
}

/* Loading Spinner */
.spinner {
  width: 48px;
  height: 48px;
  border: 4px solid rgba(102, 126, 234, 0.2);
  border-top-color: #667eea;
  border-radius: 50%;
  animation: spin 1s cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Floating Animation */
.float-animation {
  animation: float 6s ease-in-out infinite;
}

@keyframes float {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-20px); }
}

/* Glow Effects */
.glow {
  box-shadow: 
    0 0 20px rgba(102, 126, 234, 0.5),
    0 0 40px rgba(102, 126, 234, 0.3),
    0 0 60px rgba(102, 126, 234, 0.1);
}

/* Animations */
.fade-in {
  animation: fadeIn 0.6s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.slide-up {
  animation: slideUp 0.5s ease-out;
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Responsive Design */
@media (max-width: 768px) {
  .hero-title {
    font-size: 48px;
  }
  
  .stats-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .glass {
    padding: 20px;
  }
}

/* Utility Classes */
.text-center { text-align: center; }
.text-left { text-align: left; }
.text-right { text-align: right; }
.flex { display: flex; }
.flex-col { flex-direction: column; }
.items-center { align-items: center; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.gap-4 { gap: 16px; }
.gap-6 { gap: 24px; }
.gap-8 { gap: 32px; }
.mb-2 { margin-bottom: 8px; }
.mb-4 { margin-bottom: 16px; }
.mb-6 { margin-bottom: 24px; }
.mb-8 { margin-bottom: 32px; }
.mt-4 { margin-top: 16px; }
.mt-6 { margin-top: 24px; }
.mt-8 { margin-top: 32px; }
.w-full { width: 100%; }
.rounded { border-radius: 8px; }
.rounded-lg { border-radius: 12px; }
.rounded-xl { border-radius: 16px; }
.rounded-2xl { border-radius: 24px; }
.rounded-full { border-radius: 9999px; }

/* Text Colors */
.text-white { color: #fff; }
.text-gray-400 { color: #9ca3af; }
.text-gray-600 { color: #4b5563; }
.text-indigo-400 { color: #818cf8; }
.text-indigo-500 { color: #6366f1; }
.text-purple-500 { color: #a855f7; }
.text-yellow-400 { color: #facc15; }
.text-green-400 { color: #4ade80; }
.text-red-400 { color: #f87171; }

/* Background Colors */
.bg-black { background-color: #000; }
.bg-gray-900 { background-color: #111827; }
.bg-indigo-600 { background-color: #4f46e5; }

/* Custom Scrollbar */
::-webkit-scrollbar {
  width: 12px;
}

::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.5);
  border-radius: 6px;
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 6px;
}

::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
}



layout.tsx
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import { Toaster } from 'react-hot-toast';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Solo Leveling System - Level Up Your Life',
  description: 'Transform your life into an epic RPG adventure inspired by Solo Leveling',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap" rel="stylesheet" />
      </head>
      <body className={inter.className}>
        <Toaster 
          position="top-right"
          toastOptions={{
            style: {
              background: '#1f2937',
              color: '#fff',
              border: '1px solid #374151',
            },
          }}
        />
        {children}
      </body>
    </html>
  );
}


page.tsx
'use client';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { ArrowRight, Zap, Target, Trophy, Users, Sword, Shield, Sparkles, ChevronDown, Play } from 'lucide-react';

export default function LandingPage() {
  const [currentBg, setCurrentBg] = useState(0);
  const [scrollY, setScrollY] = useState(0);

  // Solo Leveling themed background images from local folder
  const backgrounds = [
    '/images/backgrounds/solo-leveling-1.jpg',
    '/images/backgrounds/solo-leveling-2.jpg',
    '/images/backgrounds/solo-leveling-3.jpg',
    '/images/backgrounds/solo-leveling-4.jpg',
  ];

  useEffect(() => {
    const handleScroll = () => setScrollY(window.scrollY);
    window.addEventListener('scroll', handleScroll);
    
    // Change background every 5 seconds
    const bgTimer = setInterval(() => {
      setCurrentBg((prev) => (prev + 1) % backgrounds.length);
    }, 5000);
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
      clearInterval(bgTimer);
    };
  }, []);

  return (
    <div style={{ 
      position: 'relative',
      minHeight: '100vh',
      overflow: 'hidden',
      backgroundColor: '#000',
      color: '#fff',
      fontFamily: 'Inter, -apple-system, sans-serif'
    }}>
      {/* Animated Background System */}
      <div style={{ position: 'fixed', inset: 0, zIndex: 0 }}>
        {/* Background Images */}
        {backgrounds.map((bg, index) => (
          <div
            key={index}
            style={{
              position: 'absolute',
              inset: 0,
              opacity: currentBg === index ? 1 : 0,
              transition: 'opacity 2s ease-in-out',
              transform: `scale(${currentBg === index ? 1 : 1.1})`,
            }}
          >
            <div
              style={{
                position: 'absolute',
                inset: 0,
                backgroundImage: `url(${bg})`,
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundRepeat: 'no-repeat',
                filter: 'brightness(0.7) contrast(1.2) saturate(1.2)',
                transform: `translateY(${scrollY * 0.5}px)`,
              }}
            />
          </div>
        ))}
        
        {/* Gradient Overlays */}
        <div style={{
          position: 'absolute',
          inset: 0,
          background: 'linear-gradient(to bottom, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.4) 50%, rgba(0,0,0,0.7) 100%)',
        }} />
        
        {/* Vignette Effect for better edge darkening */}
        <div style={{
          position: 'absolute',
          inset: 0,
          background: 'radial-gradient(circle at center, transparent 30%, rgba(0,0,0,0.4) 100%)',
        }} />
        
        {/* Purple Glow Effects */}
        <div style={{
          position: 'absolute',
          top: '25%',
          left: '25%',
          width: '400px',
          height: '400px',
          background: 'radial-gradient(circle, rgba(147, 51, 234, 0.25) 0%, transparent 70%)',
          filter: 'blur(80px)',
          animation: 'pulse 4s ease-in-out infinite',
        }} />
        <div style={{
          position: 'absolute',
          bottom: '25%',
          right: '25%',
          width: '400px',
          height: '400px',
          background: 'radial-gradient(circle, rgba(59, 130, 246, 0.25) 0%, transparent 70%)',
          filter: 'blur(80px)',
          animation: 'pulse 4s ease-in-out infinite 2s',
        }} />
      </div>

      {/* Navigation Bar */}
      <nav style={{ 
        position: 'relative',
        zIndex: 20,
        padding: '24px 48px',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        background: 'rgba(0,0,0,0.3)',
        backdropFilter: 'blur(10px)',
      }}>
        {/* Logo */}
        <div style={{ display: 'flex', alignItems: 'center' }}>
          <div style={{
            padding: '12px 24px',
            background: 'rgba(147, 51, 234, 0.15)',
            backdropFilter: 'blur(10px)',
            borderRadius: '12px',
            border: '1px solid rgba(147, 51, 234, 0.4)',
          }}>
            <h1 style={{
              fontSize: '28px',
              fontWeight: '900',
              letterSpacing: '2px',
              background: 'linear-gradient(to right, #a855f7, #3b82f6)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              margin: 0,
              fontFamily: 'Orbitron, monospace'
            }}>
              SOLO LEVELING
            </h1>
            <div style={{ 
              fontSize: '10px',
              color: '#a855f7',
              letterSpacing: '4px',
              textAlign: 'center',
              marginTop: '4px'
            }}>
              SYSTEM
            </div>
          </div>
        </div>

        {/* Navigation Buttons */}
        <div style={{ display: 'flex', gap: '16px' }}>
          <Link href="/login" style={{ textDecoration: 'none' }}>
            <button style={{
              position: 'relative',
              padding: '12px 24px',
              background: 'rgba(147, 51, 234, 0.2)',
              backdropFilter: 'blur(10px)',
              border: '1px solid rgba(147, 51, 234, 0.4)',
              borderRadius: '12px',
              color: '#fff',
              fontSize: '14px',
              fontWeight: '600',
              letterSpacing: '1px',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.background = 'rgba(147, 51, 234, 0.3)';
              e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.6)';
              e.currentTarget.style.transform = 'translateY(-2px)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.background = 'rgba(147, 51, 234, 0.2)';
              e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.4)';
              e.currentTarget.style.transform = 'translateY(0)';
            }}>
              <Shield size={18} />
              LOGIN
            </button>
          </Link>

          <Link href="/signup" style={{ textDecoration: 'none' }}>
            <button style={{
              position: 'relative',
              padding: '12px 32px',
              background: 'linear-gradient(135deg, #9333ea 0%, #ec4899 100%)',
              border: 'none',
              borderRadius: '12px',
              color: '#fff',
              fontSize: '14px',
              fontWeight: '700',
              letterSpacing: '1px',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              boxShadow: '0 4px 20px rgba(147, 51, 234, 0.4)',
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-2px) scale(1.05)';
              e.currentTarget.style.boxShadow = '0 6px 30px rgba(147, 51, 234, 0.6)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0) scale(1)';
              e.currentTarget.style.boxShadow = '0 4px 20px rgba(147, 51, 234, 0.4)';
            }}>
              START NOW
              <ArrowRight size={18} />
            </button>
          </Link>
        </div>
      </nav>

      {/* Hero Section */}
      <div style={{
        position: 'relative',
        zIndex: 10,
        minHeight: '90vh',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '0 24px',
        textAlign: 'center',
      }}>
        {/* Subtle background for text area */}
        <div style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: '100%',
          maxWidth: '1000px',
          height: '600px',
          background: 'radial-gradient(ellipse at center, rgba(0,0,0,0.5) 0%, transparent 70%)',
          pointerEvents: 'none',
        }} />
        {/* Animated Badge */}
        <div style={{
          display: 'inline-flex',
          alignItems: 'center',
          gap: '8px',
          padding: '12px 24px',
          background: 'rgba(147, 51, 234, 0.3)',
          backdropFilter: 'blur(10px)',
          borderRadius: '999px',
          border: '1px solid rgba(147, 51, 234, 0.6)',
          marginBottom: '32px',
          animation: 'pulse 2s ease-in-out infinite',
        }}>
          <Sparkles size={16} style={{ color: '#a855f7' }} />
          <span style={{ color: '#e9d5ff', fontSize: '14px', fontWeight: '700', letterSpacing: '1px' }}>
            ARISE & LEVEL UP
          </span>
          <Sparkles size={16} style={{ color: '#a855f7' }} />
        </div>

        {/* Main Title */}
        <div style={{ marginBottom: '32px' }}>
          <h1 style={{
            fontSize: 'clamp(48px, 8vw, 96px)',
            fontWeight: '900',
            lineHeight: '1',
            marginBottom: '16px',
            fontFamily: 'Orbitron, monospace',
            textShadow: '0 0 60px rgba(147, 51, 234, 0.8), 0 4px 12px rgba(0, 0, 0, 0.8)',
          }}>
            <span style={{ display: 'block', marginBottom: '8px', color: '#ffffff', textShadow: '0 4px 12px rgba(0, 0, 0, 0.9)' }}>BECOME THE</span>
            <span style={{
              display: 'block',
              background: 'linear-gradient(90deg, #a855f7 0%, #ec4899 50%, #3b82f6 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundSize: '200% auto',
              animation: 'gradientShift 3s ease infinite',
            }}>
              SHADOW MONARCH
            </span>
          </h1>
        </div>

        {/* Subtitle */}
        <p style={{
          fontSize: 'clamp(18px, 2vw, 24px)',
          color: '#d1d5db',
          marginBottom: '48px',
          maxWidth: '800px',
          lineHeight: '1.6',
          fontWeight: '300',
          textShadow: '0 2px 8px rgba(0, 0, 0, 0.7)',
        }}>
          Transform your life into an epic quest. Level up daily, conquer challenges, 
          and rise from <span style={{ color: '#a855f7', fontWeight: '600' }}>E-Rank</span> to 
          <span style={{ color: '#fbbf24', fontWeight: '600' }}> S-Rank</span> in real life.
        </p>

        {/* CTA Buttons */}
        <div style={{
          display: 'flex',
          flexDirection: 'row',
          gap: '24px',
          marginBottom: '64px',
          flexWrap: 'wrap',
          justifyContent: 'center',
        }}>
          <Link href="/signup" style={{ textDecoration: 'none' }}>
            <button style={{
              position: 'relative',
              padding: '20px 40px',
              background: 'linear-gradient(135deg, #9333ea 0%, #ec4899 50%, #9333ea 100%)',
              backgroundSize: '200% auto',
              border: 'none',
              borderRadius: '16px',
              color: '#fff',
              fontSize: '18px',
              fontWeight: '700',
              letterSpacing: '1px',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              display: 'flex',
              alignItems: 'center',
              gap: '12px',
              boxShadow: '0 10px 40px rgba(147, 51, 234, 0.5)',
              animation: 'gradientShift 3s ease infinite',
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-4px) scale(1.05)';
              e.currentTarget.style.boxShadow = '0 15px 50px rgba(147, 51, 234, 0.7)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0) scale(1)';
              e.currentTarget.style.boxShadow = '0 10px 40px rgba(147, 51, 234, 0.5)';
            }}>
              <Sword size={24} />
              BEGIN YOUR JOURNEY
              <ArrowRight size={24} />
            </button>
          </Link>

          <button style={{
            padding: '20px 40px',
            background: 'rgba(255, 255, 255, 0.15)',
            backdropFilter: 'blur(10px)',
            border: '2px solid rgba(255, 255, 255, 0.4)',
            borderRadius: '16px',
            color: '#fff',
            fontSize: '18px',
            fontWeight: '700',
            letterSpacing: '1px',
            cursor: 'pointer',
            transition: 'all 0.3s ease',
            display: 'flex',
            alignItems: 'center',
            gap: '12px',
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.background = 'rgba(255, 255, 255, 0.25)';
            e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.8)';
            e.currentTarget.style.transform = 'translateY(-4px) scale(1.05)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.background = 'rgba(255, 255, 255, 0.15)';
            e.currentTarget.style.borderColor = 'rgba(255, 255, 255, 0.4)';
            e.currentTarget.style.transform = 'translateY(0) scale(1)';
          }}>
            <Play size={24} />
            WATCH TRAILER
          </button>
        </div>

        {/* Live Stats */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
          gap: '24px',
          maxWidth: '800px',
          width: '100%',
        }}>
          {[
            { icon: Users, label: 'Active Players', value: '10,523', color: '#a855f7' },
            { icon: Trophy, label: 'Quests Completed', value: '1.2M+', color: '#3b82f6' },
            { icon: Zap, label: 'Total Levels Gained', value: '85,421', color: '#fbbf24' },
          ].map((stat, index) => (
            <div
              key={index}
              style={{
                position: 'relative',
                padding: '24px',
                background: 'rgba(0, 0, 0, 0.4)',
                backdropFilter: 'blur(10px)',
                borderRadius: '16px',
                border: '1px solid rgba(147, 51, 234, 0.3)',
                textAlign: 'center',
                transition: 'all 0.3s ease',
                cursor: 'pointer',
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-4px) scale(1.05)';
                e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.8)';
                e.currentTarget.style.background = 'rgba(147, 51, 234, 0.2)';
                e.currentTarget.style.boxShadow = '0 10px 30px rgba(147, 51, 234, 0.4)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0) scale(1)';
                e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                e.currentTarget.style.background = 'rgba(0, 0, 0, 0.4)';
                e.currentTarget.style.boxShadow = 'none';
              }}
            >
              <stat.icon size={32} style={{ color: stat.color, margin: '0 auto 12px' }} />
              <div style={{ fontSize: '32px', fontWeight: '700', marginBottom: '4px' }}>
                {stat.value}
              </div>
              <div style={{ fontSize: '12px', color: '#9ca3af', textTransform: 'uppercase', letterSpacing: '1px' }}>
                {stat.label}
              </div>
            </div>
          ))}
        </div>

        {/* Scroll Indicator */}
        <div style={{
          position: 'absolute',
          bottom: '32px',
          left: '50%',
          transform: 'translateX(-50%)',
          animation: 'bounce 2s ease-in-out infinite',
        }}>
          <ChevronDown size={32} style={{ color: '#a855f7' }} />
        </div>
      </div>

      {/* Features Section */}
      <div style={{
        position: 'relative',
        zIndex: 10,
        padding: '80px 24px',
        background: 'linear-gradient(to top, #000 0%, rgba(0,0,0,0.95) 50%, transparent 100%)',
      }}>
        <div style={{ maxWidth: '1200px', margin: '0 auto' }}>
          <div style={{ textAlign: 'center', marginBottom: '64px' }}>
            <h2 style={{
              fontSize: 'clamp(36px, 5vw, 48px)',
              fontWeight: '900',
              marginBottom: '16px',
              fontFamily: 'Orbitron, monospace',
              background: 'linear-gradient(to right, #a855f7, #3b82f6)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
            }}>
              SYSTEM FEATURES
            </h2>
            <p style={{ color: '#9ca3af', fontSize: '18px' }}>
              Power up with exclusive features
            </p>
          </div>

          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
            gap: '24px',
          }}>
            {[
              { icon: Zap, title: 'Daily Quests', description: '8 personalized quests every day', gradient: 'linear-gradient(135deg, #fbbf24, #f97316)' },
              { icon: Target, title: 'Stat System', description: 'Track STR, INT, AGI & more', gradient: 'linear-gradient(135deg, #3b82f6, #06b6d4)' },
              { icon: Trophy, title: 'Achievements', description: 'Unlock titles and rewards', gradient: 'linear-gradient(135deg, #a855f7, #ec4899)' },
              { icon: Users, title: 'Guild System', description: 'Join forces with others', gradient: 'linear-gradient(135deg, #10b981, #34d399)' },
            ].map((feature, index) => (
              <div
                key={index}
                style={{
                  position: 'relative',
                  padding: '32px',
                  background: 'rgba(0, 0, 0, 0.4)',
                  backdropFilter: 'blur(10px)',
                  borderRadius: '20px',
                  border: '1px solid rgba(147, 51, 234, 0.3)',
                  textAlign: 'center',
                  transition: 'all 0.3s ease',
                  cursor: 'pointer',
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-8px) scale(1.02)';
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.8)';
                  e.currentTarget.style.boxShadow = '0 15px 40px rgba(147, 51, 234, 0.3)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0) scale(1)';
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                  e.currentTarget.style.boxShadow = 'none';
                }}
              >
                <div style={{
                  display: 'inline-flex',
                  padding: '12px',
                  borderRadius: '12px',
                  background: feature.gradient,
                  marginBottom: '16px',
                }}>
                  <feature.icon size={24} style={{ color: '#fff' }} />
                </div>
                <h3 style={{ fontSize: '20px', fontWeight: '700', marginBottom: '8px' }}>
                  {feature.title}
                </h3>
                <p style={{ color: '#9ca3af', fontSize: '14px' }}>
                  {feature.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Inline Styles for Animations */}
      <style jsx>{`
        @keyframes pulse {
          0%, 100% { opacity: 0.6; transform: scale(1); }
          50% { opacity: 0.9; transform: scale(1.2); }
        }
        
        @keyframes gradientShift {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
        
        @keyframes bounce {
          0%, 100% { transform: translateX(-50%) translateY(0); }
          50% { transform: translateX(-50%) translateY(-10px); }
        }
      `}</style>
    </div>
  );
}




component/admin/AdminLogs.tsx
'use client';
import { useState, useEffect } from 'react';
import api from '@/lib/api';
import { Clock, Activity, ChevronLeft, ChevronRight, Zap, Eye, Trash, Edit, Plus } from 'lucide-react';

export default function AdminLogs() {
  const [logs, setLogs] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  useEffect(() => {
    fetchLogs();
  }, [currentPage]);

  const fetchLogs = async () => {
    try {
      setLoading(true);
      const response = await api.get('/admin/logs', {
        params: { page: currentPage, limit: 20 }
      });
      setLogs(response.data.logs || []);
      setTotalPages(response.data.pagination?.pages || 1);
    } catch (error) {
      console.error('Failed to fetch logs:', error);
      setLogs([]);
    } finally {
      setLoading(false);
    }
  };

  const getActionColor = (action: string) => {
    if (action.includes('DELETE')) return { bg: 'rgba(239, 68, 68, 0.1)', text: '#ef4444', border: 'rgba(239, 68, 68, 0.3)' };
    if (action.includes('CREATE')) return { bg: 'rgba(16, 185, 129, 0.1)', text: '#10b981', border: 'rgba(16, 185, 129, 0.3)' };
    if (action.includes('UPDATE')) return { bg: 'rgba(245, 158, 11, 0.1)', text: '#f59e0b', border: 'rgba(245, 158, 11, 0.3)' };
    if (action.includes('VIEW')) return { bg: 'rgba(59, 130, 246, 0.1)', text: '#3b82f6', border: 'rgba(59, 130, 246, 0.3)' };
    return { bg: 'rgba(107, 114, 128, 0.1)', text: '#6b7280', border: 'rgba(107, 114, 128, 0.3)' };
  };

  const getActionIcon = (action: string) => {
    if (action.includes('DELETE')) return Trash;
    if (action.includes('CREATE')) return Plus;
    if (action.includes('UPDATE')) return Edit;
    if (action.includes('VIEW')) return Eye;
    return Activity;
  };

  return (
    <div style={{
      background: 'rgba(0, 0, 0, 0.4)',
      backdropFilter: 'blur(20px)',
      borderRadius: '16px',
      border: '1px solid rgba(147, 51, 234, 0.2)',
      padding: '24px'
    }}>
      {/* Header */}
      <div style={{
        display: 'flex',
        alignItems: 'center',
        gap: '12px',
        marginBottom: '24px'
      }}>
        <Activity style={{ width: '24px', height: '24px', color: '#a855f7' }} />
        <h2 style={{
          fontSize: '24px',
          fontWeight: '700',
          color: '#fff',
          fontFamily: 'Orbitron, monospace'
        }}>
          Admin Activity Logs
        </h2>
        <div style={{
          marginLeft: 'auto',
          background: 'rgba(147, 51, 234, 0.2)',
          padding: '4px 12px',
          borderRadius: '20px',
          border: '1px solid rgba(147, 51, 234, 0.3)',
          display: 'flex',
          alignItems: 'center',
          gap: '6px'
        }}>
          <Zap style={{ width: '14px', height: '14px', color: '#a855f7' }} />
          <span style={{ fontSize: '12px', color: '#a855f7', fontWeight: '600' }}>
            REAL-TIME
          </span>
        </div>
      </div>

      {/* Logs List */}
      {loading ? (
        <div style={{ textAlign: 'center', padding: '40px 0' }}>
          <div style={{
            width: '48px',
            height: '48px',
            border: '4px solid rgba(147, 51, 234, 0.3)',
            borderTopColor: '#9333ea',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 16px'
          }} />
          <p style={{ color: '#9ca3af', fontSize: '16px' }}>Loading activity logs...</p>
        </div>
      ) : logs.length === 0 ? (
        <div style={{ textAlign: 'center', padding: '40px 0' }}>
          <Activity style={{ width: '48px', height: '48px', color: '#6b7280', margin: '0 auto 16px' }} />
          <p style={{ color: '#9ca3af', fontSize: '16px' }}>No activity logs found</p>
        </div>
      ) : (
        <div style={{ marginBottom: '20px' }}>
          {logs.map((log, index) => {
            const actionColors = getActionColor(log.action_type);
            const ActionIcon = getActionIcon(log.action_type);
            
            return (
              <div
                key={log.log_id}
                style={{
                  background: 'rgba(0, 0, 0, 0.3)',
                  border: '1px solid rgba(147, 51, 234, 0.1)',
                  borderRadius: '12px',
                  padding: '16px',
                  marginBottom: '12px',
                  position: 'relative',
                  overflow: 'hidden',
                  transition: 'all 0.3s ease',
                  animation: `fadeIn 0.3s ease-out ${index * 0.05}s both`
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.3)';
                  e.currentTarget.style.transform = 'translateX(4px)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'rgba(0, 0, 0, 0.3)';
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.1)';
                  e.currentTarget.style.transform = 'translateX(0)';
                }}
              >
                {/* Left Border Indicator */}
                <div style={{
                  position: 'absolute',
                  left: 0,
                  top: 0,
                  bottom: 0,
                  width: '4px',
                  background: actionColors.text,
                  borderRadius: '12px 0 0 12px'
                }} />

                <div style={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'flex-start',
                  paddingLeft: '12px'
                }}>
                  <div style={{ flex: 1 }}>
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '12px',
                      marginBottom: '8px'
                    }}>
                      <div style={{
                        background: actionColors.bg,
                        border: `1px solid ${actionColors.border}`,
                        borderRadius: '8px',
                        padding: '6px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}>
                        <ActionIcon style={{ width: '16px', height: '16px', color: actionColors.text }} />
                      </div>
                      
                      <div style={{ flex: 1 }}>
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '8px',
                          flexWrap: 'wrap'
                        }}>
                          <span style={{
                            fontSize: '15px',
                            fontWeight: '700',
                            color: actionColors.text,
                            textTransform: 'uppercase',
                            letterSpacing: '0.5px'
                          }}>
                            {log.action_type.replace(/_/g, ' ')}
                          </span>
                          <span style={{ color: '#6b7280', fontSize: '13px' }}>by</span>
                          <span style={{
                            fontSize: '14px',
                            color: '#a855f7',
                            fontWeight: '600',
                            background: 'rgba(147, 51, 234, 0.1)',
                            padding: '2px 8px',
                            borderRadius: '4px'
                          }}>
                            {log.admin_username || 'Admin'}
                          </span>
                        </div>

                        {log.action_details && (
                          <p style={{
                            fontSize: '13px',
                            color: '#9ca3af',
                            marginTop: '6px',
                            maxWidth: '600px',
                            lineHeight: '1.5'
                          }}>
                            {typeof log.action_details === 'string' 
                              ? log.action_details 
                              : JSON.stringify(log.action_details)}
                          </p>
                        )}
                      </div>
                    </div>
                  </div>

                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px',
                    background: 'rgba(0, 0, 0, 0.3)',
                    padding: '6px 12px',
                    borderRadius: '8px',
                    border: '1px solid rgba(255, 255, 255, 0.1)',
                    whiteSpace: 'nowrap'
                  }}>
                    <Clock style={{ width: '14px', height: '14px', color: '#6b7280' }} />
                    <span style={{ fontSize: '12px', color: '#9ca3af' }}>
                      {new Date(log.created_at).toLocaleString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* Pagination */}
      {totalPages > 1 && (
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          gap: '12px',
          marginTop: '24px',
          paddingTop: '20px',
          borderTop: '1px solid rgba(147, 51, 234, 0.2)'
        }}>
          <button
            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
            disabled={currentPage === 1}
            style={{
              padding: '8px 16px',
              background: 'rgba(147, 51, 234, 0.2)',
              border: '1px solid rgba(147, 51, 234, 0.3)',
              borderRadius: '8px',
              color: '#a855f7',
              cursor: currentPage === 1 ? 'not-allowed' : 'pointer',
              opacity: currentPage === 1 ? 0.5 : 1,
              display: 'flex',
              alignItems: 'center',
              gap: '4px',
              fontWeight: '600',
              fontSize: '14px',
              transition: 'all 0.3s ease'
            }}
            onMouseEnter={(e) => {
              if (currentPage !== 1) {
                e.currentTarget.style.background = 'rgba(147, 51, 234, 0.3)';
                e.currentTarget.style.transform = 'translateX(-2px)';
              }
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.background = 'rgba(147, 51, 234, 0.2)';
              e.currentTarget.style.transform = 'translateX(0)';
            }}
          >
            <ChevronLeft style={{ width: '16px', height: '16px' }} />
            Previous
          </button>

          <div style={{
            padding: '8px 16px',
            background: 'rgba(0, 0, 0, 0.3)',
            border: '1px solid rgba(147, 51, 234, 0.2)',
            borderRadius: '8px'
          }}>
            <span style={{ color: '#a855f7', fontWeight: '600', fontSize: '14px' }}>
              Page {currentPage}
            </span>
            <span style={{ color: '#6b7280', margin: '0 6px' }}>/</span>
            <span style={{ color: '#9ca3af', fontSize: '14px' }}>
              {totalPages}
            </span>
          </div>

          <button
            onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
            disabled={currentPage === totalPages}
            style={{
              padding: '8px 16px',
              background: 'rgba(147, 51, 234, 0.2)',
              border: '1px solid rgba(147, 51, 234, 0.3)',
              borderRadius: '8px',
              color: '#a855f7',
              cursor: currentPage === totalPages ? 'not-allowed' : 'pointer',
              opacity: currentPage === totalPages ? 0.5 : 1,
              display: 'flex',
              alignItems: 'center',
              gap: '4px',
              fontWeight: '600',
              fontSize: '14px',
              transition: 'all 0.3s ease'
            }}
            onMouseEnter={(e) => {
              if (currentPage !== totalPages) {
                e.currentTarget.style.background = 'rgba(147, 51, 234, 0.3)';
                e.currentTarget.style.transform = 'translateX(2px)';
              }
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.background = 'rgba(147, 51, 234, 0.2)';
              e.currentTarget.style.transform = 'translateX(0)';
            }}
          >
            Next
            <ChevronRight style={{ width: '16px', height: '16px' }} />
          </button>
        </div>
      )}

      <style jsx>{`
        @keyframes spin {
          to { transform: rotate(360deg); }
        }

        @keyframes fadeIn {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
      `}</style>
    </div>
  );
}






component/admin/AdminStats.tsx
'use client';
import { Shield, Users, TrendingUp, Award, Activity, Clock, Sparkles, Zap } from 'lucide-react';

interface AdminStatsProps {
  stats: any;
  onRefresh: () => void;
  onQuestsClick?: () => void; 
  onUsersClick?: () => void;
  onAdventurersClick?: () => void;
  onCoachesClick?: () => void;
}

export default function AdminStats({ stats, onRefresh, onQuestsClick,  onUsersClick, onAdventurersClick, onCoachesClick }: AdminStatsProps) {
  if (!stats) {
    return (
      <div style={{
        background: 'rgba(0, 0, 0, 0.4)',
        backdropFilter: 'blur(20px)',
        borderRadius: '16px',
        border: '1px solid rgba(147, 51, 234, 0.2)',
        padding: '32px',
        textAlign: 'center'
      }}>
        <div style={{
          width: '48px',
          height: '48px',
          border: '4px solid rgba(147, 51, 234, 0.3)',
          borderTopColor: '#9333ea',
          borderRadius: '50%',
          animation: 'spin 1s linear infinite',
          margin: '0 auto 16px'
        }} />
        <p style={{ color: '#9ca3af', fontSize: '16px' }}>Loading statistics...</p>
      </div>
    );
  }

  const statCards = [
    {
      title: 'Total Users',
      value: stats.totalUsers || 0,
      icon: Users,
      color: '#9333ea',
      gradient: 'linear-gradient(135deg, #9333ea 0%, #ec4899 100%)',
      onClick: onUsersClick ,
      subtitle: `${stats.activeUsers || 0} active`,
      glow: 'rgba(147, 51, 234, 0.3)'
    },
    {
      title: 'Adventurers',
      value: stats.usersByType?.adventurers || 0,
      icon: Award,
      color: '#3b82f6',
      gradient: 'linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%)',
      subtitle: 'Active players',
      glow: 'rgba(59, 130, 246, 0.3)'
    },
    {
      title: 'Coaches',
      value: stats.usersByType?.coaches || 0,
      icon: Shield,
      color: '#10b981',
      gradient: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
      subtitle: 'Guiding heroes',
      glow: 'rgba(16, 185, 129, 0.3)'
    },
    {
      title: 'Total Quests',
      value: stats.totalQuests || 0,
      icon: Activity,
      color: '#f59e0b',
      gradient: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
      subtitle: 'Active challenges',
      glow: 'rgba(245, 158, 11, 0.3)'
    }
  ];

  return (
    <div style={{ marginBottom: '24px' }}>
      {/* Stats Grid */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
        gap: '20px',
        marginBottom: '24px'
      }}>
        {statCards.map((stat, index) => {
          const Icon = stat.icon;
          
          return (
            <div
  key={index}
  onClick={() => {
    console.log('Card clicked:', stat.title); 
    if (stat.title === 'Total Quests' && onQuestsClick) {
      console.log('Opening quest modal...'); 
      onQuestsClick();
    }
    if (stat.title === 'Total Users' && onUsersClick) {  
      console.log('Opening user management...'); 
      onUsersClick();  
    }  
    if (stat.title === 'Adventurers' && onAdventurersClick) {  
    console.log('Opening adventurers list...');              
    onAdventurersClick();                                     
  }   
    if (stat.title === 'Coaches' && onCoachesClick) {        
    console.log('Opening coaches list...');                 
    onCoachesClick();                                        
  }         
  }}
              style={{
                background: 'rgba(0, 0, 0, 0.4)',
                backdropFilter: 'blur(20px)',
                borderRadius: '16px',
                border: '1px solid rgba(147, 51, 234, 0.2)',
                padding: '24px',
                position: 'relative',
                overflow: 'hidden',
                transition: 'all 0.3s ease',
                cursor: (stat.title === 'Total Quests' || stat.title === 'Total Users' || stat.title === 'Adventurers' || stat.title === 'Coaches') ? 'pointer' : 'default'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-4px)';
                e.currentTarget.style.boxShadow = `0 8px 30px ${stat.glow}`;
                e.currentTarget.style.borderColor = stat.color;
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = 'none';
                e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.2)';
              }}
            >
              {/* ADD THIS SHIMMER EFFECT */}
  <div style={{
    position: 'absolute',
    top: '-50%',
    left: '-50%',
    width: '200%',
    height: '200%',
    background: `linear-gradient(45deg, transparent, ${stat.glow}, transparent)`,
    transform: 'rotate(45deg)',
    animation: 'shimmer 3s infinite',
    pointerEvents: 'none'
  }} />
              {/* Content */}
              <div style={{ position: 'relative', zIndex: 1 }}>
                <div style={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'flex-start',
                  marginBottom: '16px'
                }}>
                  <div style={{
                    background: stat.gradient,
                    padding: '10px',
                    borderRadius: '12px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    boxShadow: `0 4px 15px ${stat.glow}`
                  }}>
                    <Icon style={{ width: '24px', height: '24px', color: '#fff' }} />
                  </div>
                  <div style={{
                    background: `${stat.color}20`,
                    padding: '4px 12px',
                    borderRadius: '20px',
                    border: `1px solid ${stat.color}40`,
                    display: 'flex',
                    alignItems: 'center',
                    gap: '4px'
                  }}>
                    <Sparkles style={{ width: '12px', height: '12px', color: stat.color }} />
                    <span style={{ fontSize: '11px', color: stat.color, fontWeight: '600' }}>
                      LIVE
                    </span>
                  </div>
                </div>

                <h3 style={{
                  fontSize: '36px',
                  fontWeight: '900',
                  color: '#fff',
                  marginBottom: '4px',
                  fontFamily: 'Orbitron, monospace',
                  textShadow: `0 0 20px ${stat.glow}`
                }}>
                  {stat.value.toLocaleString()}
                </h3>
                
                <p style={{
                  fontSize: '14px',
                  color: '#9ca3af',
                  fontWeight: '600',
                  textTransform: 'uppercase',
                  letterSpacing: '0.5px',
                  marginBottom: '8px'
                }}>
                  {stat.title}
                </p>

                {stat.subtitle && (
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px',
                    marginTop: '8px',
                    paddingTop: '8px',
                    borderTop: '1px solid rgba(255, 255, 255, 0.1)'
                  }}>
                    <Zap style={{ width: '14px', height: '14px', color: stat.color }} />
                    <p style={{ fontSize: '12px', color: '#6b7280' }}>
                      {stat.subtitle}
                    </p>
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>

      {/* Refresh Button */}
      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
        <button
          onClick={onRefresh}
          style={{
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            padding: '12px 24px',
            background: 'rgba(147, 51, 234, 0.2)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(147, 51, 234, 0.3)',
            borderRadius: '12px',
            color: '#a855f7',
            cursor: 'pointer',
            transition: 'all 0.3s ease',
            fontSize: '14px',
            fontWeight: '600'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.background = 'rgba(147, 51, 234, 0.3)';
            e.currentTarget.style.transform = 'translateY(-2px)';
            e.currentTarget.style.boxShadow = '0 4px 15px rgba(147, 51, 234, 0.3)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.background = 'rgba(147, 51, 234, 0.2)';
            e.currentTarget.style.transform = 'translateY(0)';
            e.currentTarget.style.boxShadow = 'none';
          }}
        >
          <Clock style={{ width: '16px', height: '16px' }} />
          Refresh Stats
        </button>
      </div>

      {/* Animations */}
      <style jsx>{`
  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  @keyframes shimmer {
    0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
    100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
  }
`}</style>
    </div>
  );
}





component/admin/FeatureFlags.tsx
// File: frontend/components/admin/FeatureFlags.tsx
'use client';

import { useState, useEffect } from 'react';
import toast from 'react-hot-toast';
import { adminSettingsAPI, FeatureFlag } from '@/lib/adminSettings';
import { 
  Plus, Edit, Trash2, Users, Percent, 
  CheckCircle, Clock, AlertCircle, Eye, Settings
} from 'lucide-react';

interface FeatureFlagModalProps {
  flag?: FeatureFlag;
  isOpen: boolean;
  onClose: () => void;
  onSave: (flag: FeatureFlag) => void;
}

const FeatureFlagModal: React.FC<FeatureFlagModalProps> = ({ 
  flag, 
  isOpen, 
  onClose, 
  onSave 
}) => {
  const [formData, setFormData] = useState({
    flag_key: '',
    flag_name: '',
    description: '',
    is_enabled: false,
    rollout_percentage: 0,
    target_user_types: [] as string[]
  });
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    if (flag) {
      setFormData({
        flag_key: flag.flag_key,
        flag_name: flag.flag_name,
        description: flag.description || '',
        is_enabled: flag.is_enabled,
        rollout_percentage: flag.rollout_percentage,
        target_user_types: flag.target_user_types || []
      });
    } else {
      setFormData({
        flag_key: '',
        flag_name: '',
        description: '',
        is_enabled: false,
        rollout_percentage: 0,
        target_user_types: []
      });
    }
  }, [flag, isOpen]);

  const handleSave = async () => {
    if (!formData.flag_key || !formData.flag_name) {
      toast.error('Flag key and name are required');
      return;
    }

    setSaving(true);
    try {
      let savedFlag;
      if (flag) {
        savedFlag = await adminSettingsAPI.updateFeatureFlag(flag.flag_id, formData);
      } else {
        savedFlag = await adminSettingsAPI.createFeatureFlag(formData);
      }
      
      onSave(savedFlag);
      toast.success(`Feature flag ${flag ? 'updated' : 'created'} successfully!`);
      onClose();
    } catch (error) {
      console.error('Error saving feature flag:', error);
      toast.error('Failed to save feature flag');
    } finally {
      setSaving(false);
    }
  };

  const toggleUserType = (userType: string) => {
    setFormData(prev => ({
      ...prev,
      target_user_types: prev.target_user_types.includes(userType)
        ? prev.target_user_types.filter(t => t !== userType)
        : [...prev.target_user_types, userType]
    }));
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-gray-900 border border-purple-500/20 rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6 border-b border-purple-500/20">
          <h2 className="text-xl font-bold text-white">
            {flag ? 'Edit Feature Flag' : 'Create Feature Flag'}
          </h2>
          <p className="text-gray-400 text-sm mt-1">
            Configure feature flags for A/B testing and gradual rollouts
          </p>
        </div>

        <div className="p-6 space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Flag Key *
              </label>
              <input
                type="text"
                value={formData.flag_key}
                onChange={(e) => setFormData(prev => ({ ...prev, flag_key: e.target.value }))}
                placeholder="new_feature_enabled"
                className="w-full px-3 py-2 bg-black/50 border border-gray-600 rounded-lg text-white focus:border-purple-500 focus:outline-none"
                disabled={!!flag} // Can't edit key of existing flag
              />
              <p className="text-gray-500 text-xs mt-1">
                Unique identifier for this flag (lowercase, underscores only)
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Display Name *
              </label>
              <input
                type="text"
                value={formData.flag_name}
                onChange={(e) => setFormData(prev => ({ ...prev, flag_name: e.target.value }))}
                placeholder="New Feature Toggle"
                className="w-full px-3 py-2 bg-black/50 border border-gray-600 rounded-lg text-white focus:border-purple-500 focus:outline-none"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Description
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              placeholder="Describe what this feature flag controls..."
              rows={3}
              className="w-full px-3 py-2 bg-black/50 border border-gray-600 rounded-lg text-white focus:border-purple-500 focus:outline-none resize-none"
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-3">
                Flag Status
              </label>
              <div className="flex items-center gap-3">
                <button
                  onClick={() => setFormData(prev => ({ ...prev, is_enabled: !prev.is_enabled }))}
                  className={`relative w-12 h-6 rounded-full transition-all ${
                    formData.is_enabled ? 'bg-gradient-to-r from-green-600 to-green-500' : 'bg-gray-600'
                  }`}
                >
                  <div
                    className={`absolute top-0.5 w-5 h-5 bg-white rounded-full transition-all ${
                      formData.is_enabled ? 'left-6' : 'left-0.5'
                    }`}
                  />
                </button>
                <span className="text-sm text-gray-300">
                  {formData.is_enabled ? 'Enabled' : 'Disabled'}
                </span>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Rollout Percentage
              </label>
              <div className="space-y-2">
                <input
                  type="range"
                  min="0"
                  max="100"
                  value={formData.rollout_percentage}
                  onChange={(e) => setFormData(prev => ({ ...prev, rollout_percentage: parseInt(e.target.value) }))}
                  className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
                />
                <div className="flex justify-between text-sm">
                  <span className="text-gray-400">0%</span>
                  <div className="px-2 py-1 bg-purple-500/20 text-purple-300 rounded font-medium">
                    {formData.rollout_percentage}%
                  </div>
                  <span className="text-gray-400">100%</span>
                </div>
              </div>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-300 mb-3">
              Target User Types
            </label>
            <div className="flex flex-wrap gap-2">
              {['adventurer', 'coach', 'admin'].map(userType => (
                <button
                  key={userType}
                  onClick={() => toggleUserType(userType)}
                  className={`px-3 py-1 rounded-lg text-sm font-medium transition-all ${
                    formData.target_user_types.includes(userType)
                      ? 'bg-purple-600 text-white'
                      : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                  }`}
                >
                  {userType.charAt(0).toUpperCase() + userType.slice(1)}
                </button>
              ))}
            </div>
            <p className="text-gray-500 text-xs mt-2">
              Leave empty to target all user types
            </p>
          </div>
        </div>

        <div className="p-6 border-t border-purple-500/20 flex items-center justify-end gap-3">
          <button
            onClick={onClose}
            className="px-4 py-2 border border-gray-600 text-gray-300 rounded-lg hover:border-gray-500 hover:text-white transition-all"
          >
            Cancel
          </button>
          <button
            onClick={handleSave}
            disabled={saving}
            className="px-6 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all disabled:opacity-50 flex items-center gap-2"
          >
            {saving && <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />}
            {flag ? 'Update Flag' : 'Create Flag'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default function FeatureFlags() {
  const [flags, setFlags] = useState<FeatureFlag[]>([]);
  const [loading, setLoading] = useState(true);
  const [modalFlag, setModalFlag] = useState<FeatureFlag | undefined>();
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    fetchFlags();
  }, []);

  const fetchFlags = async () => {
    try {
      const flagsData = await adminSettingsAPI.getFeatureFlags();
      setFlags(flagsData);
    } catch (error) {
      console.error('Error fetching feature flags:', error);
      toast.error('Failed to load feature flags');
    } finally {
      setLoading(false);
    }
  };

  const handleToggleFlag = async (flag: FeatureFlag) => {
    try {
      const updatedFlag = await adminSettingsAPI.updateFeatureFlag(flag.flag_id, {
        is_enabled: !flag.is_enabled
      });
      
      setFlags(prev => prev.map(f => f.flag_id === flag.flag_id ? updatedFlag : f));
      toast.success(`Flag ${updatedFlag.is_enabled ? 'enabled' : 'disabled'} successfully!`);
    } catch (error) {
      console.error('Error toggling flag:', error);
      toast.error('Failed to toggle flag');
    }
  };

  const handleDeleteFlag = async (flag: FeatureFlag) => {
    if (!confirm(`Are you sure you want to delete the "${flag.flag_name}" feature flag?`)) {
      return;
    }

    try {
      await adminSettingsAPI.deleteFeatureFlag(flag.flag_id);
      setFlags(prev => prev.filter(f => f.flag_id !== flag.flag_id));
      toast.success('Feature flag deleted successfully!');
    } catch (error) {
      console.error('Error deleting flag:', error);
      toast.error('Failed to delete flag');
    }
  };

  const handleEditFlag = (flag: FeatureFlag) => {
    setModalFlag(flag);
    setShowModal(true);
  };

  const handleCreateFlag = () => {
    setModalFlag(undefined);
    setShowModal(true);
  };

  const handleSaveFlag = (savedFlag: FeatureFlag) => {
    if (modalFlag) {
      // Update existing
      setFlags(prev => prev.map(f => f.flag_id === savedFlag.flag_id ? savedFlag : f));
    } else {
      // Add new
      setFlags(prev => [savedFlag, ...prev]);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="w-8 h-8 border-4 border-purple-500/20 border-t-purple-500 rounded-full animate-spin"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold text-white">Feature Flags</h3>
          <p className="text-gray-400 text-sm">
            Manage A/B testing and gradual feature rollouts
          </p>
        </div>
        <button
          onClick={handleCreateFlag}
          className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all"
        >
          <Plus className="w-4 h-4" />
          Create Flag
        </button>
      </div>

      {flags.length === 0 ? (
        <div className="text-center py-12">
          <Settings className="w-12 h-12 text-gray-500 mx-auto mb-4" />
          <p className="text-gray-400 mb-4">No feature flags created yet</p>
          <button
            onClick={handleCreateFlag}
            className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-all"
          >
            Create Your First Flag
          </button>
        </div>
      ) : (
        <div className="grid grid-cols-1 gap-4">
          {flags.map((flag) => (
            <div
              key={flag.flag_id}
              className="bg-white/5 border border-white/10 rounded-lg p-4 hover:border-purple-500/30 transition-all"
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h4 className="text-white font-medium">{flag.flag_name}</h4>
                    <div className="flex items-center gap-2">
                      {flag.is_enabled ? (
                        <div className="flex items-center gap-1 px-2 py-1 bg-green-500/20 text-green-400 rounded-md text-xs">
                          <CheckCircle className="w-3 h-3" />
                          Enabled
                        </div>
                      ) : (
                        <div className="flex items-center gap-1 px-2 py-1 bg-gray-500/20 text-gray-400 rounded-md text-xs">
                          <Clock className="w-3 h-3" />
                          Disabled
                        </div>
                      )}
                      
                      {flag.rollout_percentage < 100 && flag.is_enabled && (
                        <div className="flex items-center gap-1 px-2 py-1 bg-yellow-500/20 text-yellow-400 rounded-md text-xs">
                          <Percent className="w-3 h-3" />
                          {flag.rollout_percentage}%
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <p className="text-gray-400 text-sm mb-2">{flag.description}</p>
                  
                  <div className="flex items-center gap-4 text-xs text-gray-500">
                    <span>Key: {flag.flag_key}</span>
                    {flag.target_user_types && flag.target_user_types.length > 0 && (
                      <div className="flex items-center gap-1">
                        <Users className="w-3 h-3" />
                        {flag.target_user_types.join(', ')}
                      </div>
                    )}
                    {flag.creator && (
                      <span>Created by: {flag.creator.username}</span>
                    )}
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <button
                    onClick={() => handleToggleFlag(flag)}
                    className={`relative w-10 h-5 rounded-full transition-all ${
                      flag.is_enabled ? 'bg-green-600' : 'bg-gray-600'
                    }`}
                  >
                    <div
                      className={`absolute top-0.5 w-4 h-4 bg-white rounded-full transition-all ${
                        flag.is_enabled ? 'left-5' : 'left-0.5'
                      }`}
                    />
                  </button>
                  
                  <button
                    onClick={() => handleEditFlag(flag)}
                    className="p-2 text-gray-400 hover:text-white hover:bg-white/10 rounded-lg transition-all"
                  >
                    <Edit className="w-4 h-4" />
                  </button>
                  
                  <button
                    onClick={() => handleDeleteFlag(flag)}
                    className="p-2 text-gray-400 hover:text-red-400 hover:bg-red-500/10 rounded-lg transition-all"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      <FeatureFlagModal
        flag={modalFlag}
        isOpen={showModal}
        onClose={() => setShowModal(false)}
        onSave={handleSaveFlag}
      />
    </div>
  );
}






component/admin/QuestManagementModal.tsx
'use client';
import { useState, useEffect } from 'react';
import api from '@/lib/api';
import toast from 'react-hot-toast';
import { 
  X, Search, Filter, Target, CheckCircle, Clock, 
  ChevronLeft, ChevronRight, Zap, Trophy, Star,
  Calendar, User
} from 'lucide-react';

interface QuestModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function QuestManagementModal({ isOpen, onClose }: QuestModalProps) {
  const [quests, setQuests] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all'); // all, active, completed
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  useEffect(() => {
    if (isOpen) {
      fetchQuests();
    }
  }, [isOpen, currentPage, filterStatus]);

  const fetchQuests = async () => {
    try {
      setLoading(true);
      const response = await api.get('/admin/quests', {
        params: {
          page: currentPage,
          limit: 15,
          status: filterStatus === 'all' ? undefined : filterStatus
        }
      });
      setQuests(response.data.quests || []);
      setTotalPages(response.data.pagination?.pages || 1);
    } catch (error) {
      console.error('Failed to fetch quests:', error);
      toast.error('Failed to load quests');
    } finally {
      setLoading(false);
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch(difficulty?.toLowerCase()) {
      case 'easy': return { bg: 'rgba(16, 185, 129, 0.1)', text: '#10b981', border: 'rgba(16, 185, 129, 0.3)' };
      case 'medium': return { bg: 'rgba(245, 158, 11, 0.1)', text: '#f59e0b', border: 'rgba(245, 158, 11, 0.3)' };
      case 'hard': return { bg: 'rgba(239, 68, 68, 0.1)', text: '#ef4444', border: 'rgba(239, 68, 68, 0.3)' };
      default: return { bg: 'rgba(107, 114, 128, 0.1)', text: '#6b7280', border: 'rgba(107, 114, 128, 0.3)' };
    }
  };

  const getStatusColor = (isCompleted: boolean) => {
    if (isCompleted) {
      return { bg: 'rgba(16, 185, 129, 0.1)', text: '#10b981', border: 'rgba(16, 185, 129, 0.3)', icon: CheckCircle };
    }
    return { bg: 'rgba(59, 130, 246, 0.1)', text: '#3b82f6', border: 'rgba(59, 130, 246, 0.3)', icon: Clock };
  };

  const filteredQuests = quests.filter(quest => 
    quest.quest_title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    quest.username?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (!isOpen) return null;

  return (
    <div style={{
      position: 'fixed',
      inset: 0,
      background: 'rgba(0, 0, 0, 0.85)',
      backdropFilter: 'blur(10px)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 100,
      padding: '20px',
      animation: 'fadeIn 0.3s ease-out'
    }}>
      <div style={{
        background: 'rgba(0, 0, 0, 0.95)',
        border: '1px solid rgba(147, 51, 234, 0.3)',
        borderRadius: '20px',
        width: '100%',
        maxWidth: '1200px',
        maxHeight: '90vh',
        overflow: 'hidden',
        position: 'relative',
        boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)',
        animation: 'slideUp 0.3s ease-out'
      }}>
        {/* Header */}
        <div style={{
          background: 'linear-gradient(135deg, rgba(147, 51, 234, 0.2), rgba(236, 72, 153, 0.2))',
          borderBottom: '1px solid rgba(147, 51, 234, 0.3)',
          padding: '24px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
            <div style={{
              background: 'linear-gradient(135deg, #9333ea, #ec4899)',
              padding: '10px',
              borderRadius: '12px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              boxShadow: '0 0 20px rgba(147, 51, 234, 0.5)'
            }}>
              <Target style={{ width: '24px', height: '24px', color: '#fff' }} />
            </div>
            <div>
              <h2 style={{
                fontSize: '24px',
                fontWeight: '700',
                color: '#fff',
                fontFamily: 'Orbitron, monospace'
              }}>
                Quest Management
              </h2>
              <p style={{ fontSize: '14px', color: '#9ca3af' }}>
                View and manage all system quests
              </p>
            </div>
          </div>

          <button
            onClick={onClose}
            style={{
              background: 'rgba(239, 68, 68, 0.1)',
              border: '1px solid rgba(239, 68, 68, 0.3)',
              borderRadius: '10px',
              padding: '10px',
              color: '#ef4444',
              cursor: 'pointer',
              transition: 'all 0.3s ease'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.background = 'rgba(239, 68, 68, 0.2)';
              e.currentTarget.style.transform = 'scale(1.1)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.background = 'rgba(239, 68, 68, 0.1)';
              e.currentTarget.style.transform = 'scale(1)';
            }}
          >
            <X style={{ width: '20px', height: '20px' }} />
          </button>
        </div>

        {/* Content */}
        <div style={{
          padding: '24px',
          overflowY: 'auto',
          maxHeight: 'calc(90vh - 150px)'
        }}>
          {/* Search and Filter */}
          <div style={{
            display: 'flex',
            gap: '12px',
            marginBottom: '24px',
            flexWrap: 'wrap'
          }}>
            <div style={{
              flex: 1,
              minWidth: '250px',
              position: 'relative'
            }}>
              <Search style={{
                position: 'absolute',
                left: '12px',
                top: '50%',
                transform: 'translateY(-50%)',
                width: '18px',
                height: '18px',
                color: '#9ca3af'
              }} />
              <input
                type="text"
                placeholder="Search quests or users..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                style={{
                  width: '100%',
                  padding: '10px 12px 10px 40px',
                  background: 'rgba(0, 0, 0, 0.4)',
                  border: '1px solid rgba(147, 51, 234, 0.2)',
                  borderRadius: '10px',
                  color: '#fff',
                  fontSize: '14px',
                  outline: 'none',
                  transition: 'all 0.3s ease'
                }}
                onFocus={(e) => {
                  e.currentTarget.style.borderColor = '#9333ea';
                  e.currentTarget.style.boxShadow = '0 0 0 3px rgba(147, 51, 234, 0.1)';
                }}
                onBlur={(e) => {
                  e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.2)';
                  e.currentTarget.style.boxShadow = 'none';
                }}
              />
            </div>

            <div style={{ display: 'flex', gap: '8px' }}>
              {['all', 'active', 'completed'].map((status) => (
                <button
                  key={status}
                  onClick={() => {
                    setFilterStatus(status);
                    setCurrentPage(1);
                  }}
                  style={{
                    padding: '10px 20px',
                    background: filterStatus === status ? 'linear-gradient(135deg, #9333ea, #ec4899)' : 'rgba(0, 0, 0, 0.4)',
                    border: filterStatus === status ? '1px solid rgba(147, 51, 234, 0.5)' : '1px solid rgba(147, 51, 234, 0.2)',
                    borderRadius: '10px',
                    color: filterStatus === status ? '#fff' : '#9ca3af',
                    cursor: 'pointer',
                    fontSize: '14px',
                    fontWeight: '600',
                    textTransform: 'capitalize',
                    transition: 'all 0.3s ease',
                    boxShadow: filterStatus === status ? '0 4px 15px rgba(147, 51, 234, 0.3)' : 'none'
                  }}
                  onMouseEnter={(e) => {
                    if (filterStatus !== status) {
                      e.currentTarget.style.background = 'rgba(147, 51, 234, 0.2)';
                      e.currentTarget.style.color = '#fff';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (filterStatus !== status) {
                      e.currentTarget.style.background = 'rgba(0, 0, 0, 0.4)';
                      e.currentTarget.style.color = '#9ca3af';
                    }
                  }}
                >
                  {status}
                </button>
              ))}
            </div>
          </div>

          {/* Quest List */}
          {loading ? (
            <div style={{ textAlign: 'center', padding: '60px 0' }}>
              <div style={{
                width: '48px',
                height: '48px',
                border: '4px solid rgba(147, 51, 234, 0.3)',
                borderTopColor: '#9333ea',
                borderRadius: '50%',
                animation: 'spin 1s linear infinite',
                margin: '0 auto 16px'
              }} />
              <p style={{ color: '#9ca3af', fontSize: '16px' }}>Loading quests...</p>
            </div>
          ) : filteredQuests.length === 0 ? (
            <div style={{ textAlign: 'center', padding: '60px 0' }}>
              <Target style={{ width: '48px', height: '48px', color: '#6b7280', margin: '0 auto 16px' }} />
              <p style={{ color: '#9ca3af', fontSize: '16px' }}>No quests found</p>
            </div>
          ) : (
            <div style={{ display: 'grid', gap: '12px' }}>
              {filteredQuests.map((quest, index) => {
                const difficultyColors = getDifficultyColor(quest.difficulty);
                const statusColors = getStatusColor(quest.is_completed);
                const StatusIcon = statusColors.icon;
                
                return (
                  <div
                    key={quest.active_quest_id || index}
                    style={{
                      background: 'rgba(0, 0, 0, 0.4)',
                      border: '1px solid rgba(147, 51, 234, 0.2)',
                      borderRadius: '12px',
                      padding: '20px',
                      transition: 'all 0.3s ease',
                      position: 'relative',
                      overflow: 'hidden'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                      e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.4)';
                      e.currentTarget.style.transform = 'translateX(4px)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = 'rgba(0, 0, 0, 0.4)';
                      e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.2)';
                      e.currentTarget.style.transform = 'translateX(0)';
                    }}
                  >
                    {/* Status Indicator Bar */}
                    <div style={{
                      position: 'absolute',
                      left: 0,
                      top: 0,
                      bottom: 0,
                      width: '4px',
                      background: statusColors.text,
                      borderRadius: '12px 0 0 12px'
                    }} />

                    <div style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'flex-start',
                      gap: '16px',
                      paddingLeft: '12px'
                    }}>
                      <div style={{ flex: 1 }}>
                        {/* Quest Title & User */}
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '12px',
                          marginBottom: '12px',
                          flexWrap: 'wrap'
                        }}>
                          <h3 style={{
                            fontSize: '18px',
                            fontWeight: '700',
                            color: '#fff',
                            margin: 0
                          }}>
                            {quest.quest_title || 'Untitled Quest'}
                          </h3>
                          
                          {quest.username && (
                            <div style={{
                              display: 'flex',
                              alignItems: 'center',
                              gap: '6px',
                              padding: '4px 10px',
                              background: 'rgba(147, 51, 234, 0.1)',
                              border: '1px solid rgba(147, 51, 234, 0.3)',
                              borderRadius: '6px'
                            }}>
                              <User style={{ width: '14px', height: '14px', color: '#a855f7' }} />
                              <span style={{ fontSize: '13px', color: '#a855f7', fontWeight: '600' }}>
                                {quest.username}
                              </span>
                            </div>
                          )}
                        </div>

                        {/* Quest Description */}
                        {quest.quest_description && (
                          <p style={{
                            fontSize: '14px',
                            color: '#9ca3af',
                            marginBottom: '12px',
                            lineHeight: '1.5'
                          }}>
                            {quest.quest_description}
                          </p>
                        )}

                        {/* Quest Details */}
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '16px',
                          flexWrap: 'wrap'
                        }}>
                          {/* Difficulty Badge */}
                          <div style={{
                            padding: '4px 12px',
                            background: difficultyColors.bg,
                            border: `1px solid ${difficultyColors.border}`,
                            borderRadius: '6px',
                            display: 'flex',
                            alignItems: 'center',
                            gap: '6px'
                          }}>
                            <Star style={{ width: '14px', height: '14px', color: difficultyColors.text }} />
                            <span style={{
                              fontSize: '13px',
                              color: difficultyColors.text,
                              fontWeight: '600',
                              textTransform: 'uppercase'
                            }}>
                              {quest.difficulty || 'N/A'}
                            </span>
                          </div>

                          {/* XP Badge */}
                          {quest.base_xp && (
                            <div style={{
                              padding: '4px 12px',
                              background: 'rgba(245, 158, 11, 0.1)',
                              border: '1px solid rgba(245, 158, 11, 0.3)',
                              borderRadius: '6px',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '6px'
                            }}>
                              <Zap style={{ width: '14px', height: '14px', color: '#f59e0b' }} />
                              <span style={{ fontSize: '13px', color: '#f59e0b', fontWeight: '600' }}>
                                {quest.base_xp} XP
                              </span>
                            </div>
                          )}

                          {/* Completion Date */}
                          {quest.completed_at && (
                            <div style={{
                              padding: '4px 12px',
                              background: 'rgba(107, 114, 128, 0.1)',
                              border: '1px solid rgba(107, 114, 128, 0.3)',
                              borderRadius: '6px',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '6px'
                            }}>
                              <Calendar style={{ width: '14px', height: '14px', color: '#6b7280' }} />
                              <span style={{ fontSize: '12px', color: '#9ca3af' }}>
                                {new Date(quest.completed_at).toLocaleDateString()}
                              </span>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Status Badge */}
                      <div style={{
                        padding: '8px 16px',
                        background: statusColors.bg,
                        border: `1px solid ${statusColors.border}`,
                        borderRadius: '10px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px',
                        flexShrink: 0
                      }}>
                        <StatusIcon style={{ width: '18px', height: '18px', color: statusColors.text }} />
                        <span style={{
                          fontSize: '14px',
                          color: statusColors.text,
                          fontWeight: '700',
                          textTransform: 'uppercase'
                        }}>
                          {quest.is_completed ? 'Completed' : 'Active'}
                        </span>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {/* Pagination */}
          {totalPages > 1 && (
            <div style={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              gap: '12px',
              marginTop: '24px',
              paddingTop: '20px',
              borderTop: '1px solid rgba(147, 51, 234, 0.2)'
            }}>
              <button
                onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                disabled={currentPage === 1}
                style={{
                  padding: '8px 16px',
                  background: 'rgba(147, 51, 234, 0.2)',
                  border: '1px solid rgba(147, 51, 234, 0.3)',
                  borderRadius: '8px',
                  color: '#a855f7',
                  cursor: currentPage === 1 ? 'not-allowed' : 'pointer',
                  opacity: currentPage === 1 ? 0.5 : 1,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '4px',
                  fontWeight: '600',
                  fontSize: '14px',
                  transition: 'all 0.3s ease'
                }}
              >
                <ChevronLeft style={{ width: '16px', height: '16px' }} />
                Previous
              </button>

              <div style={{
                padding: '8px 16px',
                background: 'rgba(0, 0, 0, 0.4)',
                border: '1px solid rgba(147, 51, 234, 0.3)',
                borderRadius: '8px'
              }}>
                <span style={{ color: '#a855f7', fontWeight: '600', fontSize: '14px' }}>
                  Page {currentPage}
                </span>
                <span style={{ color: '#6b7280', margin: '0 6px' }}>/</span>
                <span style={{ color: '#9ca3af', fontSize: '14px' }}>
                  {totalPages}
                </span>
              </div>

              <button
                onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                disabled={currentPage === totalPages}
                style={{
                  padding: '8px 16px',
                  background: 'rgba(147, 51, 234, 0.2)',
                  border: '1px solid rgba(147, 51, 234, 0.3)',
                  borderRadius: '8px',
                  color: '#a855f7',
                  cursor: currentPage === totalPages ? 'not-allowed' : 'pointer',
                  opacity: currentPage === totalPages ? 0.5 : 1,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '4px',
                  fontWeight: '600',
                  fontSize: '14px',
                  transition: 'all 0.3s ease'
                }}
              >
                Next
                <ChevronRight style={{ width: '16px', height: '16px' }} />
              </button>
            </div>
          )}
        </div>
      </div>

      <style jsx>{`
        @keyframes spin {
          to { transform: rotate(360deg); }
        }

        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }

        @keyframes slideUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
      `}</style>
    </div>
  );
}





component/admin/SystemMonitoring.tsx
// File: frontend/components/admin/SystemMonitoring.tsx
'use client';

import { useState, useEffect } from 'react';
import toast from 'react-hot-toast';
import { adminSettingsAPI, SystemHealth, AnalyticsData } from '@/lib/adminSettings';
import { 
  Activity, Database, Users, Clock, AlertTriangle, 
  CheckCircle, TrendingUp, BarChart3, Zap, Globe,
  RefreshCw, Download, Calendar
} from 'lucide-react';

interface MetricCardProps {
  title: string;
  value: string | number;
  subtitle?: string;
  icon: React.ComponentType<any>;
  color: string;
  trend?: 'up' | 'down' | 'neutral';
}

const MetricCard: React.FC<MetricCardProps> = ({ 
  title, 
  value, 
  subtitle, 
  icon: Icon, 
  color, 
  trend 
}) => {
  return (
    <div className="bg-white/5 border border-white/10 rounded-lg p-4 hover:border-purple-500/30 transition-all">
      <div className="flex items-center justify-between mb-3">
        <div className={`p-2 rounded-lg bg-gradient-to-br ${color}`}>
          <Icon className="w-5 h-5 text-white" />
        </div>
        {trend && (
          <div className={`text-xs font-medium ${
            trend === 'up' ? 'text-green-400' : 
            trend === 'down' ? 'text-red-400' : 
            'text-gray-400'
          }`}>
            {trend === 'up' ? '↗' : trend === 'down' ? '↘' : '→'}
          </div>
        )}
      </div>
      
      <div>
        <h3 className="text-2xl font-bold text-white mb-1">{value}</h3>
        <p className="text-gray-400 text-sm">{title}</p>
        {subtitle && (
          <p className="text-gray-500 text-xs mt-1">{subtitle}</p>
        )}
      </div>
    </div>
  );
};

interface PerformanceChartProps {
  metrics: Array<{
    log_id: number;
    endpoint: string;
    method: string;
    response_time_ms: number;
    status_code: number;
    created_at: string;
  }>;
}

const PerformanceChart: React.FC<PerformanceChartProps> = ({ metrics }) => {
  const [selectedTimeframe, setSelectedTimeframe] = useState('1h');

  // Group metrics by time intervals
  const groupMetricsByTime = (timeframe: string) => {
    const now = new Date();
    const intervals: { [key: string]: number[] } = {};
    
    metrics.forEach(metric => {
      const metricTime = new Date(metric.created_at);
      let intervalKey: string;
      
      if (timeframe === '1h') {
        // Group by 5-minute intervals
        const minutes = Math.floor(metricTime.getMinutes() / 5) * 5;
        intervalKey = `${metricTime.getHours()}:${minutes.toString().padStart(2, '0')}`;
      } else {
        // Group by hours
        intervalKey = `${metricTime.getHours()}:00`;
      }
      
      if (!intervals[intervalKey]) {
        intervals[intervalKey] = [];
      }
      intervals[intervalKey].push(metric.response_time_ms);
    });

    // Calculate averages
    return Object.entries(intervals)
      .map(([time, responseTimes]) => ({
        time,
        avg: Math.round(responseTimes.reduce((sum, rt) => sum + rt, 0) / responseTimes.length),
        max: Math.max(...responseTimes),
        count: responseTimes.length
      }))
      .sort((a, b) => a.time.localeCompare(b.time))
      .slice(-12); // Show last 12 data points
  };

  const chartData = groupMetricsByTime(selectedTimeframe);
  const maxValue = Math.max(...chartData.map(d => d.max), 1);

  return (
    <div className="bg-white/5 border border-white/10 rounded-lg p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-white">Response Time Trends</h3>
        <div className="flex items-center gap-2">
          {['1h', '6h', '24h'].map(timeframe => (
            <button
              key={timeframe}
              onClick={() => setSelectedTimeframe(timeframe)}
              className={`px-3 py-1 rounded text-sm transition-all ${
                selectedTimeframe === timeframe
                  ? 'bg-purple-600 text-white'
                  : 'text-gray-400 hover:text-white hover:bg-white/10'
              }`}
            >
              {timeframe}
            </button>
          ))}
        </div>
      </div>

      <div className="h-64 flex items-end justify-between gap-1">
        {chartData.map((data, index) => (
          <div key={index} className="flex-1 flex flex-col items-center">
            <div className="w-full flex flex-col justify-end h-48 gap-1">
              {/* Max response time bar */}
              <div
                className="w-full bg-red-500/30 rounded-t"
                style={{ height: `${(data.max / maxValue) * 100}%`, minHeight: '2px' }}
                title={`Max: ${data.max}ms`}
              />
              {/* Average response time bar */}
              <div
                className="w-full bg-gradient-to-t from-purple-600 to-blue-500 rounded-t"
                style={{ height: `${(data.avg / maxValue) * 100}%`, minHeight: '4px' }}
                title={`Avg: ${data.avg}ms, Requests: ${data.count}`}
              />
            </div>
            <div className="text-xs text-gray-400 mt-2 transform -rotate-45 origin-top">
              {data.time}
            </div>
          </div>
        ))}
      </div>

      <div className="flex items-center justify-center gap-4 mt-4 text-xs">
        <div className="flex items-center gap-2">
          <div className="w-3 h-2 bg-gradient-to-r from-purple-600 to-blue-500 rounded"></div>
          <span className="text-gray-400">Average Response Time</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-3 h-2 bg-red-500/30 rounded"></div>
          <span className="text-gray-400">Maximum Response Time</span>
        </div>
      </div>
    </div>
  );
};

export default function SystemMonitoring() {
  const [systemHealth, setSystemHealth] = useState<SystemHealth | null>(null);
  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [analyticsTimeframe, setAnalyticsTimeframe] = useState<'24h' | '7d' | '30d'>('7d');

  useEffect(() => {
    fetchMonitoringData();
  }, [analyticsTimeframe]);

  const fetchMonitoringData = async () => {
    setRefreshing(true);
    try {
      const [healthData, analyticsData] = await Promise.all([
        adminSettingsAPI.getSystemHealth(),
        adminSettingsAPI.getAnalytics(analyticsTimeframe)
      ]);
      
      setSystemHealth(healthData);
      setAnalytics(analyticsData);
    } catch (error) {
      console.error('Error fetching monitoring data:', error);
      toast.error('Failed to load monitoring data');
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  const exportAnalytics = async () => {
    try {
      const data = {
        system_health: systemHealth,
        analytics: analytics,
        exported_at: new Date().toISOString()
      };
      
      const blob = new Blob([JSON.stringify(data, null, 2)], { 
        type: 'application/json' 
      });
      
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `system-monitoring-${Date.now()}.json`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      
      toast.success('Monitoring data exported successfully!');
    } catch (error) {
      console.error('Error exporting analytics:', error);
      toast.error('Failed to export monitoring data');
    }
  };

  if (loading && !systemHealth) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="w-8 h-8 border-4 border-purple-500/20 border-t-purple-500 rounded-full animate-spin"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold text-white">System Monitoring</h3>
          <p className="text-gray-400 text-sm">
            Real-time system health and performance metrics
          </p>
        </div>
        
        <div className="flex items-center gap-3">
          <button
            onClick={exportAnalytics}
            className="flex items-center gap-2 px-3 py-2 border border-purple-500/30 text-purple-300 rounded-lg hover:border-purple-500/50 transition-all"
          >
            <Download className="w-4 h-4" />
            Export
          </button>
          
          <button
            onClick={fetchMonitoringData}
            disabled={refreshing}
            className="flex items-center gap-2 px-3 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-all disabled:opacity-50"
          >
            <RefreshCw className={`w-4 h-4 ${refreshing ? 'animate-spin' : ''}`} />
            Refresh
          </button>
        </div>
      </div>

      {/* System Health Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <MetricCard
          title="Database Status"
          value={systemHealth?.database === 'healthy' ? 'Healthy' : 'Unhealthy'}
          icon={Database}
          color={systemHealth?.database === 'healthy' ? 'from-green-600 to-green-500' : 'from-red-600 to-red-500'}
          trend={systemHealth?.database === 'healthy' ? 'neutral' : 'down'}
        />
        
        <MetricCard
          title="Avg Response Time"
          value={`${systemHealth?.average_response_time || 0}ms`}
          subtitle="Last 24 hours"
          icon={Zap}
          color={
            (systemHealth?.average_response_time || 0) < 200 ? 'from-green-600 to-green-500' :
            (systemHealth?.average_response_time || 0) < 500 ? 'from-yellow-600 to-yellow-500' :
            'from-red-600 to-red-500'
          }
          trend={
            (systemHealth?.average_response_time || 0) < 200 ? 'up' :
            (systemHealth?.average_response_time || 0) < 500 ? 'neutral' : 'down'
          }
        />
        
        <MetricCard
          title="Active Users"
          value={systemHealth?.active_users || 0}
          subtitle="Current sessions"
          icon={Users}
          color="from-blue-600 to-blue-500"
          trend="neutral"
        />
        
        <MetricCard
          title="Error Rate"
          value={`${Object.values(systemHealth?.error_counts || {}).reduce((sum, count) => sum + count, 0)}`}
          subtitle="Last 24 hours"
          icon={AlertTriangle}
          color="from-orange-600 to-orange-500"
          trend="down"
        />
      </div>

      {/* Performance Chart */}
      {systemHealth?.performance_metrics && systemHealth.performance_metrics.length > 0 && (
        <PerformanceChart metrics={systemHealth.performance_metrics} />
      )}

      {/* Error Summary */}
      {systemHealth?.error_counts && Object.keys(systemHealth.error_counts).length > 0 && (
        <div className="bg-white/5 border border-white/10 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-white mb-4">Error Summary (24h)</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {Object.entries(systemHealth.error_counts).map(([level, count]) => (
              <div key={level} className="flex items-center justify-between p-3 bg-white/5 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className={`w-3 h-3 rounded-full ${
                    level === 'critical' ? 'bg-red-500' :
                    level === 'error' ? 'bg-orange-500' :
                    level === 'warn' ? 'bg-yellow-500' :
                    'bg-blue-500'
                  }`} />
                  <span className="text-gray-300 capitalize">{level}</span>
                </div>
                <span className="text-white font-semibold">{count}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Analytics Section */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-white">User Analytics</h3>
          <div className="flex items-center gap-2">
            {(['24h', '7d', '30d'] as const).map(timeframe => (
              <button
                key={timeframe}
                onClick={() => setAnalyticsTimeframe(timeframe)}
                className={`px-3 py-1 rounded text-sm transition-all ${
                  analyticsTimeframe === timeframe
                    ? 'bg-purple-600 text-white'
                    : 'text-gray-400 hover:text-white hover:bg-white/10'
                }`}
              >
                {timeframe === '24h' ? '24 Hours' : timeframe === '7d' ? '7 Days' : '30 Days'}
              </button>
            ))}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <MetricCard
            title="Unique Users"
            value={analytics?.unique_users || 0}
            subtitle={`In last ${analyticsTimeframe}`}
            icon={Users}
            color="from-purple-600 to-purple-500"
          />
          
          <MetricCard
            title="Total Events"
            value={analytics?.total_events || 0}
            subtitle="All user interactions"
            icon={Activity}
            color="from-blue-600 to-blue-500"
          />
          
          <MetricCard
            title="Page Views"
            value={analytics?.event_counts?.pageview || 0}
            subtitle="Navigation events"
            icon={Globe}
            color="from-green-600 to-green-500"
          />
        </div>

        {/* Event Breakdown */}
        {analytics?.event_counts && Object.keys(analytics.event_counts).length > 0 && (
          <div className="bg-white/5 border border-white/10 rounded-lg p-6">
            <h4 className="text-lg font-semibold text-white mb-4">Event Breakdown</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {Object.entries(analytics.event_counts)
                .sort(([,a], [,b]) => (b as number) - (a as number))
                .map(([eventType, count]) => (
                <div key={eventType} className="flex items-center justify-between p-3 bg-white/5 rounded-lg">
                  <span className="text-gray-300 capitalize">
                    {eventType.replace(/_/g, ' ')}
                  </span>
                  <span className="text-white font-semibold">{count}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Page Views Chart */}
        {analytics?.page_views_by_day && Object.keys(analytics.page_views_by_day).length > 0 && (
          <div className="bg-white/5 border border-white/10 rounded-lg p-6">
            <h4 className="text-lg font-semibold text-white mb-4">Daily Page Views</h4>
            <div className="h-48 flex items-end justify-between gap-2">
              {Object.entries(analytics.page_views_by_day)
                .sort(([dateA], [dateB]) => dateA.localeCompare(dateB))
                .slice(-14) // Show last 14 days
                .map(([date, views], index) => {
                  const maxViews = Math.max(...Object.values(analytics.page_views_by_day));
                  const height = maxViews > 0 ? (views / maxViews) * 100 : 0;
                  
                  return (
                    <div key={date} className="flex-1 flex flex-col items-center">
                      <div
                        className="w-full bg-gradient-to-t from-purple-600 to-blue-500 rounded-t min-h-[4px] transition-all hover:from-purple-500 hover:to-blue-400"
                        style={{ height: `${height}%` }}
                        title={`${date}: ${views} views`}
                      />
                      <div className="text-xs text-gray-400 mt-2 transform -rotate-45 origin-top">
                        {new Date(date).toLocaleDateString('en-US', { 
                          month: 'short', 
                          day: 'numeric' 
                        })}
                      </div>
                    </div>
                  );
                })
              }
            </div>
          </div>
        )}

        {/* Recent Activity */}
        {analytics?.recent_events && analytics.recent_events.length > 0 && (
          <div className="bg-white/5 border border-white/10 rounded-lg p-6">
            <h4 className="text-lg font-semibold text-white mb-4">Recent Activity</h4>
            <div className="space-y-3 max-h-64 overflow-y-auto">
              {analytics.recent_events.slice(0, 20).map((event) => (
                <div key={event.analytics_id} className="flex items-center justify-between p-3 bg-white/5 rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className={`w-2 h-2 rounded-full ${
                      event.event_type === 'pageview' ? 'bg-blue-500' :
                      event.event_type === 'quest_complete' ? 'bg-green-500' :
                      event.event_type === 'level_up' ? 'bg-yellow-500' :
                      'bg-purple-500'
                    }`} />
                    <div>
                      <span className="text-white text-sm capitalize">
                        {event.event_type.replace(/_/g, ' ')}
                      </span>
                      {event.page_url && (
                        <p className="text-gray-400 text-xs">{event.page_url}</p>
                      )}
                    </div>
                  </div>
                  <div className="text-gray-400 text-xs">
                    {new Date(event.created_at).toLocaleTimeString()}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* System Status Footer */}
      <div className="bg-white/5 border border-white/10 rounded-lg p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <CheckCircle className="w-5 h-5 text-green-400" />
            <span className="text-gray-300">System Status: All services operational</span>
          </div>
          
          <div className="flex items-center gap-2 text-gray-400 text-sm">
            <Clock className="w-4 h-4" />
            Last updated: {systemHealth?.timestamp ? 
              new Date(systemHealth.timestamp).toLocaleString() : 
              'Never'
            }
          </div>
        </div>
      </div>
    </div>
  );
}







component/admin/UserManagement.tsx
'use client';
import { useState, useEffect } from 'react';
import api from '@/lib/api';
import toast from 'react-hot-toast';
import { 
  Search, Filter, Trash2, Eye, Power,
  ChevronLeft, ChevronRight, User, Crown, Shield, Sword
} from 'lucide-react';

interface UserManagementProps {
  initialFilter?: string;
}

export default function UserManagement({ initialFilter = 'all' }: UserManagementProps) {
  const [users, setUsers] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState(initialFilter);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [userToDelete, setUserToDelete] = useState<any>(null);

  useEffect(() => {
  setFilterType(initialFilter || 'all');
  setCurrentPage(1); // Reset to first page when filter changes
}, [initialFilter]);

  useEffect(() => {
    fetchUsers();
  }, [currentPage, filterType]);

  const fetchUsers = async () => {
    try {
      setLoading(true);
      const response = await api.get('/admin/users', {
        params: {
          page: currentPage,
          limit: 10,
          user_type: filterType === 'all' ? undefined : filterType
        }
      });
      setUsers(response.data.users || []);
      setTotalPages(response.data.pagination?.pages || 1);
    } catch (error) {
      console.error('Failed to fetch users:', error);
      toast.error('Failed to load users');
    } finally {
      setLoading(false);
    }
  };

  const handleToggleStatus = async (userId: number) => {
    try {
      await api.patch(`/admin/users/${userId}/toggle-status`);
      toast.success('User status updated');
      fetchUsers();
    } catch (error) {
      toast.error('Failed to update user status');
    }
  };

  const handleDeleteUser = async () => {
    if (!userToDelete) return;
    
    try {
      await api.delete(`/admin/users/${userToDelete.user_id}`);
      toast.success('User deleted successfully');
      setShowDeleteModal(false);
      setUserToDelete(null);
      fetchUsers();
    } catch (error) {
      toast.error('Failed to delete user');
    }
  };

  const getUserTypeIcon = (type: string) => {
    switch(type) {
      case 'admin': return Crown;
      case 'coach': return Shield;
      case 'adventurer': return Sword;
      default: return User;
    }
  };

  const getUserTypeColor = (type: string) => {
    switch(type) {
      case 'admin': return { bg: 'rgba(236, 72, 153, 0.1)', text: '#ec4899', border: 'rgba(236, 72, 153, 0.3)' };
      case 'coach': return { bg: 'rgba(16, 185, 129, 0.1)', text: '#10b981', border: 'rgba(16, 185, 129, 0.3)' };
      case 'adventurer': return { bg: 'rgba(59, 130, 246, 0.1)', text: '#3b82f6', border: 'rgba(59, 130, 246, 0.3)' };
      default: return { bg: 'rgba(107, 114, 128, 0.1)', text: '#6b7280', border: 'rgba(107, 114, 128, 0.3)' };
    }
  };

  const filteredUsers = users.filter(user => 
    user.username?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    user.email?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div style={{
      background: 'rgba(0, 0, 0, 0.4)',
      backdropFilter: 'blur(20px)',
      borderRadius: '16px',
      border: '1px solid rgba(147, 51, 234, 0.2)',
      padding: '24px'
    }}>
      {/* Header */}
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '24px'
      }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
          <User style={{ width: '24px', height: '24px', color: '#a855f7' }} />
          <h2 style={{
            fontSize: '24px',
            fontWeight: '700',
            color: '#fff',
            fontFamily: 'Orbitron, monospace'
          }}>
            User Management
          </h2>
        </div>
      </div>

      {/* Search and Filter */}
      <div style={{
        display: 'flex',
        gap: '12px',
        marginBottom: '20px',
        flexWrap: 'wrap'
      }}>
        <div style={{
          flex: 1,
          minWidth: '250px',
          position: 'relative'
        }}>
          <Search style={{
            position: 'absolute',
            left: '12px',
            top: '50%',
            transform: 'translateY(-50%)',
            width: '18px',
            height: '18px',
            color: '#9ca3af'
          }} />
          <input
            type="text"
            placeholder="Search users..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            style={{
              width: '100%',
              padding: '10px 12px 10px 40px',
              background: 'rgba(0, 0, 0, 0.3)',
              border: '1px solid rgba(147, 51, 234, 0.2)',
              borderRadius: '8px',
              color: '#fff',
              fontSize: '14px',
              outline: 'none',
              transition: 'all 0.3s ease'
            }}
            onFocus={(e) => {
              e.currentTarget.style.borderColor = '#9333ea';
              e.currentTarget.style.boxShadow = '0 0 0 3px rgba(147, 51, 234, 0.1)';
            }}
            onBlur={(e) => {
              e.currentTarget.style.borderColor = 'rgba(147, 51, 234, 0.2)';
              e.currentTarget.style.boxShadow = 'none';
            }}
          />
        </div>

        <div style={{ display: 'flex', gap: '8px' }}>
          {['all', 'adventurer', 'coach', 'admin'].map((type) => (
            <button
              key={type}
              onClick={() => setFilterType(type)}
              style={{
                padding: '10px 20px',
                background: filterType === type ? 'rgba(147, 51, 234, 0.2)' : 'rgba(0, 0, 0, 0.3)',
                border: filterType === type ? '1px solid rgba(147, 51, 234, 0.5)' : '1px solid rgba(147, 51, 234, 0.2)',
                borderRadius: '8px',
                color: filterType === type ? '#a855f7' : '#9ca3af',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '600',
                textTransform: 'capitalize',
                transition: 'all 0.3s ease'
              }}
              onMouseEnter={(e) => {
                if (filterType !== type) {
                  e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                  e.currentTarget.style.color = '#fff';
                }
              }}
              onMouseLeave={(e) => {
                if (filterType !== type) {
                  e.currentTarget.style.background = 'rgba(0, 0, 0, 0.3)';
                  e.currentTarget.style.color = '#9ca3af';
                }
              }}
            >
              {type}
            </button>
          ))}
        </div>
      </div>

      {/* Users List */}
      {loading ? (
        <div style={{ textAlign: 'center', padding: '40px 0' }}>
          <div style={{
            width: '48px',
            height: '48px',
            border: '4px solid rgba(147, 51, 234, 0.3)',
            borderTopColor: '#9333ea',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 16px'
          }} />
          <p style={{ color: '#9ca3af' }}>Loading users...</p>
        </div>
      ) : filteredUsers.length === 0 ? (
        <div style={{ textAlign: 'center', padding: '40px 0' }}>
          <User style={{ width: '48px', height: '48px', color: '#6b7280', margin: '0 auto 16px' }} />
          <p style={{ color: '#9ca3af' }}>No users found</p>
        </div>
      ) : (
        <div style={{ marginBottom: '20px' }}>
          {filteredUsers.map((user) => {
            const TypeIcon = getUserTypeIcon(user.user_type);
            const typeColors = getUserTypeColor(user.user_type);
            
            return (
              <div
                key={user.user_id}
                style={{
                  background: 'rgba(0, 0, 0, 0.3)',
                  border: '1px solid rgba(147, 51, 234, 0.1)',
                  borderRadius: '12px',
                  padding: '16px',
                  marginBottom: '12px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between',
                  transition: 'all 0.3s ease'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = 'rgba(147, 51, 234, 0.1)';
                  e.currentTarget.style.transform = 'translateX(4px)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'rgba(0, 0, 0, 0.3)';
                  e.currentTarget.style.transform = 'translateX(0)';
                }}
              >
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px', flex: 1 }}>
                  <div style={{
                    background: typeColors.bg,
                    border: `1px solid ${typeColors.border}`,
                    borderRadius: '10px',
                    padding: '10px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <TypeIcon style={{ width: '20px', height: '20px', color: typeColors.text }} />
                  </div>
                  
                  <div style={{ flex: 1 }}>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '4px' }}>
                      <p style={{ fontSize: '16px', fontWeight: '600', color: '#fff' }}>
                        {user.username}
                      </p>
                      <span style={{
                        padding: '2px 8px',
                        background: typeColors.bg,
                        border: `1px solid ${typeColors.border}`,
                        borderRadius: '4px',
                        fontSize: '11px',
                        color: typeColors.text,
                        fontWeight: '600',
                        textTransform: 'uppercase'
                      }}>
                        {user.user_type}
                      </span>
                    </div>
                    <p style={{ fontSize: '14px', color: '#9ca3af' }}>{user.email}</p>
                  </div>
                </div>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <button
                    onClick={() => handleToggleStatus(user.user_id)}
                    style={{
                      padding: '8px',
                      background: user.is_active ? 'rgba(16, 185, 129, 0.1)' : 'rgba(239, 68, 68, 0.1)',
                      border: user.is_active ? '1px solid rgba(16, 185, 129, 0.3)' : '1px solid rgba(239, 68, 68, 0.3)',
                      borderRadius: '8px',
                      color: user.is_active ? '#10b981' : '#ef4444',
                      cursor: 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      transition: 'all 0.3s ease'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.transform = 'scale(1.1)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'scale(1)';
                    }}
                    title={user.is_active ? 'Deactivate' : 'Activate'}
                  >
                    <Power style={{ width: '16px', height: '16px' }} />
                  </button>

                  <button
                    onClick={() => {
                      setUserToDelete(user);
                      setShowDeleteModal(true);
                    }}
                    style={{
                      padding: '8px',
                      background: 'rgba(239, 68, 68, 0.1)',
                      border: '1px solid rgba(239, 68, 68, 0.3)',
                      borderRadius: '8px',
                      color: '#ef4444',
                      cursor: 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      transition: 'all 0.3s ease'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.transform = 'scale(1.1)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'scale(1)';
                    }}
                    title="Delete User"
                  >
                    <Trash2 style={{ width: '16px', height: '16px' }} />
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* Pagination */}
      {totalPages > 1 && (
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          gap: '12px',
          marginTop: '24px'
        }}>
          <button
            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
            disabled={currentPage === 1}
            style={{
              padding: '8px 16px',
              background: 'rgba(147, 51, 234, 0.2)',
              border: '1px solid rgba(147, 51, 234, 0.3)',
              borderRadius: '8px',
              color: '#a855f7',
              cursor: currentPage === 1 ? 'not-allowed' : 'pointer',
              opacity: currentPage === 1 ? 0.5 : 1,
              display: 'flex',
              alignItems: 'center',
              gap: '4px',
              transition: 'all 0.3s ease'
            }}
          >
            <ChevronLeft style={{ width: '16px', height: '16px' }} />
            Previous
          </button>

          <span style={{ color: '#9ca3af', fontSize: '14px' }}>
            Page {currentPage} of {totalPages}
          </span>

          <button
            onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
            disabled={currentPage === totalPages}
            style={{
              padding: '8px 16px',
              background: 'rgba(147, 51, 234, 0.2)',
              border: '1px solid rgba(147, 51, 234, 0.3)',
              borderRadius: '8px',
              color: '#a855f7',
              cursor: currentPage === totalPages ? 'not-allowed' : 'pointer',
              opacity: currentPage === totalPages ? 0.5 : 1,
              display: 'flex',
              alignItems: 'center',
              gap: '4px',
              transition: 'all 0.3s ease'
            }}
          >
            Next
            <ChevronRight style={{ width: '16px', height: '16px' }} />
          </button>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && (
        <div style={{
          position: 'fixed',
          inset: 0,
          background: 'rgba(0, 0, 0, 0.8)',
          backdropFilter: 'blur(10px)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 50
        }}>
          <div style={{
            background: 'rgba(0, 0, 0, 0.9)',
            border: '1px solid rgba(239, 68, 68, 0.3)',
            borderRadius: '16px',
            padding: '32px',
            maxWidth: '400px',
            width: '100%'
          }}>
            <h3 style={{ fontSize: '20px', fontWeight: '700', color: '#fff', marginBottom: '16px' }}>
              Delete User
            </h3>
            <p style={{ color: '#9ca3af', marginBottom: '24px' }}>
              Are you sure you want to delete <strong style={{ color: '#fff' }}>{userToDelete?.username}</strong>? This action cannot be undone.
            </p>
            <div style={{ display: 'flex', gap: '12px' }}>
              <button
                onClick={() => {
                  setShowDeleteModal(false);
                  setUserToDelete(null);
                }}
                style={{
                  flex: 1,
                  padding: '10px',
                  background: 'rgba(107, 114, 128, 0.2)',
                  border: '1px solid rgba(107, 114, 128, 0.3)',
                  borderRadius: '8px',
                  color: '#9ca3af',
                  cursor: 'pointer',
                  fontWeight: '600'
                }}
              >
                Cancel
              </button>
              <button
                onClick={handleDeleteUser}
                style={{
                  flex: 1,
                  padding: '10px',
                  background: 'rgba(239, 68, 68, 0.2)',
                  border: '1px solid rgba(239, 68, 68, 0.3)',
                  borderRadius: '8px',
                  color: '#ef4444',
                  cursor: 'pointer',
                  fontWeight: '600'
                }}
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

      <style jsx>{`
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
}







component/dashboard/LevelProgress.tsx
import { TrendingUp } from 'lucide-react';

interface LevelProgressProps {
  level: number;
  currentExp: number;
  expToNext: number;
  totalExp: number;
}

export default function LevelProgress({ level, currentExp, expToNext, totalExp }: LevelProgressProps) {
  const percentage = (currentExp / expToNext) * 100;
  
  return (
    <div className="glass rounded-2xl p-6 mb-8">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-4">
          <div className="w-16 h-16 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-full flex items-center justify-center">
            <span className="text-2xl font-bold">LV</span>
          </div>
          <div>
            <h2 className="text-3xl font-bold">Level {level}</h2>
            <p className="text-gray-400">Total XP: {totalExp}</p>
          </div>
        </div>
        <div className="text-right">
          <p className="text-sm text-gray-400">Next Level</p>
          <p className="text-2xl font-bold text-indigo-400">{expToNext - currentExp} XP</p>
        </div>
      </div>
      
      <div className="relative">
        <div className="h-8 bg-gray-800 rounded-full overflow-hidden">
          <div 
            className="h-full bg-gradient-to-r from-indigo-500 via-purple-500 to-cyan-500 transition-all duration-1000 flex items-center justify-center relative"
            style={{ width: `${percentage}%` }}
          >
            <div className="absolute inset-0 bg-white/20 animate-pulse" />
          </div>
        </div>
        <p className="text-center mt-2 text-sm">
          {currentExp} / {expToNext} XP ({percentage.toFixed(1)}%)
        </p>
      </div>
    </div>
  );
}


component/dashboard/ProfileSection.tsx
export default function ProfileSection({ profile }: { profile: any }) {
  return (
    <div className="glass rounded-2xl p-6">
      <h2 className="text-2xl font-bold mb-4">Character Profile</h2>
      <div className="space-y-3">
        <div className="flex justify-between">
          <span className="text-gray-400">Class</span>
          <span className="font-semibold">{profile.field_of_interest}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Commitment</span>
          <span className="font-semibold">{profile.commitment_level?.replace('_', ' ')}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Experience</span>
          <span className="font-semibold">{profile.experience_level?.replace('_', ' ')}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Longest Streak</span>
          <span className="font-semibold text-yellow-400">{profile.longest_streak || 0} days</span>
        </div>
      </div>
    </div>
  );
}





components/dashboard/ProfileManager.tsx
// components/dashboard/ProfileManager.tsx
import { useState, useEffect } from 'react';
import { Camera, X, User, Upload } from 'lucide-react';
import toast from 'react-hot-toast';
import api from '@/lib/api';
import Cookies from 'js-cookie';

interface ProfileManagerProps {
  user: any;
  onUpdate?: (updatedUser: any) => void;
}

export default function ProfileManager({ user, onUpdate }: ProfileManagerProps) {
  const [isUploading, setIsUploading] = useState(false);
  const [profileImage, setProfileImage] = useState<string | null>(null);
  const [showModal, setShowModal] = useState(false);

  // Initialize profile image from user data
// Replace the existing useEffect (lines 19-30) with this enhanced version:
useEffect(() => {
  // EXISTING DEBUG (keep this)
  console.log('ProfileManager - User object:', user);
  console.log('ProfileManager - Profile photo URL:', user?.profile_photo_url);

  // NEW DEBUG CODE (add this)
  console.log('=== ENHANCED DEBUG START ===');
  console.log('Dashboard User Data:', user);
  console.log('Profile Photo URL:', user?.profile_photo_url);
  
  if (user?.profile_photo_url) {
    setProfileImage(user.profile_photo_url);
    console.log('ProfileManager - Set profile image to:', user.profile_photo_url);
    console.log('ProfileManager - Full image URL:', getImageUrl(user.profile_photo_url));
    
    // NEW: Test if URL is accessible
    const fullImageUrl = getImageUrl(user.profile_photo_url);
    if (fullImageUrl && !fullImageUrl.startsWith('data:')) {
      console.log('Testing image accessibility for:', fullImageUrl);
      fetch(fullImageUrl)
        .then(response => {
          console.log('Image fetch status:', response.status);
          if (response.ok) {
            console.log('✅ Image is accessible');
          } else {
            console.log('❌ Image not accessible - Status:', response.status);
          }
        })
        .catch(err => {
          console.log('❌ Image fetch failed:', err);
          console.log('❌ This means the backend URL is not reachable');
        });
    }
  } else {
    console.log('ProfileManager - No profile photo URL found, setting to null');
    console.log('❌ USER HAS NO PROFILE PHOTO URL IN DATA');
    setProfileImage(null);
  }
  console.log('=== ENHANCED DEBUG END ===');
}, [user?.profile_photo_url, user?.user_id]);

 const getImageUrl = (imageUrl: string | null) => {
  if (!imageUrl) {
    console.log('getImageUrl: No image URL provided');
    return null;
  }
  
  console.log('getImageUrl: Raw image URL:', imageUrl);

  // If it's a base64 data URL (for demo mode)
  if (imageUrl.startsWith('data:')) {
    console.log('getImageUrl: Base64 data URL detected');
    return imageUrl;
  }
  
  // If it's already a full URL
  if (imageUrl.startsWith('http')) {
    console.log('getImageUrl: Full URL detected');
    return imageUrl;
  }
  
  // If it starts with /uploads, prepend backend URL
  if (imageUrl.startsWith('/uploads')) {
    const fullUrl = `http://localhost:5000${imageUrl}`;
    console.log('getImageUrl: Constructed full URL:', fullUrl);
    return fullUrl;
  }

  // If it's a relative path, prepend backend URL and /uploads
  const fullUrl = `http://localhost:5000/uploads/${imageUrl}`;
  console.log('getImageUrl: Default construction:', fullUrl);
  return fullUrl;
};
  const updateUserInCookies = (updatedUser: any) => {
    console.log('Updating user in cookies:', updatedUser);
    Cookies.set('user', JSON.stringify(updatedUser), { expires: 7 });
    if (onUpdate) {
      onUpdate(updatedUser);
    }
  };

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    if (file.size > 5 * 1024 * 1024) {
      toast.error('Image size should be less than 5MB');
      return;
    }

    setIsUploading(true);
    const formData = new FormData();
    formData.append('profile_photo', file);

    try {
      console.log('Uploading profile photo to backend...');
      const response = await api.post('/users/upload-photo', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      
      console.log('Upload response:', response.data);
      const newImageUrl = response.data.profile_photo_url;
      
      // Update local state
      setProfileImage(newImageUrl);
      
      // Update user object and cookies
      const updatedUser = { ...user, profile_photo_url: newImageUrl };
      updateUserInCookies(updatedUser);
      
      toast.success('Profile photo updated successfully!');
    } catch (error) {
      console.warn('Backend upload failed, using demo mode:', error);
      
      // For demo mode, use FileReader to create preview
      const reader = new FileReader();
      reader.onloadend = () => {
        const dataUrl = reader.result as string;
        console.log('Demo mode: Created data URL for image');
        setProfileImage(dataUrl);
        
        // Update user object and cookies for demo mode
        const updatedUser = { ...user, profile_photo_url: dataUrl };
        updateUserInCookies(updatedUser);
        
        toast.success('Profile photo updated! (Demo mode)');
      };
      reader.readAsDataURL(file);
    } finally {
      setIsUploading(false);
      setShowModal(false);
    }
  };

  const removeProfilePhoto = async () => {
    try {
      await api.delete('/users/remove-photo');
      setProfileImage(null);
      
      // Update user object and cookies
      const updatedUser = { ...user, profile_photo_url: null };
      updateUserInCookies(updatedUser);
      
      toast.success('Profile photo removed successfully!');
    } catch (error) {
      console.warn('Backend remove failed, using demo mode:', error);
      
      // For demo mode
      setProfileImage(null);
      
      // Update user object and cookies for demo mode
      const updatedUser = { ...user, profile_photo_url: null };
      updateUserInCookies(updatedUser);
      
      toast.success('Profile photo removed! (Demo mode)');
    }
    setShowModal(false);
  };

  const imageUrl = getImageUrl(profileImage);
  console.log('ProfileManager render - imageUrl:', imageUrl);

  return (
    <>
      <div className="text-center">
        <div className="avatar-container" style={{ width: '150px', height: '150px' }}>
          {imageUrl ? (
            <img 
              src={imageUrl}
              alt="Profile" 
              className="avatar"
              style={{ 
                cursor: 'pointer',
                width: '100%',
                height: '100%',
                borderRadius: '50%',
                objectFit: 'cover',
                border: '4px solid rgba(147, 51, 234, 0.5)',
              }}
              onClick={() => setShowModal(true)}
              onLoad={() => console.log('Profile image loaded successfully:', imageUrl)}
              onError={(e) => {
                console.error('Failed to load profile image:', imageUrl);
                console.log('Error details:', e);
                // Fallback to placeholder if image fails to load
                setProfileImage(null);
                toast.error('Failed to load profile image');
              }}
            />
          ) : (
            <div 
              className="avatar-placeholder"
              style={{ 
                cursor: 'pointer',
                width: '100%',
                height: '100%',
                borderRadius: '50%',
                background: 'linear-gradient(135deg, #9333ea, #ec4899)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '48px',
                fontWeight: 'bold',
                color: 'white',
                textTransform: 'uppercase',
                border: '4px solid rgba(147, 51, 234, 0.5)',
              }}
              onClick={() => setShowModal(true)}
            >
              {user?.username?.[0]?.toUpperCase() || <User size={60} />}
            </div>
          )}
          <button
            className="avatar-upload-btn"
            onClick={() => setShowModal(true)}
            style={{ 
              position: 'absolute',
              bottom: '0',
              right: '0',
              width: '48px',
              height: '48px',
              borderRadius: '50%',
              background: 'linear-gradient(135deg, #9333ea, #ec4899)',
              border: '3px solid #000',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'scale(1.1)';
              e.currentTarget.style.boxShadow = '0 4px 12px rgba(147, 51, 234, 0.4)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'scale(1)';
              e.currentTarget.style.boxShadow = 'none';
            }}
          >
            <Camera size={24} />
          </button>
        </div>
        <h2 style={{ fontSize: '20px', fontWeight: 'bold', marginTop: '12px' }}>
          {user?.username}
        </h2>
        <p className="text-gray-400" style={{ fontSize: '14px' }}>
          {user?.email}
        </p>
      </div>

      {/* Photo Management Modal */}
      {showModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 9999,
          backdropFilter: 'blur(10px)'
        }}>
          <div className="glass" style={{ maxWidth: '400px', width: '90%', position: 'relative' }}>
            <div className="flex justify-between items-center mb-6">
              <h3 style={{ fontSize: '24px', fontWeight: 'bold' }}>
                Manage Profile Photo
              </h3>
              <button
                onClick={() => setShowModal(false)}
                style={{ 
                  padding: '8px',
                  background: 'transparent',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  color: '#fff',
                  transition: 'background 0.3s ease'
                }}
                onMouseOver={(e) => e.currentTarget.style.background = 'rgba(255, 255, 255, 0.1)'}
                onMouseOut={(e) => e.currentTarget.style.background = 'transparent'}
              >
                <X size={24} />
              </button>
            </div>

            <div className="text-center">
              {imageUrl && (
                <img 
                  src={imageUrl}
                  alt="Current Profile" 
                  style={{ 
                    width: '150px', 
                    height: '150px', 
                    borderRadius: '50%', 
                    margin: '0 auto 20px',
                    objectFit: 'cover',
                    border: '3px solid rgba(147, 51, 234, 0.5)',
                  }}
                  onError={(e) => {
                    console.error('Failed to load image in modal:', imageUrl);
                  }}
                />
              )}

              <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                <label 
                  className="btn btn-primary" 
                  style={{ 
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    gap: '8px',
                    padding: '12px 24px'
                  }}
                >
                  <Upload size={20} />
                  {imageUrl ? 'Change Photo' : 'Upload Photo'}
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    style={{ display: 'none' }}
                    disabled={isUploading}
                  />
                </label>

                {imageUrl && (
                  <button
                    onClick={removeProfilePhoto}
                    className="btn btn-danger"
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '8px',
                      padding: '12px 24px'
                    }}
                  >
                    <X size={20} />
                    Remove Photo
                  </button>
                )}

                <button
                  onClick={() => setShowModal(false)}
                  className="btn btn-secondary"
                  style={{
                    padding: '12px 24px'
                  }}
                >
                  Cancel
                </button>
              </div>

              {isUploading && (
                <div className="mt-4">
                  <div className="spinner mx-auto"></div>
                  <p className="text-gray-400 mt-2">Uploading...</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
}



component/dashboard/QuestCard.tsx
import { Clock, Zap, CheckCircle } from 'lucide-react';
import { getDifficultyColor, formatTime } from '@/lib/utils';

interface QuestCardProps {
  quest: any;
  onComplete: () => void;
}

export default function QuestCard({ quest, onComplete }: QuestCardProps) {
  return (
    <div className={`quest-card glass p-6 rounded-xl ${quest.is_completed ? 'opacity-60' : ''}`}>
      <div className="flex items-start justify-between mb-4">
        <div className="flex-1">
          <h3 className="text-lg font-bold mb-2">{quest.quest_title}</h3>
          <div className="flex items-center gap-4 text-sm">
            <span className={`px-2 py-1 rounded border ${getDifficultyColor(quest.difficulty)}`}>
              {quest.difficulty}
            </span>
            <span className="flex items-center gap-1 text-yellow-400">
              <Zap className="w-4 h-4" />
              {quest.base_xp} XP
            </span>
            {quest.related_stat && (
              <span className="text-gray-400">
                +{quest.related_stat}
              </span>
            )}
          </div>
        </div>
        {quest.is_completed ? (
          <CheckCircle className="w-6 h-6 text-green-400" />
        ) : (
          <Clock className="w-6 h-6 text-gray-400" />
        )}
      </div>
      
      {!quest.is_completed && (
        <>
          <p className="text-sm text-gray-400 mb-4">
            {formatTime(quest.expires_at)}
          </p>
          <button
            onClick={onComplete}
            className="w-full py-2 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-lg hover:from-indigo-500 hover:to-purple-500 transition-all duration-300 font-semibold"
          >
            Complete Quest
          </button>
        </>
      )}
    </div>
  );
}




component/dashboard/StatsCard.tsx
interface StatsCardProps {
  stat: {
    stat_name: string;
    stat_icon?: string;
    current_value: number;
    max_value: number;
  };
}

export default function StatsCard({ stat }: StatsCardProps) {
  const percentage = (stat.current_value / stat.max_value) * 100;
  
  return (
    <div className="glass p-4 rounded-xl hover:bg-white/5 transition-all duration-300 group">
      <div className="flex items-center justify-between mb-2">
        <span className="text-2xl">{stat.stat_icon || '⚡'}</span>
        <span className="text-xl font-bold text-indigo-400">
          {stat.current_value}
        </span>
      </div>
      <p className="text-xs text-gray-400 mb-2">{stat.stat_name}</p>
      <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
        <div 
          className="h-full bg-gradient-to-r from-indigo-500 to-purple-500 transition-all duration-500"
          style={{ width: `${percentage}%` }}
        />
      </div>
      <p className="text-xs text-gray-500 mt-1">{stat.current_value}/{stat.max_value}</p>
    </div>
  );
}





component/effects/LevelUpAnimation.tsx
export default function LevelUpAnimation({ level }: { level: number }) {
  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 pointer-events-none">
      <div className="level-up">
        <div className="text-8xl font-game font-bold text-yellow-400 glow animate-bounce">
          LEVEL UP!
        </div>
        <div className="text-4xl font-bold text-white mt-4 text-center">
          You reached Level {level}!
        </div>
      </div>
    </div>
  );
}


component/effects/ParticleBackground.tsx
'use client';
import { useEffect, useState } from 'react';

export default function ParticleBackground() {
  const [particles, setParticles] = useState<any[]>([]);

  useEffect(() => {
    const newParticles = [];
    for (let i = 0; i < 50; i++) {
      newParticles.push({
        id: i,
        x: Math.random() * 100,
        y: Math.random() * 100,
        size: Math.random() * 3 + 1,
        duration: Math.random() * 20 + 10
      });
    }
    setParticles(newParticles);
  }, []);

  return (
    <div className="fixed inset-0 overflow-hidden pointer-events-none">
      {particles.map((particle) => (
        <div
          key={particle.id}
          className="absolute bg-indigo-500/20 rounded-full"
          style={{
            left: `${particle.x}%`,
            top: `${particle.y}%`,
            width: `${particle.size}px`,
            height: `${particle.size}px`,
            animation: `float ${particle.duration}s ease-in-out infinite`
          }}
        />
      ))}
    </div>
  );
}


component/layout/Navbar.tsx
// components/layout/Navbar.tsx
import { User, LogOut } from 'lucide-react';

interface NavbarProps {
  user: any;
  onLogout: () => void;
}

export default function Navbar({ user, onLogout }: NavbarProps) {
const getProfileImageUrl = (user: any) => {
  if (!user?.profile_photo_url) return null;

  console.log('Navbar: Profile photo URL from user:', user.profile_photo_url);

  // If it's a base64 data URL (for demo mode)
  if (user.profile_photo_url.startsWith('data:')) {
    return user.profile_photo_url;
  }

  // If backend gave full URL, use it directly
  if (user.profile_photo_url.startsWith("http")) {
    return user.profile_photo_url;
  }

  // If backend gave relative path like "/uploads/profiles/...", add backend URL
  return `http://localhost:5000${user.profile_photo_url}`;
};


  const profileImageUrl = getProfileImageUrl(user);
  console.log('Navbar render: profileImageUrl =', profileImageUrl);

  return (
    <nav style={{ 
      background: 'rgba(0, 0, 0, 0.8)', 
      backdropFilter: 'blur(10px)',
      borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
      padding: '16px 0'
    }}>
      <div className="nav-container">
        <div style={{ display: 'flex', alignItems: 'center', gap: '32px' }}>
          <h1 className="nav-brand">
            SOLO LEVELING
          </h1>
          <div style={{ display: 'flex', alignItems: 'center', gap: '24px' }}>
            <span className="text-gray-400">System</span>
            <span className="text-gray-400">•</span>
            <span className="text-indigo-400" style={{ fontWeight: '600' }}>
              {user?.user_type === 'coach' ? 'Coach Mode' : 'Player Mode'}
            </span>
          </div>
        </div>
        
        <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
            <div style={{ 
              width: '40px', 
              height: '40px', 
              borderRadius: '50%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              overflow: 'hidden',
              border: '2px solid rgba(147, 51, 234, 0.5)',
              position: 'relative',
            }}>
              {profileImageUrl ? (
                <img 
                  src={profileImageUrl}
                  alt="Profile"
                  style={{
                    width: '100%',
                    height: '100%',
                    objectFit: 'cover',
                  }}
                  onLoad={() => console.log('Navbar: Profile image loaded successfully')}
                  onError={(e) => {
                    console.error('Navbar: Failed to load profile image:', profileImageUrl);
                    
                    // Replace with fallback
                    const target = e.target as HTMLImageElement;
                    target.style.display = 'none';
                    const parent = target.parentElement;
                    if (parent) {
                      parent.style.background = 'linear-gradient(135deg, #6366f1, #a855f7)';
                      parent.innerHTML = `<span style="color: white; font-weight: bold; font-size: 18px;">${user?.username?.[0]?.toUpperCase() || 'U'}</span>`;
                    }
                  }}
                />
              ) : (
                <div style={{
                  width: '100%',
                  height: '100%',
                  background: 'linear-gradient(135deg, #6366f1, #a855f7)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  color: 'white',
                  fontWeight: 'bold',
                  fontSize: '18px'
                }}>
                  {user?.username?.[0]?.toUpperCase() || <User size={20} />}
                </div>
              )}
            </div>
            <div>
              <p style={{ fontSize: '14px', fontWeight: '600' }}>{user?.username}</p>
              <p className="text-gray-400" style={{ fontSize: '12px' }}>{user?.email}</p>
            </div>
          </div>
          
          <button
            onClick={onLogout}
            style={{ 
              padding: '8px',
              background: 'transparent',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              color: '#fff',
              transition: 'background 0.3s ease'
            }}
            onMouseOver={(e) => e.currentTarget.style.background = 'rgba(255, 255, 255, 0.1)'}
            onMouseOut={(e) => e.currentTarget.style.background = 'transparent'}
            title="Logout"
          >
            <LogOut size={20} />
          </button>
        </div>
      </div>
    </nav>
  );
}




component/layout/Sidebar.tsx
'use client';

interface SidebarProps {
  userType: 'adventurer' | 'coach';
  onLogout: () => void;
}

export default function Sidebar({ userType, onLogout }: SidebarProps) {
  // Get current path without using Next.js navigation
  const pathname = typeof window !== 'undefined' ? window.location.pathname : '/';

  const adventurerLinks = [
    { href: '/dashboard', label: 'Dashboard', icon: '🏠' },
    { href: '/dashboard/quests', label: 'Quests', icon: '⚔️' },
    { href: '/dashboard/stats', label: 'Stats', icon: '📊' },
    { href: '/dashboard/achievements', label: 'Achievements', icon: '🏆' },
    { href: '/dashboard/calendar', label: 'Calendar', icon: '📅' },
  ];

  const coachLinks = [
    { href: '/coach', label: 'Dashboard', icon: '🏠' },
    { href: '/coach/students', label: 'Students', icon: '👥' },
    { href: '/coach/progress', label: 'Progress', icon: '📊' },
    { href: '/coach/feedback', label: 'Feedback', icon: '🎯' },
  ];

  const links = userType === 'coach' ? coachLinks : adventurerLinks;

  const handleNavigation = (href: string) => {
    window.location.href = href;
  };

  return (
    <div className="w-64 h-screen bg-gray-900 border-r border-gray-800">
      <div className="p-6">
        <h2 className="text-2xl font-bold text-white">
          SOLO LEVELING
        </h2>
        <p className="text-xs text-gray-400 mt-1">System v1.0</p>
      </div>

      <nav className="px-4">
        {links.map((link) => {
          const isActive = pathname === link.href;
          
          return (
            <button
              key={link.href}
              onClick={() => handleNavigation(link.href)}
              className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg mb-2 transition-all text-left ${
                isActive 
                  ? 'bg-indigo-600 text-white' 
                  : 'hover:bg-gray-800 text-gray-400 hover:text-white'
              }`}
            >
              <span className="text-xl">{link.icon}</span>
              <span className="font-medium">{link.label}</span>
              {isActive && (
                <div className="ml-auto w-1 h-4 bg-white rounded-full" />
              )}
            </button>
          );
        })}
      </nav>

      <div className="absolute bottom-0 left-0 right-0 p-4">
        <button
          onClick={onLogout}
          className="w-full flex items-center gap-3 px-4 py-3 rounded-lg hover:bg-red-900 text-gray-400 hover:text-red-400 transition-all"
        >
          <span className="text-xl">🚪</span>
          <span className="font-medium">Logout</span>
        </button>
      </div>
    </div>
  );
}




component/ui/Button.tsx
'use client';
import { ButtonHTMLAttributes, ReactNode } from 'react';

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'danger' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  children: ReactNode;
}

export default function Button({ 
  variant = 'primary', 
  size = 'md', 
  children, 
  className = '',
  ...props 
}: ButtonProps) {
  const variants = {
    primary: 'bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-500 hover:to-purple-500 text-white',
    secondary: 'bg-gray-800 hover:bg-gray-700 text-white',
    danger: 'bg-red-600 hover:bg-red-500 text-white',
    ghost: 'bg-transparent hover:bg-white/10 text-gray-300'
  };

  const sizes = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2',
    lg: 'px-6 py-3 text-lg'
  };

  return (
    <button
      className={`${variants[variant]} ${sizes[size]} rounded-lg font-semibold transition-all duration-300 ${className}`}
      {...props}
    >
      {children}
    </button>
  );
}


component/ui/Card.tsx
'use client';
import { ReactNode } from 'react';

interface CardProps {
  children: ReactNode;
  className?: string;
  hover?: boolean;
}

export default function Card({ children, className = '', hover = false }: CardProps) {
  return (
    <div 
      className={`glass rounded-xl p-6 ${hover ? 'hover:bg-white/10 transition-all duration-300' : ''} ${className}`}
    >
      {children}
    </div>
  );
}






component/ui/Loader.tsx
'use client';

interface LoaderProps {
  size?: 'sm' | 'md' | 'lg';
  text?: string;
}

export default function Loader({ size = 'md', text }: LoaderProps) {
  const sizes = {
    sm: 'w-8 h-8 border-2',
    md: 'w-12 h-12 border-3',
    lg: 'w-16 h-16 border-4'
  };

  return (
    <div className="flex flex-col items-center justify-center">
      <div className={`${sizes[size]} border-indigo-500 border-t-transparent rounded-full animate-spin`} />
      {text && <p className="mt-4 text-gray-400">{text}</p>}
    </div>
  );
}



component/ui/Modal.tsx
'use client';
import { ReactNode, useEffect } from 'react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: ReactNode;
}

export default function Modal({ isOpen, onClose, title, children }: ModalProps) {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }
    
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      <div 
        className="absolute inset-0 bg-black/80 backdrop-blur-sm"
        onClick={onClose}
      />
      <div className="relative glass rounded-2xl p-8 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 p-2 hover:bg-white/10 rounded-lg transition-colors"
        >
          ✕
        </button>
        
        {title && (
          <h2 className="text-2xl font-bold mb-6">{title}</h2>
        )}
        
        {children}
      </div>
    </div>
  );
}






hooks/useAuth.ts
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

export function useAuth() {
  const router = useRouter();
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Check for user in localStorage or cookies
    const checkAuth = () => {
      try {
        // For now, we'll use localStorage
        const token = localStorage.getItem('token');
        const userStr = localStorage.getItem('user');
        
        if (!token || !userStr) {
          router.push('/login');
          setLoading(false);
          return;
        }
        
        const userData = JSON.parse(userStr);
        setUser(userData);
      } catch (error) {
        console.error('Failed to parse user data:', error);
        router.push('/login');
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, [router]);

  const logout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    localStorage.removeItem('profile');
    router.push('/login');
  };

  return { user, loading, logout };
}




hooks/useQuests.ts
'use client';
import { useState, useEffect, useCallback } from 'react';

export function useQuests() {
  const [dailyQuests, setDailyQuests] = useState<any[]>([]);
  const [weeklyQuests, setWeeklyQuests] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  const fetchQuests = useCallback(async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      
      const headers = {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      };

      const [dailyRes, weeklyRes] = await Promise.all([
        fetch('http://localhost:5000/api/quests/daily', { headers }),
        fetch('http://localhost:5000/api/quests/weekly', { headers })
      ]);
      
      const dailyData = await dailyRes.json();
      const weeklyData = await weeklyRes.json();
      
      setDailyQuests(dailyData.quests || []);
      setWeeklyQuests(weeklyData.quests || []);
    } catch (error) {
      console.error('Failed to fetch quests:', error);
    } finally {
      setLoading(false);
    }
  }, []);

  const completeQuest = async (questId: number) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:5000/api/quests/complete/${questId}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        await fetchQuests(); // Refresh quests
      }
    } catch (error) {
      console.error('Failed to complete quest:', error);
    }
  };

  useEffect(() => {
    fetchQuests();
  }, [fetchQuests]);

  return {
    dailyQuests,
    weeklyQuests,
    loading,
    refetch: fetchQuests,
    completeQuest
  };
}




hooks/useStats.ts
'use client';
import { useState, useEffect } from 'react';

export function useStats() {
  const [stats, setStats] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch('http://localhost:5000/api/users/stats', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        const data = await response.json();
        setStats(data.stats || []);
      } catch (error) {
        console.error('Failed to fetch stats:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  return { stats, loading };
}




lib/adminSettings.ts
// File: frontend/lib/adminSettings.ts
import api from './api';

export interface SettingValue {
  value: any;
  type: 'string' | 'number' | 'boolean' | 'json';
  description: string;
}

export interface Settings {
  quest_system: Record<string, SettingValue>;
  level_progression: Record<string, SettingValue>;
  security: Record<string, SettingValue>;
  platform: Record<string, SettingValue>;
  monitoring: Record<string, SettingValue>;
  coach_system: Record<string, SettingValue>;
}

export interface FeatureFlag {
  flag_id: number;
  flag_key: string;
  flag_name: string;
  description?: string;
  is_enabled: boolean;
  rollout_percentage: number;
  target_user_types?: string[];
  conditions?: any;
  created_by?: number;
  created_at: string;
  updated_at: string;
  creator?: {
    username: string;
    full_name: string;
  };
}

export interface IPWhitelistEntry {
  whitelist_id: number;
  ip_address: string;
  ip_range?: string;
  description?: string;
  created_by?: number;
  created_at: string;
  is_active: boolean;
  creator?: {
    username: string;
  };
}

export interface SystemHealth {
  database: 'healthy' | 'unhealthy';
  average_response_time: number;
  active_users: number;
  error_counts: Record<string, number>;
  performance_metrics: Array<{
    log_id: number;
    endpoint: string;
    method: string;
    response_time_ms: number;
    status_code: number;
    created_at: string;
  }>;
  timestamp: string;
}

export interface AnalyticsData {
  timeframe: string;
  unique_users: number;
  total_events: number;
  event_counts: Record<string, number>;
  page_views_by_day: Record<string, number>;
  recent_events: Array<{
    analytics_id: number;
    user_id?: number;
    session_id?: string;
    event_type: string;
    event_data?: any;
    page_url?: string;
    created_at: string;
  }>;
}

class AdminSettingsAPI {
  // Settings Management
  async getSettings(): Promise<Settings> {
    const response = await api.get('/admin/settings');
    return response.data.settings;
  }

  async updateSettings(settings: Settings): Promise<void> {
    await api.put('/admin/settings', { settings });
  }

  async resetSettings(): Promise<void> {
    await api.post('/admin/settings/reset');
  }

  async exportConfiguration(): Promise<Blob> {
    const response = await api.get('/admin/settings/export', {
      responseType: 'blob'
    });
    return response.data;
  }

  async importConfiguration(config: any): Promise<void> {
    await api.post('/admin/settings/import', { config });
  }

  // Feature Flags Management
  async getFeatureFlags(): Promise<FeatureFlag[]> {
    const response = await api.get('/admin/settings/feature-flags');
    return response.data.flags;
  }

  async createFeatureFlag(flagData: Partial<FeatureFlag>): Promise<FeatureFlag> {
    const response = await api.post('/admin/settings/feature-flags', flagData);
    return response.data.flag;
  }

  async updateFeatureFlag(flagId: number, flagData: Partial<FeatureFlag>): Promise<FeatureFlag> {
    const response = await api.put(`/admin/settings/feature-flags/${flagId}`, flagData);
    return response.data.flag;
  }

  async deleteFeatureFlag(flagId: number): Promise<void> {
    await api.delete(`/admin/settings/feature-flags/${flagId}`);
  }

  // IP Whitelist Management
  async getIPWhitelist(): Promise<IPWhitelistEntry[]> {
    const response = await api.get('/admin/settings/ip-whitelist');
    return response.data.whitelist;
  }

  async addIPToWhitelist(ipData: {
    ip_address: string;
    ip_range?: string;
    description?: string;
  }): Promise<IPWhitelistEntry> {
    const response = await api.post('/admin/settings/ip-whitelist', ipData);
    return response.data.entry;
  }

  async removeIPFromWhitelist(whitelistId: number): Promise<void> {
    await api.delete(`/admin/settings/ip-whitelist/${whitelistId}`);
  }

  // System Monitoring
  async getSystemHealth(): Promise<SystemHealth> {
    const response = await api.get('/admin/settings/system-health');
    return response.data.health;
  }

  async getAnalytics(timeframe: '24h' | '7d' | '30d' = '7d'): Promise<AnalyticsData> {
    const response = await api.get(`/admin/settings/analytics?timeframe=${timeframe}`);
    return response.data.analytics;
  }

  // Utility functions for settings formatting
  formatSettingName(key: string): string {
    return key
      .replace(/_/g, ' ')
      .replace(/\b\w/g, l => l.toUpperCase())
      .replace(/Xp/g, 'XP')
      .replace(/Ai/g, 'AI')
      .replace(/Ip/g, 'IP')
      .replace(/2fa/g, '2FA');
  }

  getSettingCategory(key: string): string {
    if (key.includes('quest') || key.includes('xp') || key.includes('streak')) {
      return 'quest_system';
    } else if (key.includes('level') || key.includes('prestige') || key.includes('title')) {
      return 'level_progression';
    } else if (key.includes('login') || key.includes('session') || key.includes('password') || key.includes('ip') || key.includes('two_factor')) {
      return 'security';
    } else if (key.includes('theme') || key.includes('welcome') || key.includes('maintenance') || key.includes('logo') || key.includes('notification') || key.includes('background')) {
      return 'platform';
    } else if (key.includes('monitoring') || key.includes('analytics') || key.includes('error') || key.includes('performance') || key.includes('retention') || key.includes('ab_testing')) {
      return 'monitoring';
    } else if (key.includes('coach')) {
      return 'coach_system';
    }
    return 'platform';
  }

  validateIPAddress(ip: string): boolean {
    const ipRegex = /^(\d{1,3}\.){3}\d{1,3}$/;
    if (!ipRegex.test(ip)) return false;

    const parts = ip.split('.');
    return parts.every(part => {
      const num = parseInt(part, 10);
      return num >= 0 && num <= 255;
    });
  }

  validateCIDR(cidr: string): boolean {
    const cidrRegex = /^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$/;
    if (!cidrRegex.test(cidr)) return false;

    const [ip, prefix] = cidr.split('/');
    const prefixNum = parseInt(prefix, 10);
    
    return this.validateIPAddress(ip) && prefixNum >= 0 && prefixNum <= 32;
  }

  parseSettingValue(value: string, type: string): any {
    switch (type) {
      case 'number':
        return parseFloat(value);
      case 'boolean':
        return value === 'true';
      case 'json':
        try {
          return JSON.parse(value);
        } catch {
          return value;
        }
      default:
        return value;
    }
  }

  stringifySettingValue(value: any, type: string): string {
    switch (type) {
      case 'boolean':
        return value.toString();
      case 'number':
        return value.toString();
      case 'json':
        return JSON.stringify(value);
      default:
        return value;
    }
  }

  getDefaultValue(key: string, type: string): any {
    const defaults: Record<string, any> = {
      // Quest System
      daily_quest_count: 8,
      weekly_quest_count: 3,
      level_multiplier: 1.5,
      streak_bonus_xp: 50,
      streak_bonus_enabled: true,
      quest_refresh_hour: 0,
      auto_generate_quests: true,
      ai_quest_model: 'gpt-4-turbo',

      // Level & Progression
      base_xp_per_level: 100,
      max_level_cap: 100,
      title_unlocks_enabled: true,
      prestige_system_enabled: false,
      prestige_unlock_level: 50,

      // Security
      max_login_attempts: 5,
      login_rate_limit_window: 900,
      session_lifetime_days: 7,
      two_factor_enabled: false,
      two_factor_method: 'google_auth',
      ip_whitelist_enabled: false,
      password_min_length: 8,
      password_require_special: true,
      password_require_numbers: true,
      password_require_uppercase: false,

      // Platform
      default_theme: 'dark',
      background_animation_enabled: true,
      background_animation_speed: 5,
      notification_sounds_enabled: true,
      welcome_message: 'Welcome to Solo Leveling! Start your journey to become stronger by completing daily quests and leveling up your skills.',
      maintenance_mode_enabled: false,
      maintenance_message: 'System maintenance in progress. Please check back soon.',
      custom_logo_url: '',
      custom_favicon_url: '',

      // Monitoring
      performance_monitoring_enabled: true,
      performance_alert_threshold: 500,
      user_analytics_enabled: true,
      analytics_track_pageviews: true,
      analytics_track_quest_completion: true,
      analytics_track_device_info: false,
      error_reporting_enabled: true,
      error_reporting_level: 'all',
      data_retention_days: 90,
      ab_testing_enabled: false,

      // Coach System
      max_coach_students: 20,
      coach_auto_approval: false,
      coach_verification_required: true
    };

    return defaults[key] ?? (type === 'boolean' ? false : type === 'number' ? 0 : '');
  }

  getSettingDescription(key: string): string {
    const descriptions: Record<string, string> = {
      // Quest System
      daily_quest_count: 'Number of daily quests assigned to each user',
      weekly_quest_count: 'Number of weekly quests assigned to each user',
      level_multiplier: 'Experience multiplier increase for each level',
      streak_bonus_xp: 'Bonus XP awarded for maintaining daily streaks',
      streak_bonus_enabled: 'Enable the streak bonus system',
      quest_refresh_hour: 'Hour of day when daily quests refresh (24-hour format)',
      auto_generate_quests: 'Enable AI-powered quest generation',
      ai_quest_model: 'AI model used for quest generation',

      // Level & Progression
      base_xp_per_level: 'Base experience points required for first level',
      max_level_cap: 'Maximum achievable level (0 = unlimited)',
      title_unlocks_enabled: 'Enable automatic title unlocks at specific levels',
      prestige_system_enabled: 'Enable prestige system for level resets',
      prestige_unlock_level: 'Level required to unlock prestige system',

      // Security
      max_login_attempts: 'Maximum failed login attempts before rate limiting',
      login_rate_limit_window: 'Rate limit window in seconds',
      session_lifetime_days: 'Number of days before user sessions expire',
      two_factor_enabled: 'Require 2FA for admin accounts',
      two_factor_method: '2FA method: Google Authenticator, SMS, or Email',
      ip_whitelist_enabled: 'Restrict admin access to specific IP addresses',
      password_min_length: 'Minimum required password length',
      password_require_special: 'Require special characters in passwords',
      password_require_numbers: 'Require numbers in passwords',
      password_require_uppercase: 'Require uppercase letters in passwords',

      // Platform
      default_theme: 'Default theme for new users',
      background_animation_enabled: 'Enable animated backgrounds on dashboard',
      background_animation_speed: 'Speed of background animations (1-10 scale)',
      notification_sounds_enabled: 'Enable sound effects for notifications',
      welcome_message: 'Welcome message displayed to new users',
      maintenance_mode_enabled: 'Enable maintenance mode for system updates',
      maintenance_message: 'Message displayed during maintenance mode',
      custom_logo_url: 'URL for custom logo image',
      custom_favicon_url: 'URL for custom favicon image',

      // Monitoring
      performance_monitoring_enabled: 'Track API response times and performance',
      performance_alert_threshold: 'Response time threshold for alerts (milliseconds)',
      user_analytics_enabled: 'Collect anonymized user behavior data',
      analytics_track_pageviews: 'Track user page views',
      analytics_track_quest_completion: 'Track quest completion rates',
      analytics_track_device_info: 'Track user device information',
      error_reporting_enabled: 'Enable automatic error logging and reporting',
      error_reporting_level: 'Level of errors to report: all, critical, or custom',
      data_retention_days: 'How long to keep analytics and log data (days)',
      ab_testing_enabled: 'Enable A/B testing feature flags',

      // Coach System
      max_coach_students: 'Maximum number of students per coach',
      coach_auto_approval: 'Automatically approve coach applications',
      coach_verification_required: 'Require manual verification for coaches'
    };

    return descriptions[key] || 'System setting';
  }
}

export const adminSettingsAPI = new AdminSettingsAPI();
export default adminSettingsAPI;






lib/api.ts
// lib/api.ts
import axios from 'axios';
import Cookies from 'js-cookie';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 10000, // 10 second timeout
});

// Track if we're currently refreshing to avoid multiple refresh attempts
let isRefreshing = false;
let failedQueue: Array<{
  resolve: (value?: any) => void;
  reject: (error?: any) => void;
}> = [];

const processQueue = (error: any, token: string | null = null) => {
  failedQueue.forEach(({ resolve, reject }) => {
    if (error) {
      reject(error);
    } else {
      resolve(token);
    }
  });
  
  failedQueue = [];
};

// Add auth token to requests
api.interceptors.request.use(
  (config) => {
    const token = Cookies.get('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Handle auth errors with improved retry logic
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // Check if it's an authentication error
    if (error.response?.status === 401 || error.response?.status === 403) {
      const errorCode = error.response?.data?.code;
      
      // Handle specific error codes
      switch (errorCode) {
        case 'TOKEN_EXPIRED':
        case 'SESSION_EXPIRED':
        case 'INVALID_TOKEN':
          // If we're already refreshing, add this request to the queue
          if (isRefreshing) {
            return new Promise((resolve, reject) => {
              failedQueue.push({ resolve, reject });
            }).then(token => {
              originalRequest.headers.Authorization = `Bearer ${token}`;
              return api(originalRequest);
            }).catch(err => {
              return Promise.reject(err);
            });
          }

          // Mark that we're refreshing
          originalRequest._retry = true;
          isRefreshing = true;

          try {
            // Try to refresh the session by making a test API call
            // If the token is still valid (maybe it was a temporary session issue)
            const testResponse = await axios.get(`${API_URL}/auth/health`, {
              headers: {
                Authorization: `Bearer ${Cookies.get('token')}`
              }
            });

            if (testResponse.status === 200) {
              // Token is still valid, retry the original request
              isRefreshing = false;
              processQueue(null, Cookies.get('token'));
              return api(originalRequest);
            }
          } catch (refreshError) {
            // Token is definitely invalid, redirect to login
            isRefreshing = false;
            processQueue(refreshError, null);
            
            // Clear all auth cookies
            Cookies.remove('token');
            Cookies.remove('user');
            Cookies.remove('profile');
            
            // Only redirect if not already on login page
            if (!window.location.pathname.includes('/login')) {
              // Add a small delay to prevent immediate redirect loops
              setTimeout(() => {
                window.location.href = '/login?expired=true';
              }, 100);
            }
            
            return Promise.reject(error);
          }
          break;

        case 'ACCOUNT_INACTIVE':
          // Handle inactive account
          Cookies.remove('token');
          Cookies.remove('user');
          Cookies.remove('profile');
          
          if (!window.location.pathname.includes('/login')) {
            window.location.href = '/login?inactive=true';
          }
          break;

        default:
          // For other 401/403 errors, redirect to login
          if (!originalRequest._retry) {
            Cookies.remove('token');
            Cookies.remove('user');
            Cookies.remove('profile');
            
            if (!window.location.pathname.includes('/login')) {
              window.location.href = '/login';
            }
          }
          break;
      }
    }

    // Handle network errors
    if (!error.response) {
      console.error('Network error:', error.message);
      // You could show a toast notification here about network issues
    }

    return Promise.reject(error);
  }
);

export default api;




lib/auth.ts
import Cookies from 'js-cookie';
import api from './api';

export const login = async (email: string, password: string) => {
  try {
    const response = await api.post('/auth/login', { email, password });
    const { token, user, profile } = response.data;
    
    Cookies.set('token', token, { expires: 7 });
    Cookies.set('user', JSON.stringify(user), { expires: 7 });
    if (profile) {
      Cookies.set('profile', JSON.stringify(profile), { expires: 7 });
    }
    
    return response.data;
  } catch (error: any) {
    // For demo mode, create mock user
    if (error.response?.status === 404 || !error.response) {
      const mockUser = {
        user_id: 1,
        email: email,
        username: email.split('@')[0],
        user_type: email.includes('coach') ? 'coach' : 'adventurer',
        profile_photo_url: null
      };
      
      const mockData = {
        token: 'demo-token-' + Date.now(),
        user: mockUser,
        profile: {
          current_level: 1,
          total_exp: 0,
          current_exp: 0,
          exp_to_next_level: 100,
          streak_days: 0,
          field_of_interest: 'Demo Mode'
        }
      };
      
      Cookies.set('token', mockData.token, { expires: 7 });
      Cookies.set('user', JSON.stringify(mockData.user), { expires: 7 });
      Cookies.set('profile', JSON.stringify(mockData.profile), { expires: 7 });
      
      return mockData;
    }
    throw error;
  }
};

export const signup = async (formData: FormData) => {
  try {
    // Try to send to backend
    const response = await api.post('/auth/signup', formData, {
      headers: { 'Content-Type': 'multipart/form-data' }
    });
    
    const { token, user } = response.data;
    
    Cookies.set('token', token, { expires: 7 });
    Cookies.set('user', JSON.stringify(user), { expires: 7 });
    
    return response.data;
  } catch (error: any) {
    // For demo mode, create mock user
    if (error.response?.status === 404 || !error.response) {
      // Extract form data
      const email = formData.get('email') as string;
      const username = formData.get('username') as string;
      const userType = formData.get('user_type') as string;
      const profilePhoto = formData.get('profile_photo') as File;
      
      // Create mock user
      const mockUser = {
        user_id: Date.now(),
        email: email,
        username: username,
        user_type: userType || 'adventurer',
        profile_photo_url: null
      };
      
      // Handle profile photo in demo mode
      if (profilePhoto) {
        return new Promise((resolve) => {
          const reader = new FileReader();
          reader.onloadend = () => {
            mockUser.profile_photo_url = reader.result as string;
            
            const mockData = {
              token: 'demo-token-' + Date.now(),
              user: mockUser,
              profile: {
                current_level: 1,
                total_exp: 0,
                current_exp: 0,
                exp_to_next_level: 100,
                streak_days: 0,
                field_of_interest: formData.get('field_of_interest') as string || 'Not Set'
              }
            };
            
            Cookies.set('token', mockData.token, { expires: 7 });
            Cookies.set('user', JSON.stringify(mockData.user), { expires: 7 });
            Cookies.set('profile', JSON.stringify(mockData.profile), { expires: 7 });
            
            resolve(mockData);
          };
          reader.readAsDataURL(profilePhoto);
        });
      } else {
        const mockData = {
          token: 'demo-token-' + Date.now(),
          user: mockUser,
          profile: {
            current_level: 1,
            total_exp: 0,
            current_exp: 0,
            exp_to_next_level: 100,
            streak_days: 0,
            field_of_interest: formData.get('field_of_interest') as string || 'Not Set'
          }
        };
        
        Cookies.set('token', mockData.token, { expires: 7 });
        Cookies.set('user', JSON.stringify(mockData.user), { expires: 7 });
        Cookies.set('profile', JSON.stringify(mockData.profile), { expires: 7 });
        
        return mockData;
      }
    }
    throw error;
  }
};

export const logout = () => {
  Cookies.remove('token');
  Cookies.remove('user');
  Cookies.remove('profile');
  window.location.href = '/login';
};

export const getUser = () => {
  const userStr = Cookies.get('user');
  return userStr ? JSON.parse(userStr) : null;
};

export const updateUser = (updatedUser: any) => {
  Cookies.set('user', JSON.stringify(updatedUser), { expires: 7 });
};

export const isAuthenticated = () => {
  return !!Cookies.get('token');
};

// Helper function to get image URL with proper formatting
export const getProfileImageUrl = (user: any) => {
  if (!user?.profile_photo_url) return null;
  
  const imageUrl = user.profile_photo_url;
  
  // If it's a base64 data URL (for demo mode)
  if (imageUrl.startsWith('data:')) {
    return imageUrl;
  }
  
  // If it's already a full URL
  if (imageUrl.startsWith('http')) {
    return imageUrl;
  }
  
  // If it's a relative path, prepend backend URL
  return `http://localhost:5000${imageUrl}`;
};




lib/sessionManager.ts
// lib/sessionManager.ts
// This utility helps manage user sessions and handle authentication issues

import Cookies from 'js-cookie';
import api from './api';

interface SessionValidationResult {
  isValid: boolean;
  needsRefresh: boolean;
  errorCode?: string;
}

class SessionManager {
  private static instance: SessionManager;
  private validationCache: { [key: string]: { timestamp: number; isValid: boolean } } = {};
  private readonly CACHE_DURATION = 2 * 60 * 1000; // 2 minutes cache

  static getInstance(): SessionManager {
    if (!SessionManager.instance) {
      SessionManager.instance = new SessionManager();
    }
    return SessionManager.instance;
  }

  /**
   * Validates the current session
   */
  async validateSession(): Promise<SessionValidationResult> {
    const token = Cookies.get('token');
    
    if (!token) {
      return { isValid: false, needsRefresh: true, errorCode: 'NO_TOKEN' };
    }

    // Check cache first
    const cacheKey = token.substring(0, 20); // Use part of token as cache key
    const cached = this.validationCache[cacheKey];
    
    if (cached && (Date.now() - cached.timestamp) < this.CACHE_DURATION) {
      return { isValid: cached.isValid, needsRefresh: !cached.isValid };
    }

    try {
      const response = await api.get('/auth/health');
      
      // Cache successful validation
      this.validationCache[cacheKey] = {
        timestamp: Date.now(),
        isValid: true
      };
      
      return { isValid: true, needsRefresh: false };
      
    } catch (error: any) {
      // Cache failed validation
      this.validationCache[cacheKey] = {
        timestamp: Date.now(),
        isValid: false
      };
      
      const errorCode = error.response?.data?.code || 'UNKNOWN_ERROR';
      return { 
        isValid: false, 
        needsRefresh: true, 
        errorCode 
      };
    }
  }

  /**
   * Clears all authentication data
   */
  clearAuthData(): void {
    Cookies.remove('token');
    Cookies.remove('user');
    Cookies.remove('profile');
    this.clearCache();
  }

  /**
   * Clears the validation cache
   */
  clearCache(): void {
    this.validationCache = {};
  }

  /**
   * Redirects to login with appropriate query parameters
   */
  redirectToLogin(reason?: string): void {
    this.clearAuthData();
    
    const loginUrl = reason ? `/login?reason=${reason}` : '/login';
    
    // Prevent redirect loops
    if (!window.location.pathname.includes('/login')) {
      window.location.href = loginUrl;
    }
  }

  /**
   * Checks if user is authenticated
   */
  isAuthenticated(): boolean {
    const token = Cookies.get('token');
    const user = Cookies.get('user');
    return !!(token && user);
  }

  /**
   * Gets the current user data
   */
  getCurrentUser(): any {
    const userCookie = Cookies.get('user');
    try {
      return userCookie ? JSON.parse(userCookie) : null;
    } catch {
      return null;
    }
  }

  /**
   * Validates session before making important API calls
   */
  async ensureValidSession(): Promise<boolean> {
    const validation = await this.validateSession();
    
    if (!validation.isValid) {
      if (validation.errorCode === 'TOKEN_EXPIRED' || 
          validation.errorCode === 'SESSION_EXPIRED') {
        this.redirectToLogin('expired');
      } else if (validation.errorCode === 'ACCOUNT_INACTIVE') {
        this.redirectToLogin('inactive');
      } else {
        this.redirectToLogin('invalid');
      }
      return false;
    }
    
    return true;
  }

  /**
   * Setup automatic session validation
   */
  startSessionMonitoring(): void {
    // Validate session every 5 minutes
    const intervalId = setInterval(async () => {
      if (this.isAuthenticated()) {
        const validation = await this.validateSession();
        if (!validation.isValid) {
          console.warn('Session validation failed during monitoring');
        }
      }
    }, 5 * 60 * 1000);

    // Validate when page becomes visible
    const handleVisibilityChange = async () => {
      if (!document.hidden && this.isAuthenticated()) {
        await this.validateSession();
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);

    // Store cleanup function
    (window as any).__sessionCleanup = () => {
      clearInterval(intervalId);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }

  /**
   * Stop session monitoring
   */
  stopSessionMonitoring(): void {
    if ((window as any).__sessionCleanup) {
      (window as any).__sessionCleanup();
      delete (window as any).__sessionCleanup;
    }
  }
}

export const sessionManager = SessionManager.getInstance();

// Hook for React components
export const useSessionValidation = () => {
  const validateAndEnsure = async (): Promise<boolean> => {
    return await sessionManager.ensureValidSession();
  };

  const isAuthenticated = (): boolean => {
    return sessionManager.isAuthenticated();
  };

  const getCurrentUser = () => {
    return sessionManager.getCurrentUser();
  };

  const logout = () => {
    sessionManager.clearAuthData();
    sessionManager.redirectToLogin('logout');
  };

  return {
    validateAndEnsure,
    isAuthenticated,
    getCurrentUser,
    logout
  };
};

export default sessionManager;






lib/utils.ts
export const cn = (...classes: string[]) => classes.filter(Boolean).join(' ');

export const getDifficultyColor = (difficulty: string) => {
  switch (difficulty.toLowerCase()) {
    case 'easy': return 'text-green-400 border-green-400';
    case 'medium': return 'text-yellow-400 border-yellow-400';
    case 'hard': return 'text-red-400 border-red-400';
    default: return 'text-gray-400 border-gray-400';
  }
};

export const getRandomQuote = () => {
  const quotes = [
    { text: "I alone shall level up!", author: "Sung Jin-Woo" },
    { text: "The difference between the novice and the master is that the master has failed more times than the novice has tried.", author: "Unknown" },
    { text: "Hesitation is defeat.", author: "Isshin Ashina" },
    { text: "A hunter must hunt.", author: "Bloodborne" },
    { text: "What is a man but the sum of his memories?", author: "Assassin's Creed" },
    { text: "The right man in the wrong place can make all the difference in the world.", author: "G-Man" },
    { text: "Steel your mind. Your soul may belong to the shadows, but your body belongs to me.", author: "Solo Leveling" },
    { text: "I don't die easily.", author: "Sung Jin-Woo" },
    { text: "Getting stronger isn't just about power, it's about the will to keep going.", author: "Solo Leveling" },
    { text: "Every challenge is an opportunity to level up.", author: "Gamer's Wisdom" }
  ];
  
  return quotes[Math.floor(Math.random() * quotes.length)];
};

export const formatTime = (dateString: string) => {
  try {
    if (!dateString) {
      return 'Time not set';
    }
    
    const date = new Date(dateString);
    
    // Check if date is valid
    if (isNaN(date.getTime())) {
      return 'Time not set';
    }
    
    const now = new Date();
    const diff = date.getTime() - now.getTime();
    
    if (diff <= 0) {
      return 'Expired';
    }
    
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      return `${days} day${days > 1 ? 's' : ''} remaining`;
    }
    
    if (hours > 0) {
      return `${hours}h ${minutes}m remaining`;
    }
    
    return `${minutes}m remaining`;
  } catch (error) {
    return 'Time not set';
  }
};





public/images
(empty)




types/index.ts
export interface User {
  user_id: number;
  email: string;
  username: string;
  user_type: 'adventurer' | 'coach';
  profile_photo_url?: string;
}

export interface AdventurerProfile {
  full_name: string;
  field_of_interest: string;
  current_level: number;
  total_exp: number;
  current_exp: number;
  exp_to_next_level: number;
  streak_days: number;
}

export interface Quest {
  active_quest_id: number;
  quest_title: string;
  quest_type: string;
  base_xp: number;
  difficulty: 'easy' | 'medium' | 'hard';
  is_completed: boolean;
  expires_at: string;
  related_stat?: string;
}

export interface Stat {
  stat_name: string;
  stat_icon: string;
  current_value: number;
  max_value: number;
}

export interface Student {
  user_id: number;
  username: string;
  full_name: string;
  field_of_interest: string;
  current_level: number;
  total_exp: number;
  streak_days: number;
}export interface User {
  user_id: number;
  email: string;
  username: string;
  user_type: 'adventurer' | 'coach';
  profile_photo_url?: string;
}

export interface AdventurerProfile {
  full_name: string;
  field_of_interest: string;
  current_level: number;
  total_exp: number;
  current_exp: number;
  exp_to_next_level: number;
  streak_days: number;
}

export interface Quest {
  active_quest_id: number;
  quest_title: string;
  quest_type: string;
  base_xp: number;
  difficulty: 'easy' | 'medium' | 'hard';
  is_completed: boolean;
  expires_at: string;
  related_stat?: string;
}

export interface Stat {
  stat_name: string;
  stat_icon: string;
  current_value: number;
  max_value: number;
}

export interface Student {
  user_id: number;
  username: string;
  full_name: string;
  field_of_interest: string;
  current_level: number;
  total_exp: number;
  streak_days: number;
}export interface User {
  user_id: number;
  email: string;
  username: string;
  user_type: 'adventurer' | 'coach';
  profile_photo_url?: string;
}

export interface AdventurerProfile {
  full_name: string;
  field_of_interest: string;
  current_level: number;
  total_exp: number;
  current_exp: number;
  exp_to_next_level: number;
  streak_days: number;
}

export interface Quest {
  active_quest_id: number;
  quest_title: string;
  quest_type: string;
  base_xp: number;
  difficulty: 'easy' | 'medium' | 'hard';
  is_completed: boolean;
  expires_at: string;
  related_stat?: string;
}

export interface Stat {
  stat_name: string;
  stat_icon: string;
  current_value: number;
  max_value: number;
}

export interface Student {
  user_id: number;
  username: string;
  full_name: string;
  field_of_interest: string;
  current_level: number;
  total_exp: number;
  streak_days: number;
}export interface User {
  user_id: number;
  email: string;
  username: string;
  user_type: 'adventurer' | 'coach';
  profile_photo_url?: string;
}

export interface AdventurerProfile {
  full_name: string;
  field_of_interest: string;
  current_level: number;
  total_exp: number;
  current_exp: number;
  exp_to_next_level: number;
  streak_days: number;
}

export interface Quest {
  active_quest_id: number;
  quest_title: string;
  quest_type: string;
  base_xp: number;
  difficulty: 'easy' | 'medium' | 'hard';
  is_completed: boolean;
  expires_at: string;
  related_stat?: string;
}

export interface Stat {
  stat_name: string;
  stat_icon: string;
  current_value: number;
  max_value: number;
}

export interface Student {
  user_id: number;
  username: string;
  full_name: string;
  field_of_interest: string;
  current_level: number;
  total_exp: number;
  streak_days: number;
}




.env.local
NEXT_PUBLIC_API_URL=http://localhost:5000/api



package.json
{
  "name": "solo-leveling-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-tabs": "^1.0.4",
    "axios": "^1.6.2",
    "js-cookie": "^3.0.5",
    "lucide-react": "^0.294.0",
    "next": "14.0.3",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-dropzone": "^14.2.3",
    "react-hot-toast": "^2.4.1"
  },
  "devDependencies": {
    "@types/js-cookie": "^3.0.6",
    "@types/node": "^20.10.0",
    "@types/react": "^18.2.39",
    "@types/react-dom": "^18.2.17",
    "eslint": "^8",
    "eslint-config-next": "14.0.3",
    "typescript": "^5.3.2"
  }
}



tsconfig.json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    },
    "baseUrl": "."
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}